<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ElmRundis</title>
    <link>http://rundis.github.io/blog</link>
    <atom:link href="http://rundis.github.io/blog/elmfeed.xml" rel="self" type="application/rss+xml" />
    <description>Elm feed from rundis.github.com/blog</description>
    <language>en-gb</language>
    <pubDate>Mon, 26 Sep 2016 13:25:28 +0200</pubDate>
    <lastBuildDate>Mon, 26 Sep 2016 13:25:28 +0200</lastBuildDate>

      <item>
        <title>Elm Light 0.4.0 - AST driven Elm features in Light Table using PEG.js</title>
        <link>http://rundis.github.io/blog/2016/elm_light_ast.html</link>
        <pubDate>Thu, 15 Sep 2016 00:00:00 +0200</pubDate>
        <guid isPermaLink="false">2016/elm_light_ast.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Version 0.4.0 marks the first version of &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;Elm Light&lt;/a&gt; that uses ASTs to enable more advanced IDE like features.
This version includes features like; find usages, jump to definition, context aware auto-completer and some simple refactorings.
It&amp;#8217;s early days, but I&amp;#8217;m in no doubt it will enable some pretty cool features going forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Evan Czaplicki the author of &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; has told the community on several occations not to block on something
not being available from Elm. I&amp;#8217;ll have to admit that I&amp;#8217;ve been hoping for more tooling hooks from Elm for quite some time, an offical AST coupled with
the Elm compiler would be super sweet. It&amp;#8217;s definitely on the roadmap, but not a high priority for Elm (right now).
My best bet would be to wait for the AST work put into &lt;a href=&quot;https://github.com/avh4/elm-format&quot;&gt;elm-format&lt;/a&gt; to be made available. That might
actually not be to far off. But several weeks ago I decided I wanted to give it a shot to do something simplified on my
own. Mainly as a learning experience, but also to gather data for use cases that an AST can support and to learn a bit about parsing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You&amp;#8217;ll find a demo of the new features added in version 0.4.0 below. The rest of this post gives a brief description
of my journey to create a parser and how I integrated that into the plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can find the elm-light plugin &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;here&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_demo_of_0_4_0_features&quot;&gt;Demo of 0.4.0 Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/pmMhCRvU9R0&quot;&gt;ScreenCast demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pmMhCRvU9R0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Other relevant demos:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://rundis.github.io/blog/2016/elm_light_package.html&quot;&gt;Managing and digramming Elm packages with d3 in Light Table&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://rundis.github.io/blog/2015/elm_light.html&quot;&gt;elm-light intro demo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_creating_a_parser&quot;&gt;Creating a parser&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_researching&quot;&gt;Researching&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It actually started a while back when I bought a book about parsers. It was almost 1000 pages. It turned out
to be very uninspiring bed time reading. I guess I wasn&amp;#8217;t motivated enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My only other experience with parsing since my University days was the stuff I did when porting &lt;a href=&quot;https://github.com/xsc/rewrite-clj&quot;&gt;rewrite-clj&lt;/a&gt;
to ClojureScript. That ended up becoming &lt;a href=&quot;https://github.com/rundis/rewrite-cljs&quot;&gt;rewrite-cljs&lt;/a&gt;, which I&amp;#8217;ve used for some othere Light Table plugins I&amp;#8217;ve created.
But the syntax of Clojure is comparatively simple and also I did a port, so I can&amp;#8217;t really claim any credits for the actual parsing anyways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Clojure world I&amp;#8217;ve used &lt;a href=&quot;https://github.com/Engelberg/instaparse&quot;&gt;InstaParse&lt;/a&gt; which is a really neat library to build parsers.
It also has a ClojureScript port, which I though would be good fit for Light Table. I found an old BNF for Elm called &lt;a href=&quot;https://github.com/Apanatshka/elm-spoofax/blob/master/syntax.ebnf&quot;&gt;elm-spoofax&lt;/a&gt;,
so I thought. Let&amp;#8217;s give it a go. I spent a good week or so to get something that seemed to parse most Elm files I threw at it
and provided a tree of nodes which looked fairly decent to work with. However I hadn&amp;#8217;t read the README for the CLJs port
that will and hadn&amp;#8217;t really reflected on what an order of magnitude slower that it&amp;#8217;s Clojure big brother actually meant.
With a couple of hundred lines I started seeing parse-times nearing a second. I&amp;#8217;m sure it could be optimized and tuned somewhat,
but it was way off the mark of what I was going to need for continuos as you type parsing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Back to the drawing board. I started looking at a ton of alternatives. Parser generators and parser combinators etc etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_enter_peg_js&quot;&gt;Enter PEG.js&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After trying out a few parser generators I came across &lt;a href=&quot;http://pegjs.org/&quot;&gt;PEG.js&lt;/a&gt;. It looked approachable enough
to me and they even had a nice online tool. So I set out on my way and decided to keep it simple. Just parse
top level definitions. Spent a few days to get an initial version up and running. It was time to give it a performance test.
YAY, for most files I got &amp;lt; 10ms parse times for some quite big ones (thousands of lines) I started seeing 100ms parse times.
It still seemed worth pursuing. So I did !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
PEG.js is a simple parser generator. It supports a syntax that is BNF like, but you can smatter it with
some JavaScript when appropriate. It also has nice error reporting and a few other nifty features.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;module                                           &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  = declaration:moduledeclaration EOS
    LAYOUT
    imports:imports?
    LAYOUT
    toplevel:topLevelDeclarations?
    LAYOUT
    {
      return {
      	moduledeclaration: declaration,
        imports: imports,
        declarations: toplevel
      }
    }

moduledeclaration                               &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  = type:(type:(&quot;effect&quot; / &quot;port&quot;) __ { return type; })? &quot;module&quot; __ name:upperIds __ exposing:exposing
    {
      return {
        type: (type||&quot;&quot; + &quot; module&quot;).trim(),
        name: name,
        exposing: exposing
      };
    }

// .. etc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The top level rule. It sort of looks like BNF, but you&amp;#8217;ll also notice some JavaScript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The rule for parsing the module declaration, which again uses other rules, which again &amp;#8230;&amp;#8203;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I basically used a process of looking at this old &lt;a href=&quot;https://github.com/Apanatshka/elm-spoofax/blob/master/syntax.ebnf&quot;&gt;Elm BNF&lt;/a&gt;
as inspiration and then adjusting along the way. The PEG.js online tool was really helpful during this work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Why a JavaScript parser generator ?&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well Light Table is based on Electron. So it&amp;#8217;s basically a node server with a browser client build in.
Having a parser that plays seemlessly with the basic building blocks of the browser is both convenient
and practical in terms of distribution. I can just require the parser as a node module and off we go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second reason is that for example my Haskell foo is not up to scratch. I would love to do it in Elm
but current Elm combinator libraries just doesn&amp;#8217;t provide enough building blocks for me to see
this as a competive or realistic alternative quite yet.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_designing_for_as_you_type_parsing_aytp&quot;&gt;Designing for As You Type Parsing (AYTP ?)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The general idea I had was to design with the following in mind
- Parsing everything (including 3.rd party packages) when connecting, is a bearable price to pay to ensure everything is hunky dory and good to go once you are connected
- The design should support file changes not only from actions in the editor, but also from any outside process
- Things generally have to be asynchronous to ensure the Editor stays responsive at all times
- Only introduce (persistent) caching if there is no way around it&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_listening_for_changes&quot;&gt;Listening for changes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To support parsing whenever a file changes or whenever you install or remove a package in your Elm projects
I opted for using &lt;a href=&quot;https://github.com/paulmillr/chokidar&quot;&gt;Chokidar&lt;/a&gt;. &lt;a href=&quot;https://github.com/halohalospecial/atom-elmjutsu&quot;&gt;Elmjutsu&lt;/a&gt; - an excellent Elm plugin for Atom
provided me with the inspiration here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each Elm project in Light Table will get it&amp;#8217;s own node process running Chokidar. Whenever the appropriate events
are fired, it will parse the file(s) needed and notify the Elm plugin editor process with the results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The code for initiating the watcher&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  var watcher = chokidar.watch([&apos;elm-package.json&apos;,                    &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                                &apos;elm-stuff/exact-dependencies.json&apos;,
                                &apos;**/*.elm&apos;], {
    cwd: process.cwd(),
    persistent: true,
    ignoreInitial: false,
    followSymlinks: false,
    atomic: false
  });

  watcher.on(&quot;raw&quot;, function(event, file, details) {                   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    var relFile = path.relative(process.cwd(), file);
    var sourceDirs = getSourceDirs(process.cwd());


    if(relFile === &quot;elm-stuff/exact-dependencies.json&quot;) {
      if ( event === &quot;modified&quot;) {
        parseAllPackageSources();                                      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      }
      if (event === &quot;deleted&quot;) {
        sendAstMsg({
          type: &quot;packagesDeleted&quot;
        });
      }
    }


    if (isSourceFile(sourceDirs, file) &amp;amp;&amp;amp; event === &quot;modified&quot;) {
      parseAndSend(file);                                              &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    }

    if (isSourceFile(sourceDirs, file) &amp;amp;&amp;amp; event === &quot;deleted&quot;) {
      sendAstMsg({
        file: file,
        type: &quot;deleted&quot;
      });
    }

    if (isSourceFile(sourceDirs, file) &amp;amp;&amp;amp; event === &quot;moved&quot;) {
      if (fileExists(file)) {
        parseAndSend(file);
      } else {
        sendAstMsg({
          file: file,
          type: &quot;deleted&quot;
        });
      }
    }
  });


  elmGlobals.watcher = watcher;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Start the watcher&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To be able to handle renames and a few othere edge cases I ended listening for raw avents from Chokidar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Whenever this elm file changes is very likely that&amp;#8217;s due to a package install, update or delete of some kind
The time spent for parsing all package sources is proportionally small compared to the time spent on
a package install so this &quot;brute-force&quot; approach actually works fine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Parsing a single file on change and notifying the editor process with the results is the common case&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_caching_the_asts&quot;&gt;Caching the ASTs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Elm Light plugin Editor part, a Clojure(Script) atom is used to store all projects and their ASTs. Not only does it
store AST&amp;#8217;s for you project files, but it also stores ASTs for any 3.rd party packages your project depends on.
That means that it does use quite a bit of memory, but profiling sugggest it&amp;#8217;s not too bad actually.
The great thing now is, that I have a Clojure datastructure I can work with. Slice and dice, transform and do all kinds of stuff with
using the full power of the clojure.core API. Super powerful and so much fun too :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_but_what_about_this_parsing_as_you_type_then&quot;&gt;But what about this parsing as you type then ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well for every open Elm editor, there is a handler for parsing the editors content and update the AST atom.
Again the actually parsing is performed in a node client process, otherwise the editor would obviously have ground to a halt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;It looks something like this:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(behavior ::elm-parse-editor-on-change                               &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
          :desc &quot;Parse a connected elm editor on content change&quot;
          :triggers #{:change}
          :debounce 200                                              &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
          :reaction (fn [ed]
                      (object/raise ed :elm.parse.editor)))          &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;


(behavior ::elm-parse-editor                                         &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
          :desc &quot;Initiate parsing of the content/elm code of the given editor&quot;
          :triggers #{:elm.parse.editor :focus :project-connected }
          :reaction (fn [ed]
                      (when (not (str-contains (-&amp;gt; @ed :info :path) &quot;elm-stuff&quot;))
                        (let [client (get-eval-client-if-connected ed :editor.elm.ast.parsetext)
                             path (-&amp;gt; @ed :info :path)]

                         (when (and client
                                  (= (pool/last-active) ed))

                           (clients/send client                     &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
                                         :editor.elm.ast.parsetext
                                         {:code (editor/-&amp;gt;val ed)}
                                         :only ed))))))

(behavior ::elm-parse-editor-result                                 &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
          :desc &quot;Handle parse results for a parsed editors content&quot;
          :triggers #{:editor.elm.ast.parsetext.result}
          :reaction (fn [ed res]
                      (if-let [error (:error res)]
                        (do
                          (object/update! ed [:ast-status] assoc :status :error :error error)
                          (object/raise ed :elm.gutter.refresh))
                        (let [path (-&amp;gt; @ed :info :path)]
                          (object/update! ed [:ast-status] assoc :status :ok :error nil)

                          (elm-ast/upsert-ast! (-&amp;gt; (get-editor-client ed) deref :dir)  &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
                                               {:file path
                                                :ast (:ast res)})
                          (object/raise ed :elm.gutter.exposeds.mark)))


                      (elm-ast/update-status-for-editor ed)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This the behaviour (think runtime configurable event handler) that triggers
parsing whenever the editor contents change.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Parsing all the time is not really necessary for most things, so a debounce has
been defined to not spam the node client&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We delegate to the behaviour below which is a more generic trigger parsing behavior&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This behavior is responsible for sending off a parse request to the node client&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We send the parse request to the node client&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Once the node client process has finished parsing this behviour will be triggered with the result&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We update the AST atom with the AST for this particular combination of project and file represented by the editor&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
We only update the AST on succesful parses. A lot of the time when typing the editor contents will naturally not
be in a correct state for parsing. We always keep track of the last valid state, so that allows the plugin
to still provide features that doesn&amp;#8217;t necessarily need an completely current AST.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_there_is_always_an_exception&quot;&gt;There is always an exception&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Things was working quite well initially, managed to get several features up and running.
But when I started to rewrite the auto completer from using &lt;a href=&quot;https://github.com/ElmCast/elm-oracle&quot;&gt;elm-oracle&lt;/a&gt;
I hit a few killer problems;
- The contiuous parsing started to tax the editor to the point that things became unusable
- With debouncing I didn&amp;#8217;t have accurate enough results to provide a proper context for context aware completions
- I discovered general performance problems in how I&amp;#8217;ve written my ClojureScript code
- For large files synchrounous parsing was out of the question&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Auto completers are tricky and doing it synchronous was proving useless for Elm files larger than a few hundred lines.
Back to the drawing board.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_tuning&quot;&gt;Tuning&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So providing hints for the autocompleter definitely has to happen asynchronously.
But even that was to taxing for larger files and AST. So I spent quite some time optimizing
the ClojureScript code. Turning to JavaScript native when that was called for. Heck I even threw in memoization
a couple of places to get response times down. Even turning JSON into EDN (clojure data format) had to be tweaked to
become performant enough. The whole process was quite challenging and fun.
There are still things to be tuned, but I&amp;#8217;ll wait and see what real usage experience provides in terms of cases worth
optimizing for.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_partial_synchronous_partial_parsing&quot;&gt;Partial synchronous partial parsing&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The autocompleter is async, but for some cases it turned out to be feasible to do a partial
parse of the editors contents. PEG.js has a feature to support multiple start rules, so I ended
up defining a start rule that only parses the module declaration and any imports.
That allowed the context sensitive hints for module declartions and imports to have a completely up to date
AST (well as long as it&amp;#8217;s valid) and at the same time keep the autocompleter responsive enough.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_really_large_files&quot;&gt;Really large files&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Depending on who you ask, you might get a different definition, but to me Elm files that are several thousand
lines are large. So hopefully they are more the exception than the rule. But for files of that
size the autocompleter will be a little slugish. Not too bad (on my machine!), but you will notice it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you experience this, do let me know. And also be aware that turning off the auto-completer is deffo and option
and easy for you to do. The guide contains instructions for how to do that.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_refactoring&quot;&gt;Refactoring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It would be really neat if I could refactor in the AST itself and just &quot;print&quot; the update result
back to the editor. However with the complexities of the AST already, the fact that I&amp;#8217;m not even parsing everything yet
and all interesing challenges with an indentation sensitive language with lot&amp;#8217;s of flexibility in terms of comments and whitespace&amp;#8230;&amp;#8203;
Well that&amp;#8217;ll have to be a future enterprise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s not entirly true though. For a couple of the features I sort of do that, but only for a
select few nodes of the AST, and the change is not persited to the AST atom (think global database of ASTs).
So it&amp;#8217;s like a one-way dataflow:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;get necessary nodes from AST atom&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update the node(s)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;print to editor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;editor change triggers AST parsing for editor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node client notifies editor behaviour responsible for updating the AST atom&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AST Atom gets updated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The AST atom is up to date, but slightly after the editor&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(behavior ::elm-expose-top-level
          :desc &quot;Behavior to expose top level Elm declaration&quot;
          :triggers #{:elm.expose.top.level}
          :reaction (fn [ed]
                      (let [path (-&amp;gt; @ed :info :path)
                            prj-path (project-path path)
                            module (elm-ast/get-module-ast prj-path path)             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                            exposing (-&amp;gt; module :ast :moduleDeclaration :exposing)]   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

                        (when-let [decl (elm-ast/find-top-level-declaration-by-pos    &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                                            (editor/-&amp;gt;cursor ed)
                                            module)]
                          (when-not (elm-ast/exposed-by-module? module (:value decl))
                            (let [{:keys [start end]} (elm-ast/-&amp;gt;range (:location exposing))
                                  upd-exp (elm-ast/expose-decl decl exposing)         &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                                  pos (editor/-&amp;gt;cursor ed)
                                  bm (editor/bookmark ed pos)]
                              (editor/replace ed                                      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
                                              start
                                              end
                                              (elm-ast/print-exposing upd-exp))
                              (safe-move-cursor ed bm pos)))))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Get the AST root node for the module the current editor represents&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;From that retrieve the exposing node (this is the one we want to update)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Find the declaration to expose based on where the cursor is placed in the editor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Update the exposing AST node to also expose the given declaration in &amp;lt;3&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Overwrite the exposing node in the editor, that works because we have the current location
of it already :-)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the editor is changed, the normal process for updating the global AST atom is triggered.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary_and_going_forward&quot;&gt;Summary and going forward&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Writing a parser (with the help of a parser generator) has been a really valuable learning experience.
After my failed attempt with InstaParse, it&amp;#8217;s hard to describe the feeling I had when I saw the numbers
from my PEG.js based implementation. I tried to talk to my wife about it, but she couldn&amp;#8217;t really see what the fuzz was all
about !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll continue to make the parser better, but the plan isn&amp;#8217;t to spend massive amounts of time on making that perfect.
I&amp;#8217;d rather turn my attention on trying to help the Elm community and it&amp;#8217;s tooling people access
to an AST on stereoids. My bet is that the AST from elm-format is going to be the way forward, so I&amp;#8217;ll try
to help out here. Hopefully my own experience will be useful in this process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m pretty sure I can carry on to make some pretty cool features with the AST i already have,
so there will defininetely be some cool stuff coming in Elm Light in the near future regardless
of what happens in the AST space and tooling hooks for Elm in general.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Oh no! Learning Elm has gotten me confused about static vs dynamic typing.</title>
        <link>http://rundis.github.io/blog/2016/type_confused.html</link>
        <pubDate>Mon, 13 Jun 2016 00:00:00 +0200</pubDate>
        <guid isPermaLink="false">2016/type_confused.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last few years I&amp;#8217;ve worked on projects using Groovy and Clojure/ClojureScript.
In 2016 I&amp;#8217;ve spent quite a bit of pastime trying to get to grips
with statically typed functional languages. In particular I&amp;#8217;ve deep dived into Elm. I&amp;#8217;ve also dipped
my toes into Haskell. It&amp;#8217;s been a great learning experience and has changed my view of static typing.
Does this mean I&amp;#8217;m a static typing zealot now ? Nah, but there is no doubt I&amp;#8217;m much more open to the benefits of static typing.
I guess would characterize myself more like undecided or confused than convinced either way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_background&quot;&gt;Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A couple of years ago I started working with Groovy (and Grails). I fell in love
and felt I became way more productive than I had ever been when working with Java. I rarely
missed the added type safety of Java. Groovy also gave me a gentle introduction to functional programming related concepts in a way Java never encouraged me to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2014 I started dabbling with Clojure(Script), but it took until 2015 before I got a chance
to use it for real in a project. It was a blast and I finally started to understand why more and more people
are turning towards functional programming. Clojure/ClojureScript became a big part of my life
both at work and evenings and nights. I was hooked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the end of last year I was back on a Groovy/Grails project. I was perfectly ok with that, but it wasn&amp;#8217;t
a shiny new thing any longer, so I guess that&amp;#8217;s partially why I was looking for something new to learn on the side.
Elm really caught my attention. When I watched &lt;a href=&quot;http://www.elmbark.com/2016/03/16/mainstream-elm-user-focused-design&quot;&gt;Let&amp;#8217;s be mainstream! User focused design in Elm&lt;/a&gt;
I finally found a statically typed functional language that looked approachable to me.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_first_signs_of_functional_immutable_damage&quot;&gt;First signs of functional immutable damage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My time with Clojure (and gradually Elm) had changed me. I started to change how I coded Groovy. I tried to be more
functional and whenever I declared a variable that I later mutated I was left feeling dirty somehow.
It&amp;#8217;s hard to try to enforce immutability in Groovy when the language, libraries and idioms don&amp;#8217;t make immutability
a first class citizen. I had to bite the bullet quite a few times, and yeah I could still get things done.
The thing is, I started to pay more attention to what kind of errors and bugs I introduced as a result of careless mutation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One particular example springs to mind. I was doing validation of a master/detail form.
To validate the detail rows of the form I needed to make sure they were sorted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Easy peasy ?&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;master.detailRows.sort {it.date}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However this had the nasty side-effect
of reordering the detail rows in my UI which was rendered from this object.
I was puzzled at first, but then I remembered that immutability is not something you
can take for granted in the Groovy collection API (some things are, others are just bolted on top of Java).
The fix was easy enough. &lt;code&gt;collection.sort&lt;/code&gt; has an overloaded version that takes a boolean parameter &lt;code&gt;mutate&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;So I was left with&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;master.details.sort(false) {it.date}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My eyes hurt: &lt;strong&gt;&lt;code&gt;sort false&lt;/code&gt;&lt;/strong&gt;, but but I &lt;strong&gt;do&lt;/strong&gt; want to sort.
2 years ago I wouldn&amp;#8217;t think much of this, it&amp;#8217;s just a thing I was used to deal with and spend cycles on.
Now I get annoyed both with myself for forgetting and the language for making me feel dumb for not remembering.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_adding_types&quot;&gt;Adding types&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After having spent some time with Elm (and Haskell) I noticed I started to add more
type information in my Groovy code. I felt it improved the readability of my functions and methods.
It also made IntelliJ more happy and helpful in many cases.
The frontend of the application is written in JavaScript with a fair chunk of jQuery. Introducing something like Flow
might be helpful, but I&amp;#8217;m convinced there are other more fundemental issues that needs to be addressed before considering that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m pretty sure I&amp;#8217;ll be using something like &lt;a href=&quot;https://github.com/plumatic/schema&quot;&gt;Schema&lt;/a&gt; more actively when writing Clojure/ClojureScript
going forward. When I have the chance Clojure Spec will probably be the preferred option. I know it&amp;#8217;s not static typing, but my hunch is
that it will have a huge positive impact on documentation, error messages, runtime checks, testing and probably many other things too.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_functionally_dynamic_but_statically_aware&quot;&gt;Functionally dynamic, but statically aware&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week I was back to a Clojure/ClojureScript project again. I&amp;#8217;m quite excited and I&amp;#8217;m convinced I&amp;#8217;m going to have a blast.
However I&amp;#8217;ve decided to use this opportunity to reflect more on where I feel Clojure/ClojureScript with it&amp;#8217;s dynamic typing shines and where I think
static typing might have been helpful. After spending so much time with Elm and very much enjoying it, I might be susceptible to confirmation bias that static typing only carries benefits.
I&amp;#8217;m going to try real hard to stay as objective or rather true to myself as I can when reflecting on positives of static vs dynamic.
Of course there&amp;#8217;s a lot more to languages than static vs dynamic typing. I do find it interesting to reflect about it though, especially
since so many people seem to have such strong opinions about type safety. I myself am mostly confused or largely undecided at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_first_week_reflections&quot;&gt;First week reflections&lt;/h3&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Undoubtably with some Elm tinted glasses
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The good&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bhauman/lein-figwheel&quot;&gt;Figwheel&lt;/a&gt; how I&amp;#8217;ve missed you ! With the latest release, error messages has gotten way better too. Maybe Elm with it&amp;#8217;s suberb error messages has been an inspiration ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I haven&amp;#8217;t gotten my tooling set up right yet, but know that once I&amp;#8217;ve got the REPL stuff set up right I&amp;#8217;m going to be a happier puppy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The app is really cool, and there are lots of exciting techs to dig into&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paredit rocks for editing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Unsure/unknowns&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Day8/re-frame&quot;&gt;re-frame&lt;/a&gt; - When I first read about it several months ago I was initially convinced that this
small but very powerful framework was a fantastic thing. Maybe it really is to. But having experienced Elms departure from FRP, I&amp;#8217;m wondering whether it might have some drawbacks at scale that I am not aware of yet.
I&amp;#8217;ve barely gotten a chance to work with it, but I&amp;#8217;ve so far found it hard to internalize all the reactive dataflows going on in the client app. I obviously need to spend more time before making any judgment.
Maybe I&amp;#8217;ll write a blog post comparing The Elm Architecture to re-frame in the future.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Have I become dumber ?&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I genuinly found it harder than before to understand what various functions did by looking at their signature.
That could very well be down to naming and lack of documentation and or something like schema, but it was initially frustrating to see functions with map parameters and having to read through
the whole of the implementation to get an understanding of what they might contain. &lt;code&gt;println&lt;/code&gt; to the rescue&amp;#8230;&amp;#8203; sort of.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I made silly mistakes, some of these resulted in things just not happening and others resulted in stacktraces that wasn&amp;#8217;t helpful in anyway at all.
I can&amp;#8217;t help but think about the fact that  static types and a helpful compiler would have prevented me from making many of those mistakes. Sure I should have tested more, both through the use of the REPL and probably more proper tests too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I was faced with a few refactorings, that didn&amp;#8217;t really go as well as I feel it should have. Again more tests would have helped, but then again a lot of those tests I just wouldn&amp;#8217;t have needed to write in Elm.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_an_attempt_to_summarize&quot;&gt;An attempt to summarize&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m convinced that functional programming vs imperative programming is a much more important concern than
static vs dynamic typing. I&amp;#8217;m also in no doubt that I think functional programming is by far superior.
A year ago I was solidly in the dynamic typing camp. My impression of statically typed functional languages was that they were way to hard to get started with.
None of the languages I had heard about seemed particularily approachable and I had doubts about their practicality for the problems
I typically encounter in my projects. I&amp;#8217;ve tried Haskell a couple of times, but I guess I was never commited enough.
Learning Elm has not only been great fun, but It has clearly opened my mind to the possibility that static type checking can be very beneficial.
It&amp;#8217;s hard to describe the experience of doing a major refactoring, having a really helpful and friendly compiler guide you along step by step and when finally
everything compiles it just works. Having had that experience many times with Elm (and to a degree Haskell) certainly changed something fundementally in my thinking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Until I have used Elm, Haskell or another statically typed functional language in a real project I&amp;#8217;m in no position to pass any proper (personal) judgement. Maybe
I&amp;#8217;m just going to remain confused, or maybe I&amp;#8217;m never going to have a particularily strong preference.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Typed up CRUD SPA with Haskell and Elm - Part 5: Elm 0.17 Upgrade</title>
        <link>http://rundis.github.io/blog/2016/haskel_elm_spa_part5.html</link>
        <pubDate>Mon, 30 May 2016 00:00:00 +0200</pubDate>
        <guid isPermaLink="false">2016/haskel_elm_spa_part5.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Elm version 0.17 was released a few weeks back. If haven&amp;#8217;t already, you should read the annoucement post
&lt;a href=&quot;http://elm-lang.org/blog/farewell-to-frp&quot;&gt;A Farewell to FRP&lt;/a&gt;. So what does that mean for the Albums app ?
Sounds like we&amp;#8217;re in for a massive rewrite. It turns out, since we were already using The Elm Architecture to
structure our application, the impact isn&amp;#8217;t that big after all. Most of it is mechanical, and actually the biggest change
is that we can no longer use the 3.rd party routing library we depended on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Useful resources&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check out the other &lt;a href=&quot;http://rundis.github.io/blog/tags/haskellelmspa.html&quot;&gt;episodes&lt;/a&gt; in this blog series.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The accompanying &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;Albums&lt;/a&gt; sample app is on github, and there is a tag
for each episode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_upgrade_steps&quot;&gt;Upgrade steps&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_upgrading_packages&quot;&gt;Upgrading packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_mechanical_changes&quot;&gt;Mechanical changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_routes_and_route_parsing_ehh_urls_if_you_like&quot;&gt;Routes and Route parsing (ehh&amp;#8230;&amp;#8203; URLs if you like)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_dealing_with_http&quot;&gt;Dealing with Http&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_nesting_components&quot;&gt;Nesting Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_wiring_it_all_together_in_frontend_src_main_elm&quot;&gt;Wiring it all together in frontend/src/Main.elm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_summary&quot;&gt;Summary&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_appendix&quot;&gt;Appendix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would have done the upgrade to 0.17 sooner, but the Album application depended on a 3rd party package
called &lt;a href=&quot;https://github.com/etaque/elm-transit-router&quot;&gt;elm-transit-router&lt;/a&gt;. It served us well and we even got some nice
transition animations when changing pages. However as all the routing libraries that we&amp;#8217;re available for 0.16, it
depended on a community package called elm-history. That package was never going to updated to support 0.17, in fact
all support for the Web Platform APIs will eventually supported by the Elm language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week &lt;a href=&quot;https://github.com/elm-lang/navigation&quot;&gt;Navigation&lt;/a&gt; was announced. This is library for managing navigation in a SPA. It provides nice abstractions over the History API.
In tandem Evan released &lt;a href=&quot;https://github.com/evancz/url-parser&quot;&gt;URL Parser&lt;/a&gt; which is a simple parser for turning URLs into structured data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With that in place I felt confident we should be able to do the upgrade. Let&amp;#8217;s walk through the highlights !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_upgrade_steps&quot;&gt;Upgrade steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_upgrading_packages&quot;&gt;Upgrading packages&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. /frontend/elm-package.json&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-JavaScript&quot; data-lang=&quot;JavaScript&quot;&gt;&quot;dependencies&quot;: {
  &quot;elm-community/elm-json-extra&quot;: &quot;1.0.0 &amp;lt;= v &amp;lt; 2.0.0&quot;,
  &quot;elm-community/list-extra&quot;: &quot;2.0.0 &amp;lt;= v &amp;lt; 3.0.0&quot;,
  &quot;elm-lang/core&quot;: &quot;4.0.0 &amp;lt;= v &amp;lt; 5.0.0&quot;,
  &quot;elm-lang/html&quot;: &quot;1.0.0 &amp;lt;= v &amp;lt; 2.0.0&quot;,
  &quot;elm-lang/navigation&quot;: &quot;1.0.0 &amp;lt;= v &amp;lt; 2.0.0&quot;,
  &quot;evancz/elm-http&quot;: &quot;3.0.1 &amp;lt;= v &amp;lt; 4.0.0&quot;,
  &quot;evancz/url-parser&quot;: &quot;1.0.0 &amp;lt;= v &amp;lt; 2.0.0&quot;
},
&quot;elm-version&quot;: &quot;0.17.0 &amp;lt;= v &amp;lt; 0.18.0&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-JavaScript&quot; data-lang=&quot;JavaScript&quot;&gt;&quot;dependencies&quot;: {
    &quot;circuithub/elm-list-extra&quot;: &quot;3.9.0 &amp;lt;= v &amp;lt; 4.0.0&quot;,   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &quot;elm-lang/core&quot;: &quot;3.0.0 &amp;lt;= v &amp;lt; 4.0.0&quot;,
    &quot;etaque/elm-route-parser&quot;: &quot;2.1.0 &amp;lt;= v &amp;lt; 3.0.0&quot;,
    &quot;etaque/elm-transit-router&quot;: &quot;1.0.1 &amp;lt;= v &amp;lt; 2.0.0&quot;,   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &quot;etaque/elm-transit-style&quot;: &quot;1.0.1 &amp;lt;= v &amp;lt; 2.0.0&quot;,
    &quot;evancz/elm-effects&quot;: &quot;2.0.1 &amp;lt;= v &amp;lt; 3.0.0&quot;,          &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &quot;evancz/elm-html&quot;: &quot;4.0.2 &amp;lt;= v &amp;lt; 5.0.0&quot;,             &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    &quot;evancz/elm-http&quot;: &quot;3.0.0 &amp;lt;= v &amp;lt; 4.0.0&quot;,
    &quot;evancz/start-app&quot;: &quot;2.0.2 &amp;lt;= v &amp;lt; 3.0.0&quot;             &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
},
&quot;elm-version&quot;: &quot;0.16.0 &amp;lt;= v &amp;lt; 0.17.0&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/elm-community/&quot;&gt;Elm Community&lt;/a&gt; have taken over this package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;elm-transit-router&lt;/code&gt;, &lt;code&gt;elm-route-parser&lt;/code&gt;, &lt;code&gt;elm-transit-style&lt;/code&gt; have been replaced by &lt;code&gt;elm-lang/navigation&lt;/code&gt; and &lt;code&gt;evancz/url-parser&lt;/code&gt;
(pls note you can still use &lt;code&gt;etaque/elm-route-parser&lt;/code&gt; with the navigation package if you need more advanced route parsing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This package has been baked into core of Elm for 0.17, so this package is no longer needed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This package has moved under the &lt;code&gt;elm-lang&lt;/code&gt; umbrella. So has it&amp;#8217;s low level &lt;a href=&quot;https://github.com/elm-lang/virtual-dom&quot;&gt;virtual-dom&lt;/a&gt; transitive dependency&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This package has basically been moved into &lt;code&gt;elm-lang/html&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_mechanical_changes&quot;&gt;Mechanical changes&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_module_declarations&quot;&gt;Module declarations&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 0.16 we had&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;module Main (..) where&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 0.17 we have&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;module Main exposing (..)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Luckily &lt;a href=&quot;https://github.com/avh4/elm-format&quot;&gt;Elm Format&lt;/a&gt; handles this conversion automatically for us when we do format of an 0.16 .elm file !
So we can just run elm-format on the &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_effects_are_now_named_code_cmd_code&quot;&gt;Effects are now named &lt;code&gt;Cmd&lt;/code&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new name for Effects are now &lt;code&gt;Cmd&lt;/code&gt; shorthand for Command. &lt;code&gt;Cmd&lt;/code&gt; is part of &lt;code&gt;elm-lang/core&lt;/code&gt;
and lives in the &lt;a href=&quot;http://package.elm-lang.org/packages/elm-lang/core/4.0.1/Platform-Cmd&quot;&gt;Platform.Cmd&lt;/a&gt; module.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Changes to a typical update function&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Msg
    = SomeMsg
    | SomeOtherMsg


update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
update msg model =
    case msg of
       SomeMsg -&amp;gt;
           ( { model | count = model.count + 1 }
           , Cmd.none                               &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
           )
       -- etc...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;You&amp;#8217;ll also notice that &lt;code&gt;Action&lt;/code&gt; has changed to &lt;code&gt;Msg&lt;/code&gt;. It&amp;#8217;s just a naming convention change
, but it better conveys what it actually is. You&amp;#8217;ll see later when we get to the view function why it&amp;#8217;s probably a good idea for you to
follow that convention.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;As you see, here it&amp;#8217;s just a naming change in practice&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Action
    = SomeAction
    | SomeOtherAction


update : Action -&amp;gt; Model -&amp;gt; ( Model, Effects Action )
update action model =
    case action of
        SomeAction -&amp;gt;
            ( { model | count = model.count + 1 }
            , Effects.none
            )
        -- etc...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Making these changes is also fairly trivial with a good old search/replace.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_mailbox_and_address_are_gone_in_0_17&quot;&gt;Mailbox and address are gone in 0.17&lt;/h4&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 3. Changes to a typical view function&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;view : Model -&amp;gt; Html Msg           &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
view model =
    button
        [ onClick SomeMsg ]        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        [ text &quot;DoStuff&quot; ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =
    button
        [ onClick address SomeMsg ]
        [ text &quot;DoStuff&quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The address parameter is gone, you no longer need to concern yourself with the intricacies of mailboxes.
But you&amp;#8217;ll also notice that the return value type &lt;code&gt;Html&lt;/code&gt; takes a tag which in this case is our &lt;code&gt;Msg&lt;/code&gt; type. So if we have any event handlers
in our view code, we are telling it that those should result in a message of type &lt;code&gt;Msg&lt;/code&gt;. We&amp;#8217;ll come back to this in a bit more detail when we go through a nesting example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We no longer need to deal with an address for our event handler, we just tell Elm that when the user clicks the button, it should
trigger our update function with the given &lt;code&gt;Msg&lt;/code&gt; &lt;code&gt;SomeMsg&lt;/code&gt;. The Elm runtime will take care of routing the message to our update function without any address mumbojumbo !&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again making this change is largely a matter of search/replace. There are a few exceptions though.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 4. on &quot;input&quot; is now luckily onInput !&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;[ input
  [ class &quot;form-control&quot;
  , value model.name
  , onInput SetAlbumName
  ]
  []
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;[ input
  [ class &quot;form-control&quot;
  , value model.name
  , on &quot;input&quot;
        targetValue
        (\str -&amp;gt; Signal.message address (SetAlbumName str))
  ]
  []
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But let&amp;#8217;s say you actually do need a custom decoder it would still be simpler than in 0.16&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;import Json.Decode as Json

-- ...

[ input
  [ class &quot;form-control&quot;
  , value model.name
  , on &quot;input&quot; (Json.map SetArtistName targetValue) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  ]
  []
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here we just map over the targetValue, and call SetArtistName with the value. &lt;code&gt;targetValue&lt;/code&gt; is a Json decoder which picks out the value from our input field when the event is triggered&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_routes_and_route_parsing_ehh_urls_if_you_like&quot;&gt;Routes and Route parsing (ehh&amp;#8230;&amp;#8203; URLs if you like)&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 5. Route definitions&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Route
    = Home
    | ArtistListingPage
    | ArtistDetailPage Int
    | NewArtistPage
    | AlbumDetailPage Int
    | NewArtistAlbumPage Int&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Route
  = Home
  | ArtistListingPage
  | ArtistDetailPage Int
  | NewArtistPage
  | AlbumDetailPage Int
  | NewAlbumPage               &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  | NewArtistAlbumPage Int
  | EmptyRoute                 &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We never used this page, we always navigate through artist, so no point in keeping it until we need it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;EmptyRoute was used for handling route parser failures, we&amp;#8217;ll deal with that in another manner.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 6. Route parsing&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17 (url-parser)&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16 (elm-route-parser)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;routeParser : Parser (Route -&amp;gt; a) a
routeParser =
    oneOf
        [ format Home (s &quot;&quot;)
        , format NewArtistPage (s &quot;artists&quot; &amp;lt;/&amp;gt; s &quot;new&quot;)
        , format NewArtistAlbumPage
                 (s &quot;artists&quot; &amp;lt;/&amp;gt; int &amp;lt;/&amp;gt; s &quot;albums&quot; &amp;lt;/&amp;gt; s &quot;new&quot;)
        , format ArtistDetailPage (s &quot;artists&quot; &amp;lt;/&amp;gt; int)
        , format ArtistListingPage (s &quot;artists&quot;)
        , format AlbumDetailPage (s &quot;albums&quot; &amp;lt;/&amp;gt; int)
        ]


decode : Location -&amp;gt; Result String Route
decode location =
    parse identity routeParser (String.dropLeft 1 location.pathname)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;routeParsers : List (Matcher Route)
routeParsers =
  [ static Home &quot;/&quot;
  , static ArtistListingPage &quot;/artists&quot;
  , static NewArtistPage &quot;/artists/new&quot;
  , dyn1 ArtistDetailPage &quot;/artists/&quot; int &quot;&quot;
  , dyn1 AlbumDetailPage &quot;/albums/&quot; int &quot;&quot;
  , static NewAlbumPage &quot;/albums/new&quot;
  , dyn1 NewArtistAlbumPage &quot;/artists/&quot; int &quot;/albums/new&quot;
  ]



decode : String -&amp;gt; Route
decode path =
  RouteParser.match routeParsers path
    |&amp;gt; Maybe.withDefault EmptyRoute&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The parsing syntax is slightly different, but the transition was fairly trivial in our case.
The observant reader will notice that we&amp;#8217;ve skipped over the case when there is not matching route.
We&amp;#8217;ll get back to that when we wire it all together. Also, we&amp;#8217;ll see later where our decode function comes into play when we wire up the app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
To learn more about the new url-parser and it&amp;#8217;s functions check out the &lt;a href=&quot;http://package.elm-lang.org/packages/evancz/url-parser/latest&quot;&gt;package docs&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Encoding&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;encode : Route -&amp;gt; String
encode route =
    case route of
        Home -&amp;gt;
            &quot;/&quot;

        ArtistListingPage -&amp;gt;
            &quot;/artists&quot;

        NewArtistPage -&amp;gt;
            &quot;/artists/new&quot;

        ArtistDetailPage i -&amp;gt;
            &quot;/artists/&quot; ++ toString i

        AlbumDetailPage i -&amp;gt;
            &quot;/albums/&quot; ++ toString i

        NewArtistAlbumPage i -&amp;gt;
            &quot;/artists/&quot; ++ (toString i) ++ &quot;/albums/new&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Encoding routes is pretty much exactly the same as before.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 7. Handy helpers&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17 (url-parser)&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16 (elm-route-parser)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;navigate : Route -&amp;gt; Cmd msg                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
navigate route =
    Navigation.newUrl (encode route)


linkTo : Route -&amp;gt; List (Attribute msg) -&amp;gt; List (Html msg) -&amp;gt; Html msg
linkTo route attrs content =                    &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    a ((linkAttrs route) ++ attrs) content


linkAttrs : Route -&amp;gt; List (Attribute msg)
linkAttrs route =
    let
        path =
            encode route
    in
        [ href path
        , attribute &quot;data-navigate&quot; path       &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        ]


catchNavigationClicks : (String -&amp;gt; msg) -&amp;gt; Attribute msg
catchNavigationClicks tagger =                 &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    onWithOptions &quot;click&quot;
        { stopPropagation = True
        , preventDefault = True
        }
        (Json.map tagger (Json.at [ &quot;target&quot; ] pathDecoder))


pathDecoder : Json.Decoder String              &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
pathDecoder =
    Json.oneOf
        [ Json.at [ &quot;data-navigate&quot; ] Json.string
        , Json.at [ &quot;parentElement&quot; ] (lazy (\_ -&amp;gt; pathDecoder))
        , Json.fail &quot;no path found for click&quot;
        ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A couple of places in the Album app we wish to be able to navigate to a new page as a result of some logic
in the update function of some component. We might actually be better off inlining this to be honest.
in the relevant update functions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is a handy convenience function for creating a link to one of our defined routes (aka pages in our App).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In addition to the href attribute we define a &lt;code&gt;data-navigate&lt;/code&gt; attribute which we can use for a catch all handler we&amp;#8217;ll come to in a second.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This function allows us to catch all link clicks for a given element and all its child elements.
It prevents the browser from making the url request and rather allows us to provide a custom tagger function that receives the Url in question and can create a message as a result.
It will make more sense to you when you see how it&amp;#8217;s used in our Main module later on.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A Json parser which will recursivly walk up the element tree for the node receiving the event and try to find an element with the &lt;code&gt;data-navigage&lt;/code&gt; attribute defined.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;redirect : Route -&amp;gt; Effects ()
redirect route =
  encode route
    |&amp;gt; Signal.send TransitRouter.pushPathAddress
    |&amp;gt; Effects.task


clickAttr : Route -&amp;gt; Attribute
clickAttr route =
  on &quot;click&quot; Json.value (\_ -&amp;gt;  Signal.message TransitRouter.pushPathAddress &amp;lt;| encode route)


linkAttrs : Route -&amp;gt; List Attribute
linkAttrs route =
  let
    path = encode route
  in
    [ href path
    , onWithOptions
        &quot;click&quot;
        { stopPropagation = True, preventDefault = True }
        Json.value
        (\_ -&amp;gt;  Signal.message TransitRouter.pushPathAddress path)
    ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I borrowed most of this code from &lt;a href=&quot;https://github.com/etaque/tacks&quot;&gt;The tacks application from @etaque&lt;/a&gt;. Kudos to @etaque for coming up with this !
You might be wondering why we need &lt;code&gt;catchNavigationClicks&lt;/code&gt; at all ? Well if you click on a href, the browser will (to my knowledge) change the window location
and trigger a server request which causes the page to reload. In an SPA we typically don&amp;#8217;t want that to happen.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Please be advised that these helpers do make a compromise in terms of type safety. Note in particular the use of &lt;code&gt;msg&lt;/code&gt; (basically anything) rather than a component specific &lt;code&gt;Msg&lt;/code&gt; type.
I&amp;#8217;m sure in due time, more type safe patterns will emerge.  An obvious alternative to this approach is to
have a custom message in each update function that handles navigation. I&amp;#8217;m going to try that out in the near future and see how it plays out.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_sample_usage&quot;&gt;Sample usage&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s have a quick look at a few examples on how we are using the &lt;code&gt;navigate&lt;/code&gt; and &lt;code&gt;linkTo&lt;/code&gt; helper functions
in the Albums app. How it all fits together will hopefully be apparent when we describe how we wire everything together in our &lt;code&gt;Main&lt;/code&gt; module a little later on&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 8. artistRow function in frontend/src/ArtistDetails.elm&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;artistRow : Artist -&amp;gt; Html Msg
artistRow artist =
    tr []
        [ td [] [ text artist.name ]
        , td []
            [ Routes.linkTo (Routes.ArtistDetailPage artist.id) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                [ class &quot;btn btn-sm btn-default&quot; ]
                [ text &quot;Edit&quot; ]
            ]
        , td []
            [ button
                [ class &quot;btn btn-sm btn-danger&quot;
                , onClick &amp;lt;| DeleteArtist (.id artist)          &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                ]
                [ text &quot;Delete!&quot; ]
            ]
        ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here we are creating a normal link using the helper function described earlier. The result of clicking it should just be navigation, so sending a message to the ArtistListing &lt;code&gt;update&lt;/code&gt; function which then creates the navigation effect feels like it might be to much work/boilerplate.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here the primary thing we want to handle is not navigation, the primary concern is handling deletion so we follow the normal pattern of returning a Msg which will be routed to our update function for handling.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;artistRow : Signal.Address Action -&amp;gt; Artist -&amp;gt; Html
artistRow address artist =
  tr
    []
    [ td [] [ text artist.name ]
    , td
        []
        [ button
            [ class &quot;btn btn-sm btn-default&quot;
            , Routes.clickAttr
                &amp;lt;| Routes.ArtistDetailPage artist.id
            ]
            [ text &quot;Edit&quot; ]
        ]
    , td
        []
        [ button
            [ class &quot;btn btn-sm btn-danger&quot;
            , onClick address (DeleteArtist (.id artist))
            ]
            [ text &quot;Delete!&quot; ]
        ]
    ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 9. update function in frontend/src/ArtistDetail.elm&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;-- ...

HandleSaved artist -&amp;gt;
    ( { model
        | id = Just artist.id
        , name = artist.name
      }
      , Routes.navigate Routes.ArtistListingPage &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    )
-- ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Upon successfully saving an artist to our backend service, we create a Cmd (aka request for an effect to be performed), using our util function, to route the user to the
ArtistListingPage.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;HandleSaved maybeArtist -&amp;gt;
  case maybeArtist of
    Just artist -&amp;gt;
      ( { model
          | id = Just artist.id
          , name = artist.name
        }
      , Effects.map (\_ -&amp;gt; NoOp)
                    (Routes.redirect Routes.ArtistListingPage)
      )

    Nothing -&amp;gt;
      Debug.crash &quot;Save failed... we&apos;re not handling it...&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_dealing_with_http&quot;&gt;Dealing with Http&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So in our Album app we separated all HTTP requests to a separate module we called &lt;code&gt;ServerApi&lt;/code&gt;.
The changes from 0.16 to 0.17 isn&amp;#8217;t massive, but since we&amp;#8217;re at it we might as well make some small improvements
to be better prepared for error handling in future episodes.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;getArtist :
  Int
  -&amp;gt; (Http.Error -&amp;gt; msg)
  -&amp;gt; (Artist -&amp;gt; msg)
  -&amp;gt; Cmd msg
getArtist id errorMsg msg =
    Http.get artistDecoder
            (baseUrl ++ &quot;/artists/&quot; ++ toString id)
        |&amp;gt; Task.perform errorMsg msg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;getArtist : Int -&amp;gt; (Maybe Artist -&amp;gt; a) -&amp;gt; Effects.Effects a
getArtist id action =
  Http.get artistDecoder (baseUrl ++ &quot;/artists/&quot; ++ toString id)
    |&amp;gt; Task.toMaybe
    |&amp;gt; Task.map action
    |&amp;gt; Effects.task&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The http methods haven&amp;#8217;t really changed, but the manner in which we request the runtime to perform them have changed.
We no longer have the Effects package, so we need to use &lt;code&gt;Task.perform&lt;/code&gt; to do it now. Our 0.16 implementation used
Maybe to signal success or failure, in 0.17 we have opted to give a different message for success or failure.
So if &lt;code&gt;getArtist&lt;/code&gt; fails the error result of or http action will be passed to our update function wrapped in the provided Msg given by our &lt;code&gt;errorMsg&lt;/code&gt; param,
if it succeeds the response will be json decoded and passed to our update function wrapped in the provided Msg given by our &lt;code&gt;msg&lt;/code&gt; param.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Separating out all our http requests in one module gives flexibility in usage from multiple modules, but comes with a price of reduced type safety though.
&lt;strong&gt;You&lt;/strong&gt; might (depending on context of course) want to localize http stuff with your components to make them more self-contained.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_usage_comparison&quot;&gt;Usage Comparison&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/src/AlbumDetail.elm 0.16&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;update : Action -&amp;gt; Model -&amp;gt; ( Model, Effects Action )
update action model =
  case action of
    NoOp -&amp;gt;
      ( model, Effects.none )

    GetAlbum id -&amp;gt;
      ( model
      , Effects.batch
          [ getAlbum id ShowAlbum
          , getArtists HandleArtistsRetrieved
          ]
      )

    ShowAlbum maybeAlbum -&amp;gt;
      case maybeAlbum of
        Just album -&amp;gt;
          ( createAlbumModel model album, Effects.none )

        Nothing -&amp;gt; -- TODO: This could be an error if returned from api !
          ( maybeAddPristine model, getArtists HandleArtistsRetrieved )

    HandleArtistsRetrieved xs -&amp;gt;
      ( { model | artists = (Maybe.withDefault [] xs) }
      , Effects.none
      )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our use of Maybe to signal failure in our 0.16 implementation clearly muddles what&amp;#8217;s going on in terms of potential failures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/src/AlbumDetail.elm 0.17&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;mountAlbumCmd : Int -&amp;gt; Cmd Msg                                    &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
mountAlbumCmd id =
    Cmd.batch
        [ getAlbum id FetchAlbumFailed ShowAlbum
        , getArtists FetchArtistsFailed HandleArtistsRetrieved
        ]


mountNewAlbumCmd : Cmd Msg                                        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
mountNewAlbumCmd =
    getArtists FetchArtistsFailed HandleArtistsRetrieved


update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        -- TODO: show error
        FetchAlbumFailed err -&amp;gt;                                   &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
            ( model, Cmd.none )

        ShowAlbum album -&amp;gt;                                        &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            ( createAlbumModel model album, Cmd.none )

        HandleArtistsRetrieved artists&apos; -&amp;gt;
            ( { model | artists = artists&apos; }
            , Cmd.none
            )

        -- TODO: show error
        FetchArtistsFailed err -&amp;gt;
            ( model, Cmd.none )

        -- rest left out for brevity&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This command has been separated out as an exposed function for the module. The reason is that we need to perform this
when we navigate to a `/albums/&amp;lt;id&amp;gt;. I.e when that particular url is mounted. You&amp;#8217;ll see how when we cover the Main module.
We are actually running two http requests here.. hopefully/presumably in the order they are listed :-)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Similar to the above, but this is for handling when the user navigates to the url for creating a &lt;em&gt;new&lt;/em&gt; album&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;if getAlbum should fail this is where we should handle that (And we will eventually in a future episode)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If getAlbum succeeds we set the model up for displaying the retrieved artist&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_nesting_components&quot;&gt;Nesting Components&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The way you handle nesting of components in 0.17 has changed (for the better) with the removal of Mailboxes.
If you didn&amp;#8217;t do to much fancy stuff with addresses the transition to 0.17 should be quite straight forward.
We&amp;#8217;ll illustrate by showing a simple/common transition and then we will show how you might handle a more complex
nesting scenario (based on actual examples from the Albums App)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_the_common_scenario&quot;&gt;The common scenario&lt;/h4&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 10. update function in frontend/src/Main.elm&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        HomeMsg m -&amp;gt;
            let
                ( subMdl, subCmd ) =
                    Home.update m model.homeModel
            in
                { model | homeModel = subMdl }
                    ! [ Cmd.map HomeMsg subCmd ]   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        -- ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;So rather than using &lt;code&gt;Effects.map&lt;/code&gt; to map the result action(s) of effects from a child component, we use &lt;code&gt;Cmd.map&lt;/code&gt; to map result msg(s) from a child component
to a Msg that is known to the parent module.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;update : Action -&amp;gt; Model -&amp;gt; ( Model, Effects Action )
update action model =
  case action of
    HomeAction homeAction -&amp;gt;
      let
        ( subMdl, effects ) =
          Home.update homeAction model.homeModel
      in
        ( { model | homeModel = subMdl }
        , Effects.map HomeAction effects
        )

    -- ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think you&amp;#8217;ll agree this change is pretty simple to deal with. Let&amp;#8217;s see how nesting of view functions
for components have changed&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 11. contentView function in frontend/src/Main.elm&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;contentView : Model -&amp;gt; Html Msg
contentView model =
    case model.route of                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        Home -&amp;gt;
            App.map HomeMsg                         &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                    &amp;lt;| Home.view model.homeModel

        -- ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;As we did in 0.16 we keep track of the current route in our model.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;App.map is shorthand for Html.App.map. So we need to map between the &lt;code&gt;Msg&lt;/code&gt; type returned from the view function in the Home module
to a &lt;code&gt;Msg&lt;/code&gt; type that is known to our Main module. In this instance it&amp;#8217;s &lt;code&gt;HomeMsg&lt;/code&gt;. We need to do this mapping so that when the msg is passed
pack into our root update function we know which msg we should forward to which subcomponent.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;contentView : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
contentView address model =
  case (TransitRouter.getRoute model) of
    Home -&amp;gt;
      Home.view (Signal.forwardTo address HomeAction)  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                model.homeModel&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Signal.forwardTo essentially achieved the same effect, but it&amp;#8217;s way less intuitive to grasp. It&amp;#8217;s unlikely you&amp;#8217;ll miss it much !&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This change isn&amp;#8217;t quite search/replace (well with regex perhaps), but it&amp;#8217;s quite trivial too.
Ok let&amp;#8217;s move onto something a bit more complex.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_a_more_complex_scenario_album_and_tracks&quot;&gt;A more complex scenario - Album and tracks&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you wish to see the Album and Tracks solution in action, you can check it out here:&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/RU0NB2xaQIg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 12. update function in frontend/src/TrackRow.elm&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Msg
    = SetTrackName String
    | SetMinutes String
    | SetSeconds String
    | Dispatch DispatchMsg                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;


type DispatchMsg                                       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    = MoveUp
    | MoveDown
    | Remove


update : Msg -&amp;gt; Model -&amp;gt; ( Model, Maybe DispatchMsg )  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
update msg model =
    case msg of
        SetTrackName v -&amp;gt;
            ( { model | name = v, status = Modified }
            , Nothing                                  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            )

        SetMinutes str -&amp;gt;
            -- ...

        SetSeconds str -&amp;gt;
            -- ...

        Dispatch dispatchMsg -&amp;gt;                        &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
            ( model, Just dispatchMsg )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We add a new Msg tag called &lt;code&gt;Dispatch&lt;/code&gt; which has a payload of type &lt;code&gt;DispatchMsg&lt;/code&gt; to model
messages we would like to notify the parent of this component to handle.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;DispatchMsg becomes part of the public Api for our component so we need to expose it from our module.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The way we notify the parent in this solution is to add a return value, so now we return a tuple of Model and Maybe a DispatchMsg the parent
should respond to.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For the component internal messages there is nothing extra the parent should respond to, so we simply return &lt;code&gt;Nothing&lt;/code&gt; as a DispatchMsg.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For all dispatch messages we return the concrete dispatch message tag that we want the parent to handle.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Action
  = SetTrackName String
  | SetMinutes String
  | SetSeconds String


update : Action -&amp;gt; Model -&amp;gt; Model
update action model =
  case action of
    SetTrackName v -&amp;gt;
      { model | name = v, status = Modified }

    SetMinutes str -&amp;gt;
      -- ..


    SetSeconds str -&amp;gt;
      -- ..&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is no magic involved here, we are just returning an additional piece of info in the return value of
our update function.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 13. view function in frontend/src/TrackRow.elm&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;view : Model -&amp;gt; Html Msg
view model =
    tr []
        [ td [] [ statusView model ]
        , td [] [ moveView model ]
        , td [] [ nameView model ]
        , td [] [ durationView model ]
        , td [] [ removeView model ]
        ]

removeView : Model -&amp;gt; Html Msg
removeView model =
    button
        [ onClick (Dispatch Remove)           &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        , class
            &amp;lt;| &quot;btn btn-sm btn-danger &quot;
            ++ if isPristine model then
                &quot;disabled&quot;
               else
                &quot;&quot;
        ]
        [ text &quot;Remove&quot; ]

-- ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When the user clicks the remove button, we simply return a Msg with the tag &lt;code&gt;Dispatch&lt;/code&gt; carrying a &lt;code&gt;DispatchMsg&lt;/code&gt; with the tag &lt;code&gt;Remove&lt;/code&gt;
This msg will be routed through the top-level update function, through the update function in &lt;code&gt;AlbumDetailPage&lt;/code&gt; and finally to the update function in &lt;code&gt;TrackRow&lt;/code&gt;.
There it will be handled by the &lt;code&gt;Dispatch dispatchMsg &amp;#8594;&lt;/code&gt; case and simply returned to the parent (&lt;code&gt;AlbumDetailPage&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Context =                          &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { actions : Signal.Address Action
  , remove : Signal.Address ()
  , moveUp : Signal.Address ()
  , moveDown : Signal.Address ()
  }


view : Context -&amp;gt; Model -&amp;gt; Html
view context model =
  tr
    []
    [ td [] [ statusView model ]
    , td [] [ moveView context model ]
    , td [] [ nameView context model ]
    , td [] [ durationView context model ]
    , td [] [ removeView context model ]
    ]


removeView : Context -&amp;gt; Model -&amp;gt; Html
removeView context model =
  button
    [ onClick context.remove ()             &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    , class &amp;lt;| &quot;btn btn-sm btn-danger &quot;
            ++ if isPristine model then
                  &quot;disabled&quot;
               else &quot;&quot;
    ]
    [ text &quot;Remove&quot; ]

-- ..&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In our 0.16 implementation we used this funny type and made it part of the public Api
as an extra param to the view function.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This looks super-weird to someone who doesn&amp;#8217;t intuitively know that &lt;code&gt;()&lt;/code&gt; is &lt;code&gt;Unit&lt;/code&gt;.
 &lt;code&gt;onClick&lt;/code&gt; takes 2 parameters an address and an Action. In this case context.remove is the first param and &lt;code&gt;()&lt;/code&gt; is the second !
There is little point in explaining further, let&amp;#8217;s just agreed that this isn&amp;#8217;t very intuitive ?&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;0.16 implementation of update function in frontend/src/AlbumDetail.elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;update : Action -&amp;gt; Model -&amp;gt; ( Model, Effects Action )
update action model =
  case action of
    -- ...

    RemoveTrack id -&amp;gt;
      ( { model \| tracks = List.filter (\( rowId, _ ) -&amp;gt; rowId /= id) model.tracks }
      , Effects.none
      )

    MoveTrackUp id -&amp;gt;
      -- ...
    MoveTrackDown id -&amp;gt;
      -- ...

    ModifyTrack id trackRowAction -&amp;gt;
      let
        updateTrack ( trackId, trackModel ) =
          if trackId == id then
            ( trackId, TrackRow.update trackRowAction trackModel )
          else
            ( trackId, trackModel )
      in
        ( maybeAddPristine { model | tracks = List.map updateTrack model.tracks }
        , Effects.none
        )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;0.17 implementation of update function in frontend/src/AlbumDetail.elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        -- ...

        RemoveTrack id -&amp;gt;                                      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
            ( { model \| tracks = List.filter (\( rowId, _ ) -&amp;gt; rowId /= id) model.tracks
              }
            , Cmd.none
            )

        MoveTrackUp id -&amp;gt;
            -- ...

        MoveTrackDown id -&amp;gt;
            -- ...

        ModifyTrack id trackRowMsg -&amp;gt;
            case (modifyTrack id trackRowMsg model) of        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                Just ( updModel, Nothing ) -&amp;gt;                 &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                    ( model, Cmd.none )

                Just ( updModel, Just dispatchMsg ) -&amp;gt;        &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                    handleDispatch id dispatchMsg updModel

                _ -&amp;gt;
                    ( model, Cmd.none )                       &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;


modifyTrack : TrackRowId -&amp;gt; TrackRow.Msg -&amp;gt; Model -&amp;gt; Maybe ( Model, Maybe TrackRow.DispatchMsg )
modifyTrack id msg model =                                    &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
    ListX.find (\( trackId, _ ) -&amp;gt; id == trackId) model.tracks
        \|&amp;gt; Maybe.map (\( _, trackModel ) -&amp;gt; TrackRow.update msg trackModel)
        \|&amp;gt; Maybe.map
            (\( updTrack, dispatchMsg ) -&amp;gt;
                ( maybeAddPristine
                    { model
                        \| tracks =
                            ListX.replaceIf (\( i, _ ) -&amp;gt; i == id)
                                ( id, updTrack )
                                model.tracks
                    }
                , dispatchMsg
                )
            )


handleDispatch : TrackRowId -&amp;gt; TrackRow.DispatchMsg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
handleDispatch id msg model =                                &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
    case msg of
        TrackRow.MoveDown -&amp;gt;
            update (MoveTrackDown id) model

        TrackRow.MoveUp -&amp;gt;
            update (MoveTrackUp id) model

        TrackRow.Remove -&amp;gt;
            update (RemoveTrack id) model&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The parent, ie AlbumDetail, logic for deleting on of it&amp;#8217;s track rows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We delegate updating the track row and consequently the AlbumDetail model to a helper function.
We pattern match on the result from that function.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If it was a &quot;normal&quot; update with no dispatch message returned we simply return the updated model and a no op Cmd.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the update of the track row got a dispatch message in return from TrackRow.update we delegate the handling of the
dispatch message to another helper function.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Since we are dealing with Maybe values we have to handle this case, but it really shouldn&amp;#8217;t ever happen ! (Famous last words).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This might look a bit scary, but in summary it; locates the correct track row, performs the update of that row by delegating to TrackRow update,
updates the track row in the model with the updated track row and finally returns a tuple of the updated model and the dispatch message (which is Maybe you remember).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here we simply pattern match on the dispatch message and invokes the update function with the appropriate corresponding &lt;code&gt;Msg&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The pattern we used here is just one of many possible ways of solving this problem. Maybe someday a common preferred pattern will emerge,
but the bottom line is that it will most likely be some variation of return values from update functions and/or input params to the view function in the parent/child communucation.
The days of &quot;magic&quot; juggling with mailboxes are gone. Simple input/output FTW !
Oh, and finally, for this particular case I think there might be a good case for arguing that perhaps remove/moveup/movedown doesn&amp;#8217;t really belong in &lt;code&gt;TrackRow&lt;/code&gt; at all, it might
actually make more sence to use a decorator-kind of approach instead.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Some flavors of using &quot;global&quot; or dummy effects (using say dummy tasks) for communicating between components have briefly surfaced. Pls think really carefully
before adopting such an approach. Have a chat with the nice and very knowledgable people in the community to discuss
if there isn&amp;#8217;t a better solution for your problem !
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_wiring_it_all_together_in_frontend_src_main_elm&quot;&gt;Wiring it all together in frontend/src/Main.elm&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 14. main&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;main : Program Never
main =
    Navigation.program                       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      (Navigation.makeParser Routes.decode)
        { init = init
        , view = view
        , update = update
        , urlUpdate = urlUpdate              &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        , subscriptions = \_ -&amp;gt; Sub.none     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Rather that start-app we are using the program function from Navigation. The first
param is a function to creates a parser- So bootstrap it with our Routes.decode function.
The second param is a config record similar to the one in start-app but not quite.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Hey what&amp;#8217;s this fellow, it seems we need to provide a function to handle URL updates in our application !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We don&amp;#8217;t have any subscriptions in our app, so we can just return Sub.none for that function.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;app : StartApp.App Model
app =
  StartApp.start
    { init = init initialPath
    , update = update
    , view = view
    , inputs = [ actions ]                  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    }


main : Signal Html
main =
  app.html


port tasks : Signal (Task.Task Never ())   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
port tasks =
  app.tasks

port initialPath : String                  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Inputs was sort of like subscriptions. We needed that in our 0.16 because of elm-transit-router which used elm-history which again provided a signal for url changes.
All of that is gone and handled by navigation, but slightly differently.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Just a thing you had to define if you had effects in your App in 0.16. We&amp;#8217;re happy it&amp;#8217;s gone !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We had to provide the initialPath (url) through a port in 0.16.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 15. Model and init stuff&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Model =
    { route : Routes.Route
    , homeModel : Home.Model
    , artistListingModel : ArtistListing.Model
    , artistDetailModel : ArtistDetail.Model
    , albumDetailModel : AlbumDetail.Model
    }

initialModel : Model
initialModel =
    { route = Home
    , homeModel = Home.init
    , artistListingModel = ArtistListing.init
    , artistDetailModel = ArtistDetail.init
    , albumDetailModel = AlbumDetail.init
    }


init : Result String Route -&amp;gt; ( Model, Cmd Msg )  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
init result =
    urlUpdate result initialModel&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;init&lt;/code&gt; is called for us by Navigation.program using our provided parser so
we get a result from the parsing of the initial url. We pass that on to the yet to be described
urlUpdate function along with our initial model.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Model =
  WithRoute
    Routes.Route
    { homeModel : Home.Model
    , artistListingModel : ArtistListing.Model
    , artistDetailModel : ArtistDetail.Model
    , albumDetailModel : AlbumDetail.Model
    }

initialModel : Model
initialModel =
  { transitRouter = TransitRouter.empty Routes.EmptyRoute
  , homeModel = Home.init
  , artistListingModel = ArtistListing.init
  , artistDetailModel = ArtistDetail.init
  , albumDetailModel = AlbumDetail.init
  }


init : String -&amp;gt; ( Model, Effects Action )
init path =
  let
    usePath = if path == &quot;/index.html&quot; then &quot;/&quot; else path
  in
    TransitRouter.init routerConfig usePath initialModel&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t think it&amp;#8217;s much point in describing the other slight differences, since they mostly pertain to
details about elm-transit-router.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_url_updates_mounting_routes&quot;&gt;Url updates / Mounting routes&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;mounting routes in 0.16&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;mountRoute : Route -&amp;gt; Route -&amp;gt; Model -&amp;gt; ( Model, Effects Action )
mountRoute prevRoute route model =
  case route of
    Home -&amp;gt;
      ( model, Effects.none )

    ArtistListingPage -&amp;gt;
      ( model, Effects.map ArtistListingAction (ServerApi.getArtists ArtistListing.HandleArtistsRetrieved) )

    ArtistDetailPage artistId -&amp;gt;
      ( model
      , Effects.map ArtistDetailAction (ServerApi.getArtist artistId ArtistDetail.ShowArtist) )

    NewArtistPage -&amp;gt;
      ( { model | artistDetailModel = ArtistDetail.init }, Effects.none )

    -- etc ..

    EmptyRoute -&amp;gt;                &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      ( model, Effects.none )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is how we handled route parse failures in our 0.16 implementation btw.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;urlUpdate in 0.17&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;urlUpdate : Result String Route -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
urlUpdate result model =
    case result of
        Err _ -&amp;gt;                                                            &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
            model ! [ Navigation.modifyUrl (Routes.encode model.route) ]

        Ok (ArtistListingPage as route) -&amp;gt;                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
            { model | route = route }
                ! [ Cmd.map ArtistListingMsg ArtistListing.mountCmd ]

        -- rest left out for brevity

        Ok ((NewArtistAlbumPage artistId) as route) -&amp;gt;                      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
            { model
                | route = route
                , albumDetailModel = AlbumDetail.initForArtist artistId
            }
                ! [ Cmd.map AlbumDetailMsg AlbumDetail.mountNewAlbumCmd ]

        Ok route -&amp;gt;                                                         &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            { model | route = route } ! []&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If url parsing for a new url fails we just change the url back to url for the current route(/page)
It might be  appropriate to show an error of some sort error.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When the we change url to the artist listing page we wish to initiate the http request for retrieving
artists from our backend. That&amp;#8217;s where ArtistListing.mountCmd comes into the picture.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In addition to providing an effect, we need to ensure that the albumDetailModel starts with a clean slate
when the page for adding a new album is displayed. It might have been a good idea to separate this out to it&amp;#8217;s own component to avoid quite a bit of coniditional logic.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For any other url changes we just update the route field in our model.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;What&amp;#8217;s up with the &lt;code&gt;! []&lt;/code&gt; thing ?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;!&lt;/code&gt; is a shorthand infix function with the following signature &lt;code&gt;(!) : model &amp;#8594; List (Cmd msg) &amp;#8594; (model, Cmd msg)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;model ! [someCmd, someOtherCmd] == (model, Cmd.batch [someCmd, SomeOtherCmd])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_just_a_little_more_on_the_main_update_function_related_to_navigation&quot;&gt;Just a little more on the main update function, related to navigation&lt;/h4&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of

        -- other actions left out

        Navigate url -&amp;gt;
            model ! [ Navigation.newUrl url ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The navigate message triggers a call to the Navigation.newUrl function. That will step to a new url
and update the browser history. You&amp;#8217;ll see in the next chapter were we trigger this message.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;update : Action -&amp;gt; Model -&amp;gt; ( Model, Effects Action )
update action model =
  case action of

    -- other actions left out

    RouterAction routeAction -&amp;gt;
      TransitRouter.update routerConfig routeAction model&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a elm-transit-router specific handler that takes care of starting and stopping animation transitions
+ updating the route field of our model.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_view&quot;&gt;View&lt;/h4&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.17&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;0.16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;view : Model -&amp;gt; Html Msg
view model =
    div
        [ class &quot;container-fluid&quot;
        , Routes.catchNavigationClicks Navigate  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        ]
        [ menu model
        , div [ class &quot;content&quot; ]
            [ contentView model ]                &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here our catch all navigation related clicks helper function comes into play. So for any navigation related clicks, we return a &lt;code&gt;Navigate&lt;/code&gt; msg with a payload of the url to navigate to.
This is will be handled in our top level update function as outlined in the previous chapter.
I&amp;#8217;m not sold on it being a good solution, but it works !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;we have already shown how the &lt;code&gt;contentView&lt;/code&gt; function pattern matches on the route field of our model to render the appropriate page view.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =
  div
    [ class &quot;container-fluid&quot; ]
    [ menu address model
    , div
        [ class &quot;content&quot;
        , style (TransitStyle.fadeSlideLeft     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                  100
                  (getTransition model))
        ]
        [ contentView address model ]
    ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is particulars related to animations performed when making page transtions from the elm-transit-* packages.
That part got lost in our upgrade adventure, but should be possible to plug back in in the future should we want to.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the changes went really smoothly and quickly. I did have to spend a little bit of time to get familiar with the new navigation and url-parser package, but they are pretty intuitive.
I wouldn&amp;#8217;t be lying if I said I spent much more time on writing this blog post than doing the upgrade.
I also did quite a few changes to the implementation of details I haven&amp;#8217;t shown you, just because I&amp;#8217;ve become more confident with Elm than I was when writing the previous episodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was quite a bit of changes in terms of LOC&amp;#8217;s and I have to be honest and tell you it&amp;#8217;t didn&amp;#8217;t work once everything compiled. But you can hardly blame Elm for that,
it was all my bad. I hadn&amp;#8217;t tested the route parsing properly and ended up implementing a loop. Kind of like a redirect loop, but all in js and out of reach for the browser.
Firing up the inline repl in Light Table and interactively testing the parser quickly showed me the errors of my ways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All in all I have to say the upgrade was a really fun and enjoyable ride. I can definately say that
0.17 made the App turn out much nicer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;What&amp;#8217;s next ?&lt;/div&gt;
&lt;p&gt;Hard to say for sure, but my current thinking is to start looking at auth using JWT web tokens.
Time will tell if that&amp;#8217;s what it&amp;#8217;ll be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_appendix&quot;&gt;Appendix&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately the 0.17 release left elm-reactor a bit behind in terms of what it supports.
From my past experience with ClojureScript, I have gotten used to the feeback  loop you get by using the wonderful &lt;a href=&quot;https://github.com/bhauman/lein-figwheel&quot;&gt;figwheel&lt;/a&gt;.
elm-reactor unfortunately doesn&amp;#8217;t come close to that currently, so I had to turn to JS land for alternatives. After some evalutation and trials I ended up using
&lt;a href=&quot;https://github.com/fluxxu/elm-hot-loader&quot;&gt;elm-hot-loader&lt;/a&gt;. It has worked out really nicely even though I ended up pulling down a fair chunk of the npm package repo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m sure elm-reactor will be back with a vengeance in the not so distant future, packing some really cool and unique features.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Elm Maybe - Dealing with null/Nothing</title>
        <link>http://rundis.github.io/blog/2016/elm_maybe.html</link>
        <pubDate>Thu, 7 Apr 2016 00:00:00 +0200</pubDate>
        <guid isPermaLink="false">2016/elm_maybe.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have worked with JavaScript (or quite a few other languages that embrace null) I bet you have had one or two errors that can be
traced back to an unexpected null reference. Some of them are obvious, but others are really tricky to
track down. I&amp;#8217;m sure most of you are well aware that quite a few other languages banishes null and introduces a Maybe or Option type to handle nothingness.
Elm is one of those languages. Before I started looking at Elm I hadn&amp;#8217;t really worked with Maybe types. In this blogpost
I thought I&amp;#8217;d share a little more insight on how to work with them in Elm. I&amp;#8217;ll also briefly cover how they might be (or not) used in JavaScript for reference.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_elm_maybe&quot;&gt;Elm Maybe&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Elm is a statically typed language which compiles down to JavaScript. Types is a core ingredient of Elm, that&amp;#8217;s not the case with JavaScript obviously.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Maybe a = Just a | Nothing&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Maybe type in Elm looks deceivingly simple. And actually it is.
The type is parameterized and the &lt;code&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/code&gt; is a placeholder for a concrete type in your program.
So &lt;code&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/code&gt; here means any type (Int, String, Float etc). A Maybe can have one of two values; either &lt;code&gt;Just&lt;/code&gt; some value of type &lt;code&gt;a&lt;/code&gt; or it is &lt;code&gt;Nothing&lt;/code&gt;.
Where does &lt;code&gt;Just&lt;/code&gt; and &lt;code&gt;Nothing&lt;/code&gt; come from ? Are they defined somewhere else ? They are part of the type definition, think of them as tags. The name of these &quot;tags&quot;
must start with an upper case letter in Elm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;x = Just 0.0 -- Just 0.0 : Maybe.Maybe Float   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

y = Nothing  -- Nothing : Maybe.Maybe a        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The variable x Maybe with the tag Just and the Float value 0.0 (Maybe lives in a namespace or rather module in Elm called Maybe, that&amp;#8217;s why the actual type definitions states &lt;strong&gt;Maybe.&lt;/strong&gt;Maybe)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The variable y becomes a Maybe with the tag Nothing. Nothing has no value, and hence no value type associated. Nothing is Nothing, but it&amp;#8217;s still a Maybe though :-)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_quick_detour_type_annotations&quot;&gt;Quick detour - Type annotations&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Elm is a statically typed language, everything is represented through types. So before
we carry on I&amp;#8217;d like to briefly cover the concept of type annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since JavaScript doesn&amp;#8217;t have types, I&amp;#8217;ll use Java as a comparable example&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Sample Java functions&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public int increment(int value) {
  return value++;
}

public int add (int x, int y) {
  return x + y;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Type annotated equivalents in Elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;increment : Int -&amp;gt; Int         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
increment value =
  value + 1


add : Int -&amp;gt; Int -&amp;gt; Int        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
add x y =
  x + y&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The type annotation for increment tells us it is a function which takes an argument of type &lt;code&gt;Int&lt;/code&gt; and returns an &lt;code&gt;Int&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;add takes two arguments of type Int and returns a an &lt;code&gt;Int&lt;/code&gt;. So think of the last one as return type.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Type annotations in Elm are optional, because the compiler is able to infer the types statically.
Most people tend to use type annotations because they provide very useful documentation.
When working with Elm it&amp;#8217;s really something you quickly have to learn, because most documentation will use them
and the Elm compiler will most certainly expose you to them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_getting_the_actual_values_from_a_maybe&quot;&gt;Getting the actual values from a Maybe&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok so I have this maybe thing which can be a Just some value or Nothing. But how do I get
hold of the value so I can work with it ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Pattern matching&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;myList : List String                      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
myList = [&quot;First&quot;, &quot;Second&quot;]              &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;


-- List.head : List a -&amp;gt; Maybe.Maybe a    &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;


case List.head myList of                  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  Nothing -&amp;gt;                              &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    &quot;So you gave me an empty list!&quot;

  Just val -&amp;gt;                             &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
    val

-- returns &quot;First&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Type annotation for myList. It is a List of String. It&amp;#8217;s just a value, so that&amp;#8217;s why there is no arrows in the type annotation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We are using a list literal to define our list. Each list item must be separated by a comma. It&amp;#8217;s also worth noting, that every item in the list must be of the same type. You can&amp;#8217;t mix Strings with Ints etc. The Elm compiler will yell at you if you try&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;I&amp;#8217;ve added the type annotation for the List.head function. Given a List of values with type &lt;code&gt;a&lt;/code&gt; it will return a Maybe of type &lt;code&gt;a&lt;/code&gt;. &lt;code&gt;List.head&lt;/code&gt; returns the first item of a List. The reason it returns a Maybe is because the List might be empty.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;You can think of &lt;code&gt;case&lt;/code&gt; as a switch statement on stereoids. Since List.head return a Maybe we have to possible case&amp;#8217;s we need to handle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In this instance we can see from the code this case will never happen, we know myList contains items. The Elm compiler is really smart, but not that smart so it doesn&amp;#8217;t know the list is empty.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This case unwraps the value in our Just so that we can use it. We just return the value, which would be &quot;First&quot;.
The value is unwrapped using something called pattern matching. In JavaScript terms you might think of it as destructuring&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The Maybe module&lt;/div&gt;
&lt;p&gt;The Maybe type is defined in a module called &lt;code&gt;Maybe&lt;/code&gt;. In addition to the Maybe type it also includes a collection
of handy functions that makes it handy to work with Maybe types in various scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Some sample data setup&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;myList = [&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;]

first = List.head myList
second = List.head (List.drop 1 myList)
tail = List.tail myList -- Just [&quot;Second&quot;,&quot;Third&quot;] : Maybe (List String)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Handling defaults&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;-- Maybe.withDefault : a -&amp;gt; Maybe a -&amp;gt; a                                         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
Maybe.withDefault &quot;No val&quot; first -- -&amp;gt; &quot;First&quot;                                   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
Maybe.withDefault &quot;No val&quot; (List.head []) -- -&amp;gt; &quot;No val&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Maybe.withDefault&lt;/code&gt; takes a default value of type &lt;code&gt;a&lt;/code&gt; a Maybe of type &lt;code&gt;a&lt;/code&gt;. It returns the value of the maybe if it has a value (tagged &lt;code&gt;Just&lt;/code&gt;) otherwise it returns the provided default value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In the first example first is &lt;code&gt;Just &quot;First&quot;&lt;/code&gt; so it unwraps the value and returns that. In the second example there is no value so it returns the provided default&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Mapping&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;-- Maybe.map : (a -&amp;gt; b) -&amp;gt; Maybe a -&amp;gt; Maybe b                                    &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
Maybe.map String.toUpper first -- -&amp;gt; Just &quot;FIRST&quot;                                &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
Maybe.map String.toUpper Nothing -- -&amp;gt; Nothing


-- Maybe.map2 (a -&amp;gt; b -&amp;gt; c) -&amp;gt; Maybe a -&amp;gt; Maybe b -&amp;gt; Maybe c                     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
Maybe.map2 (\a b -&amp;gt; a ++ &quot;, &quot; b) first second -- -&amp;gt; Just &quot;First, Second&quot;         &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
Maybe.map2 (\a b -&amp;gt; a ++ &quot;, &quot; b) first Nothing -- -&amp;gt; Nothing
Maybe.map2 (++) first second -- -&amp;gt; Just &quot;First, Second&quot;                          &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Maybe.map&lt;/code&gt; takes a function which has the signature (a &amp;#8594; b), that means a function that takes any value of type a and return a value of type b (which can be the same type or a completely different type). The second argument is a Maybe (of type &lt;code&gt;a&lt;/code&gt;). The return value is a Maybe of type &lt;code&gt;b&lt;/code&gt;. So Maybe.map unwraps the second argument, applies the provided function and wraps the result of that in a Maybe which in turn is returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;String.toUpper takes a String (&lt;code&gt;a&lt;/code&gt; if you like) and returns a String (&lt;code&gt;b&lt;/code&gt; if you like). String.toUpper doesn&amp;#8217;t understand Maybe values, so to use it on a Maybe value we can use Maybe.map&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Maybe.map2&lt;/code&gt; is similar to &lt;code&gt;Maybe.map&lt;/code&gt; but the function in the first argument takes two in parameters. In addition to the function param we provide two Maybe values. These two doesn&amp;#8217;t need to be of the same type, but happens to be so in our example. There is also map3, map4 etc up to map8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If any or both of the two Maybe params are &lt;code&gt;Nothing&lt;/code&gt; the result will be Nothing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In the example above we used an anonymous function (lambda). However &lt;code&gt;++&lt;/code&gt; is actually a function that takes two arguments so we can use that as the function argument&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Piping&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;-- Maybe.andThen Maybe.Maybe a -&amp;gt; (a -&amp;gt; Maybe b) -&amp;gt; Maybe b                      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
Maybe.andThen tail List.head  -- -&amp;gt; Just &quot;Second&quot;                                &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
tail `Maybe.andThen` List.head -- -&amp;gt; Just &quot;Second&quot;                               &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

tail
  `Maybe.andThen` List.head
  `Maybe.andThen` (\s -&amp;gt; Just (String.toUpper s))   -- -&amp;gt; Just &quot;SECOND&quot;          &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;


Just []
  `Maybe.andThen` List.head
  `Maybe.andThen` (\s -&amp;gt; Just (String.toUpper s))   -- -&amp;gt; Nothing                &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Maybe.andThen&lt;/code&gt; resembles &lt;code&gt;Maybe.map&lt;/code&gt; but there are two vital differences. The function argument comes as the second param (we&amp;#8217;ll come back to why), secondly the function in the function argument must return a Maybe rather than a plain value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The first argument &lt;code&gt;tail&lt;/code&gt; is a Maybe, the second argument is List.head which is a function that takes a list as an argument and returns a Maybe, so that conforms to the function params signature required by Maybe.andThen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In this version we use the infix version of &lt;code&gt;andThen&lt;/code&gt; (marked by backticks before and after). This is the reason the function argument comes second, so you typically use &lt;code&gt;Maybe.andThen&lt;/code&gt; when you you need to work with maybes in a pipeline sort of fashion.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is an example of piping values when dealing with Maybe values. We start with the tail of our list and then we pick out the head of that list and then we convert the value of that to uppercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;You can almost think of &lt;code&gt;andThen&lt;/code&gt; as a callback. If any step of the chain returns Nothing, the chain is terminated and Nothing is returned&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Don&amp;#8217;t like the way Maybe sound, how about rolling your own ?&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Perhaps a = Absolutely a | NotSoMuch&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course interop with others will be an issue and &lt;code&gt;Maybe&lt;/code&gt; has some advantages being part of the core library. But still
if you really really want to&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_javascript_null_undefined&quot;&gt;JavaScript null/undefined&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;function headOfList(lst) {
 if (lst &amp;amp;&amp;amp; lst.length &amp;gt; 0) {
   return lst[0];
 } else {
   // hm... not sure. let&apos;s try null
   return null;
 }
}

function tailOfList(lst) {
 if (lst &amp;amp;&amp;amp; lst.length &amp;gt; 1) then
   return lst.slice(0);
 } else {
   // hm... not sure. let&apos;s try null
   return null;
 }
}



var myList = [&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;];
var first =  headOfList(myList);  // &quot;First&quot;
var second = headOfList(tailOfLIst(myList))   // &quot;Second&quot;
var tail = tailOfList(lst); // [&quot;First&quot;, &quot;Second&quot;]


first  // &quot;First&quot;

headOfList([]) // null                                                                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

first.toUpperCase() // &quot;FIRST&quot;
headOfList([]).toUpperCase() // Type Error: Cannot read property &apos;toUpperCase&apos; of null     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

first + &quot;, &quot; + second // &quot;First, Second&quot;
first + &quot;, &quot; + null // &quot;First, null&quot;                                                       &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;


headOfList(tail).toUpperCase() // &quot;SECOND&quot;
headOfList([]).toUpperCase() // Type Error: Cannot read property &apos;toUpperCase&apos; of null     &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;An empty list obviously doesn&amp;#8217;t have a first item.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If this was in a function you might guard against this. But what would you return ? Would you throw a exception ?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Doesn&amp;#8217;t look to cool, so you would have to make sure you guarded against this case. Let&amp;#8217;s hope you tested that code path, otherwise it&amp;#8217;s lurking there waiting to happen !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Same as 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Okay so most of this cases are pretty silly, we would have to come up with something more real life
with functions calling functions calling functions etc. The bottom line is that you have to deal with it,
but it&amp;#8217;s up to you all the time to make sure nulls or undefined doesn&amp;#8217;t sneak in. In most cases there are simple non verbose
solutions to deal with them, but it&amp;#8217;s also quite easy to miss handling them. If you do it can sometimes be quite a challenge tracking down
the root cause.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s undoubtably a little more ceremony in Elm, but in return you will not ever get nullpointer exceptions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introducing_maybe_in_javascript&quot;&gt;Introducing Maybe in JavaScript&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are from a JavaScript background the blogpost &lt;a href=&quot;https://curiosity-driven.org/monads-in-javascript&quot;&gt;Monads in JavaScript&lt;/a&gt; gives you a little hint on how you could implement Maybe in JavaScript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s borrow some code from there and see how some of the examples above might end up looking&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Defining Just and Nothing&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;function Just(value) {
    this.value = value;
}

Just.prototype.bind = function(transform) {
    return transform(this.value);
};

Just.prototype.map = function(transform) {
    return new Just(transform(this.value));
};


Just.prototype.toString = function() {
    return &apos;Just(&apos; +  this.value + &apos;)&apos;;
};

var Nothing = {
    bind: function() {
        return this;
    },
    map: function() {
      return this;
    },
    toString: function() {
        return &apos;Nothing&apos;;
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A few helper functions for dealing with JavaScript arrays&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;function listHead(lst) {
  return lst &amp;amp;&amp;amp; list.length &amp;gt; 0 ? new Just(lst[0]) : Nothing;
}

function listTail() {
  return lst &amp;amp;&amp;amp; list.length &amp;gt; 1 ? new Just(lst.slice[1]) : Nothing;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Elm examples in JavaScript with Maybe&amp;#8217;ish support&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var myList = [&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;];
var first =  listHead(myList);
var second = listTail(myList).bind(t =&amp;gt; listHead(t));
var tail =   listTail(myList);



// Similar to Maybe.map in Elm
first.map(a =&amp;gt; a.toUpperCase()) // Just {value: &quot;FIRST&quot;}                                        &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
Nothing.map(a =&amp;gt; a.toUpperCase()) // Nothing (object)                                           &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

// Similar to Maybe.map2 in Elm
first.bind(a =&amp;gt; second.map( b =&amp;gt; a + &quot;, &quot; + b))  // Just { value: &apos;First, Second&apos; }             &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
first.bind(a =&amp;gt; Nothing.map( b =&amp;gt; a + &quot;, &quot; + b)) // Nothing (object)

// Similar to Maybe.andThen in Elm
tail.bind(a =&amp;gt; listHead(a)).bind(b =&amp;gt; new Just(b.toUpperCase()))   // Just { value: &apos;SECOND&apos; }  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
new Just([]).bind(a =&amp;gt; listHead(a)).bind(b =&amp;gt; new Just(b.toUpperCase())) // Nothing (object)    &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;first&lt;/code&gt; is a Just object. Since it has a value the arrow function is run as expected&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When the value is Nothing (a Nothing object) toUpperCase is never run and the Nothing object is returned&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In the arrow function of bind for first we ignore the unwrapped value and call map on second with a new arrow function which now has both the unwrapped value of both a and b. We concatenate the values and the map function ensures the result is wrapped up in a Just object
If you remember the elm case for map2, that was a separate function. Here map is just a convenience to wrap up the innermost value in a Just.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tail&lt;/code&gt; is a Just object with the value [&quot;First&quot;, &quot;Second&quot;] in the first level arrow function we pick out the head which returns a &lt;code&gt;Just&lt;/code&gt; object with the value &quot;Second&quot;. In the innermost arrow level function we do upperCase on the value and wrap in it a Just which is the end result.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We are starting with Just with a value of an empty array. In the first level arrow function we try to pick out the head of the list. Since that will return a Nothing object, Nothing passes straight through the second level arrow function, never executing the toUpperCase call.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So as you can see it is possible to introduce the notion of Maybe in JavaScript. There are several libraries out there to choose from
I haven&amp;#8217;t really tried any of them. Regardless the issue you&amp;#8217;ll be facing is that the other libraries you are using probably won&amp;#8217;t be using your representation of Maybe if at all.
But hey, maybe it&amp;#8217;s better with something than nothing. Or whatever.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wrapping_up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is clearly a slight cost with explicitly handling nothingness everywhere. In Elm you basically don&amp;#8217;t even have a choice. The type system
and the compiler will force you into being explcit about cases when you don&amp;#8217;t have a value. You can achieve the same as with null but
you always have to handle them. In your entire program. The most obvious benefit you get, is that you simply will not get null reference related errors in Elm. When calling any function
that accepts Maybe values as input params or return Maybe values you will be made well aware of that. The compiler will let you know, but typically you would also see type annotations stating this fact too.
This explicitness is actually quite liberating once you get used to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In JavaScript you can try to be more explicit with nulls. You can even reduce the chances of null pointers ever happening by
introducing a Maybe/Option like concept. Of course &lt;strong&gt;you&lt;/strong&gt; wouldn&amp;#8217;t introduce the possibility of null pointers in your code. However there&amp;#8217;s a pretty big chance
some bozo,responsible for one of the 59 libs you somehow ended up with from npm, have though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are plenty of bigger challenges than null pointer exceptions out there, but if you could avoid them altogether,
surely that must a be of some benefit. I&amp;#8217;ll round off with the obligatory quote from Tony Hoare as you do when one pays tribute to our belowed null.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I call it my billion-dollar mistake. It was the invention of the null reference in 1965. At that time, I was designing the first comprehensive type system for references in an object oriented language (ALGOL W). My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn&amp;#8217;t resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Tony Hoare
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Elm package docs preview in Light Table</title>
        <link>http://rundis.github.io/blog/2016/elm_light_docs.html</link>
        <pubDate>Mon, 28 Mar 2016 00:00:00 +0200</pubDate>
        <guid isPermaLink="false">2016/elm_light_docs.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maybe you are a package author for Elm packages you wish to publish to &lt;a href=&quot;http://package.elm-lang.org/&quot; class=&quot;bare&quot;&gt;http://package.elm-lang.org/&lt;/a&gt;
. Or maybe you are thinking about authoring a package. Before you publish something to the package repo
you have to write documentation for your package. Wouldn&amp;#8217;t it be sweet if you could preview the
generated documentation from the comfort of your editor ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The good news is that with the latest (0.3.6) edition of the &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;elm-light&lt;/a&gt; plugin
you can !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_demo&quot;&gt;Demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/pAwdVM888wQ&quot;&gt;Link to demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pAwdVM888wQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Feature highlights&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Preview how the docs will look for each individual module&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The preview is updated whenever you save your (exposed) Elm module file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Layout pretty close to how it will look on &lt;a href=&quot;http://package.elm-lang.org/&quot; class=&quot;bare&quot;&gt;http://package.elm-lang.org/&lt;/a&gt; once published&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fast (at least on my machine !)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor detail, but the entire preview UI is also implemented in Elm (ultimate dogfooding). It&amp;#8217;s
basically a modified and simplified implementation of the package preview code for &lt;a href=&quot;http://package.elm-lang.org/&quot; class=&quot;bare&quot;&gt;http://package.elm-lang.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_resources&quot;&gt;Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://package.elm-lang.org/&quot; class=&quot;bare&quot;&gt;http://package.elm-lang.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/elm-lang/package.elm-lang.org&quot; class=&quot;bare&quot;&gt;https://github.com/elm-lang/package.elm-lang.org&lt;/a&gt; for most of the Elm ui code used&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out the plugin: &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;elm-light&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Elm and ClojureScript joining forces in the elm-light plugin</title>
        <link>http://rundis.github.io/blog/2016/elm_light_modules.html</link>
        <pubDate>Mon, 14 Mar 2016 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2016/elm_light_modules.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;elm-light&lt;/a&gt; plugin provides a pretty useful
featureset for developing elm applications. Until now all features have been implemented
using a combination of ClojureScript and JavaScript. But wouldn&amp;#8217;t it be cool if the plugin
implemented Elm features using Elm where that&amp;#8217;s feasible ? Elm compiles to JavaScript and
JavaScript interop in ClojureScript is quite easy so it shouldn&amp;#8217;t be that hard really.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If nothing else I thought it would be a fun challenge, so I set forth and decided to implemented
a simple module browser for Elm projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_elm_for_the_ui&quot;&gt;Elm for the UI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Elm it&amp;#8217;s recommended that you follow &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;The Elm Architecture&lt;/a&gt; (AKA: TEA).
You model your Elm application and components into 3 separate parts; Model, View and Update.
The easiest way to get started with implementing something following TEA is using the &lt;a href=&quot;https://github.com/evancz/start-app&quot;&gt;start-app&lt;/a&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_model&quot;&gt;Model&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quite often you&amp;#8217;ll find that you start by thinking about how to design your model.
This was also the case for me when developing the module browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Model =                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { allModules : List Modul
  , filteredModules : List Modul
  , searchStr : String
  , selected : Maybe Modul
  }


type alias Modul =                     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  { name : String
  , file : String
  , packageName : String
  , version : String
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The model is quite simple and contains; a list of all modules, the currently filtered modules, the search string entered by the user and the currently selected module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Since Module is a reserved word in Elm the type used for representing a project Module is doofily named &lt;code&gt;Modul&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For more info about what Elm modules are check out the &lt;a href=&quot;https://github.com/elm-guides/elm-for-js/blob/master/Modules%2C%20Exports%2C%20and%20Imports.md#modules-and-files&quot;&gt;elm-guides&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_update&quot;&gt;UPDATE&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Update is where we actually implement the logic of our Elm application. I won&amp;#8217;t cover
all the details, but let&amp;#8217;s walk through the most important bits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Action                                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  = NoOp
  | Filter String
  | Prev
  | Next
  | Select
  | ClickSelect String
  | Close
  | Refresh (List Modul)


update : Action -&amp;gt; Model -&amp;gt; ( Model, Effects Action )  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
update action model =
  case action of
    NoOp -&amp;gt;                                            &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      ( model, Effects.none )

    Filter str -&amp;gt;                                      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
      let
        filtered =
          filterModules str model.allModules

        sel =
          List.head filtered
      in
        ( { model
            | searchStr = str
            , filteredModules = filtered
            , selected = sel
          }
        , Effects.none
        )

    Prev -&amp;gt;                                           &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
      ( { model | selected = prevModule model }
      , notifyChangeSelection
      )

    Next -&amp;gt;
      ( { model | selected = nextModule model }
      , notifyChangeSelection
      )

    Select -&amp;gt;                                         &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
      case model.selected of
        Nothing -&amp;gt;
          ( model, Effects.none )

        Just x -&amp;gt;
          ( model
          , notifySelect x.file
          )

    ClickSelect file -&amp;gt;                               &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
      ( model
      , notifySelect file
      )

    Close -&amp;gt;                                          &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
      ( model, notifyClose )

    Refresh modules -&amp;gt;                                &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
      ( Model modules modules &quot;&quot; (List.head modules)
      , Effects.none
      )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The actions that causes changes to the model is represented by a &lt;a href=&quot;https://en.wikipedia.org/wiki/Union_type&quot;&gt;Union Type&lt;/a&gt; called &lt;code&gt;Action&lt;/code&gt;.
If you&amp;#8217;re not sure what union type means, think of it as a Enum on stereoids.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The update function takes an action and the current model as parameters and returns
a tuple of an (possibly) updated model and an Effect. Effects are basically things that have side-effects (http/ajax, interacting with the browser etc).
We treat an effect like a value in the application, the Elm runtime takes care of actually executing it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NoOp&lt;/code&gt; is just that. It&amp;#8217;s handy when initializing the app and also for mapping effects to when there are
effects that we don&amp;#8217;t care about in the context of this update function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Whenever the user changes the search string input the Filter action is called. It uses a  &lt;code&gt;filterModules&lt;/code&gt; helper function
to filter modules with names starting with the given search string. We default the selected
module to the first in the filtered results. The model is NOT mutated, rather we return a new updated model.
Elm keeps track of our global model state !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Prev&lt;/code&gt; and &lt;code&gt;Next&lt;/code&gt; selects/highlights the next/previous module given the currently selected one.
The &lt;code&gt;notifyChangeSelection&lt;/code&gt; function call results in an effect that allows us to communicate with the ClojureScript part
of the module browser feature. We&amp;#8217;ll get back to that further on.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Select&lt;/code&gt; action is triggered when the users presses Enter. It selects the module and should
ultimately result in opening the Elm Module file. Again to make that happen we need to communicate
with our ClojureScript backend. This is achived through the &lt;code&gt;notifySelect&lt;/code&gt; helper function.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ClickSelect&lt;/code&gt; is similar to &lt;code&gt;Select&lt;/code&gt; but handles when the user uses the mouse to select a module.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Close&lt;/code&gt; - When the user presses the escape key, the module browser should close. Again we
need to notify the ClojureScript backend&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To populate the Module browser ui with modules the &lt;code&gt;Refresh&lt;/code&gt; action is called. This action
is actually triggered by our ClojureScript backend.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before we dive into more details about the interop with ClojureScript, let&amp;#8217;s quickly go through
the view rendering logic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_view&quot;&gt;VIEW&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The view part in Elm is also entirely functional and you as an application developer
never touches the DOM directly. Given the current &lt;code&gt;Model&lt;/code&gt; you tell Elm what the view should look
like, and Elm (through the use of &lt;a href=&quot;https://github.com/Matt-Esch/virtual-dom&quot;&gt;Virtual DOM&lt;/a&gt;) takes care of efficiently
updating the DOM for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The view for the module browser is really quite simple and consist of a search input field
and an ul for listing the modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2016/modulebrowser.png&quot; alt=&quot;modulebrowser&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html                                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
view address model =
  div
    [ class &quot;filter-list&quot; ]                                                       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    [ searchInputView address model
    , ul
        []
        (List.map (\m -&amp;gt; itemView address m model) model.filteredModules)         &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    ]


searchInputView : Signal.Address Action -&amp;gt; Model -&amp;gt; Html                          &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
searchInputView address model =
  let
    options =
      { preventDefault = True, stopPropagation = False }

    keyActions =
      Dict.fromList [ ( 38, Prev ), ( 40, Next ), ( 13, Select ), ( 27, Close ) ] &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

    dec =
      (Json.customDecoder                                                         &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
        keyCode
        (\k -&amp;gt;
          if Dict.member k keyActions then
            Ok k
          else
            Err &quot;not handling that key&quot;
        )
      )

    handleKeydown k =                                                             &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
      Maybe.withDefault NoOp (Dict.get k keyActions) |&amp;gt; Signal.message address
  in
    input                                                                         &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
      [ value model.searchStr
      , class &quot;search&quot;
      , type&apos; &quot;text&quot;
      , placeholder &quot;search&quot;
      , on &quot;input&quot; targetValue (\str -&amp;gt; Signal.message address (Filter str))
      , onWithOptions &quot;keydown&quot; options dec handleKeydown
      ]
      []


itemView : Signal.Address Action -&amp;gt; Modul -&amp;gt; Model -&amp;gt; Html
itemView address mod model =                                                     &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
  let
    pipeM =                                                                      &lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;
      flip Maybe.andThen

    itemClass =                                                                  &lt;i class=&quot;conum&quot; data-value=&quot;11&quot;&gt;&lt;/i&gt;&lt;b&gt;(11)&lt;/b&gt;
      model.selected
        |&amp;gt; pipeM
            (\sel -&amp;gt;
              if (sel == mod) then
                Just &quot;selected&quot;
              else
                Nothing
            )
        |&amp;gt; Maybe.withDefault &quot;&quot;
  in
    li
      [ class itemClass
      , onClick address (ClickSelect mod.file)
      ]
      [ p [] [ text mod.name ]
      , p [ class &quot;binding&quot; ] [ text (mod.packageName ++ &quot; - &quot; ++ mod.version) ]
      ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The main &lt;code&gt;view&lt;/code&gt; function takes an Address and the current Model as input and returns
a virtual &lt;code&gt;HTML&lt;/code&gt; that represents the UI we want rendered. In Elm we use something called mailboxes
to respond to user interactions. Check out the note section below for more details if you&amp;#8217;re interested.
In short the address param is the address to a given mailbox. Elm picks up any messages in the mailbox, handles them
and ultimately the results flow back to our application through the previously described &lt;code&gt;update&lt;/code&gt; function.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;All HTML tags have a corresponding function and all follow the same pattern. The first argument is a list of attributes,
the second is a list of sub elements.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The beauty of everything being a function (as opposed to templating languages) is that you have the full power of the language
to construct your view. Map, filter, reduce etc to your heart&amp;#8217;s content.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;searchInputView&lt;/code&gt; function renders the search input field. This is where most of the user interaction stuff happens
so it&amp;#8217;s naturally the most complex part of the UI.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We use the Dict type to represent key/values. Think map if you&amp;#8217;re from a Clojure background! The &lt;code&gt;keyActions&lt;/code&gt;
map lists the keycode and update action combo we are interested in handling.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We want to intercept just the given keyCodes everything else should flow through and update the searchStr in our model.
To support that we need to implement a custom decoder for the keydown event.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;You can read &lt;code&gt;handleKeydown&lt;/code&gt; as follows, if the keyCode lookup for the given k returns an &lt;code&gt;Action&lt;/code&gt; use that
otherwise use the default &lt;code&gt;NoOp&lt;/code&gt; action. The result from that is used as the last param of the &lt;code&gt;Signal.message&lt;/code&gt; function.
(In Clojure terms you can think of &lt;code&gt;|&amp;gt;&lt;/code&gt; as thread-last). Signal.message sends the given action to the given address.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The search input handles changes to the input by triggering the &lt;code&gt;Filter&lt;/code&gt; action with a payload
which is the current value of the input. To handle the special characters we handle the keydown event using
the local helper function we outlined in &amp;lt;7&amp;gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;itemView&lt;/code&gt; constructs the view for each individual item. Most of the logic here is related to giving the
currently selected item it&amp;#8217;s own css class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Maybe.andThen is a function to help you chain &lt;a href=&quot;http://elm-lang.org/guide/model-the-problem#banishing-null&quot;&gt;maybes&lt;/a&gt;.
(There is no such thing as null/nil in Elm !). &lt;code&gt;flip&lt;/code&gt; flips the order of the two first arguments, and we do it to allow us to chain calls using the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;11&quot;&gt;&lt;/i&gt;&lt;b&gt;11&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If an item is selected and the selected item is the same as the current module being rendered then the class should be &lt;code&gt;selected&lt;/code&gt; in all other cases
the class is an empty string.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
To understand more about Mailboxes, Addresses and the term Signal in Elm. You might want
to check out the relevant  &lt;a href=&quot;http://elm-lang.org/guide/reactivity&quot;&gt;Elm docs&lt;/a&gt; or maybe this &lt;a href=&quot;https://medium.com/@diamondgfx/understanding-elm-signals-mailboxes-addresses-and-actions-7932781396ef#.hsyq1b5c9&quot;&gt;nice blog post&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_interop_with_clojurescript_using_ports&quot;&gt;Interop with ClojureScript using Ports&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interop with JavaScript in Elm goes through strict boundaries and use a mechanism called &lt;a href=&quot;http://elm-lang.org/guide/interop#ports&quot;&gt;ports&lt;/a&gt;.
The strict boundary is in place to ensure that you can&amp;#8217;t get runtime exceptions in Elm (due to nulls, undefined is not a function, type mismatches etc etc).
At first it feels a little bit cumbersome, but really the guarantees given from Elm makes up for it in the long run. Big time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The following blog post really helped me out when doing the ports stuff; &lt;a href=&quot;http://danielbachler.de/2016/02/26/ports-in-elm.html&quot;&gt;&quot;Ports in Elm&quot;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;-- Inbound

modzSignal : Signal Action                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
modzSignal =
  Signal.map Refresh modzPort


port modzPort : Signal (List Modul)            &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;



-- Outbound

selectMailbox : Signal.Mailbox String          &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
selectMailbox =
  Signal.mailbox &quot;&quot;


port select : Signal String                    &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
port select =
  selectMailbox.signal


changeSelectionMailbox : Signal.Mailbox ()     &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
changeSelectionMailbox =
  Signal.mailbox ()


port changeSelection : Signal ()               &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
port changeSelection =
  changeSelectionMailbox.signal


closeMailbox : Signal.Mailbox ()
closeMailbox =
  Signal.mailbox ()


port close : Signal ()
port close =
  closeMailbox.signal&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Signals are basically values that changes over time. A signal always has a value.
If you remember our &lt;code&gt;update&lt;/code&gt; function, it takes an &lt;code&gt;Action&lt;/code&gt; as the first argument. To allow
our incoming module list to trigger an update we need to convert the value we receive from the
&lt;code&gt;modzPort&lt;/code&gt; to a &lt;code&gt;Refresh&lt;/code&gt; action (with a payload which is a List of &lt;code&gt;Modul&lt;/code&gt; records)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;modzPort&lt;/code&gt; is a port which is a Signal that receives values from outside of Elm. Typically JavaScript
or in our instance ClojureScript. A Signal always has a value, so you will see that we need to provide an initial value
when we start the elm app from ClojureScript later on.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When using the &lt;a href=&quot;https://github.com/evancz/start-app&quot;&gt;Elm start app package&lt;/a&gt; we typically use mailboxes to
achieve (side-) effects. So to send messages to JavaScript (or ClojureScript!) we create an intermediary mailbox
to communicate through an outgoing port. When we select a module in the module browser we send the file name of the module
we wish to open and the type of the file name is &lt;code&gt;String&lt;/code&gt;. Hence the Mailbox is a mailbox for string messages.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;select&lt;/code&gt; port is a Signal of Strings (file names) that we can subscribe to from JavaScript(/ClojureScript).
You can think of it as an Observable (in RxJs terms) or maybe simpler an event emitter if you like.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;()&lt;/code&gt; in Elm means the same as &lt;code&gt;void&lt;/code&gt; or no value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When the user changes which module is selected/hightlighted we don&amp;#8217;t care about the value, in this instance we just need to know that the user changed their selection&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_wiring_up_elm_with_start_app&quot;&gt;Wiring up Elm with Start app&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;app : StartApp.App Model                       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
app =
  StartApp.start
    { init = init
    , update = update
    , view = view
    , inputs = [ modzSignal ]                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }


main : Signal Html                             &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
main =
  app.html


port tasks : Signal (Task.Task Never ())       &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
port tasks =
  app.tasks&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;StartApp.start&lt;/code&gt; takes care of wiring up our Elm application. &lt;code&gt;init&lt;/code&gt; creates an initial empty Model, the other functions
we have already described.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;StartApp also takes an inputs argument, here we need to remember to add our &lt;code&gt;modzSignal&lt;/code&gt; so that it
is picked up and handled by StartApp.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;main&lt;/code&gt; is the entry point for any Elm application.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Elm executes side effects through something called &lt;a href=&quot;http://elm-lang.org/guide/reactivity#tasks&quot;&gt;tasks&lt;/a&gt;
I won&amp;#8217;t go into details here, but just remember to add this incantation when using StartApp.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_wrapping_up_the_elm_part&quot;&gt;Wrapping up the Elm part&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Right so that wes pretty much all there is to the Elm part. Of course we also need to remember to compile
the Elm code to JavaScript before we can use it from Light Table.
To do that we use the &lt;code&gt;elm-make&lt;/code&gt; executable that comes with the &lt;a href=&quot;http://elm-lang.org/install&quot;&gt;elm-platform installation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can assure you that I didn&amp;#8217;t get a single run time exception whilst developing the Elm part. It did
get lots of helpful compiler errors along the way, but as soon as the compiler was happy the Elm application ran just as expected.
It&amp;#8217;s hard to describe the experience, but trust me, it&amp;#8217;s certainly worth a try !
To be able to easily test and get visual feedback along the way I set up a dummy html page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok let&amp;#8217;s move on to the ClojureScript part were we hook the ui up to the Light Table plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_clojurescript_and_light_table&quot;&gt;ClojureScript and Light Table&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_generating_the_list_of_elm_modules&quot;&gt;Generating the list of Elm Modules&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately there isn&amp;#8217;t any API AFAIK that provides the information I wished to present
(ideally all modules and for each module, all it&amp;#8217;s publicly exposed functions/types/values).
So I had to go down a route where I use a combination of the elm project file (elm-package.json) and
artifacts (files) generated when you run &lt;code&gt;elm-make&lt;/code&gt; on your elm project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(defn- resolve-module-file [project-path pck-json package module version]                   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  (-&amp;gt;&amp;gt; pck-json
       :source-directories
       (map #(files/join project-path
                         &quot;elm-stuff/packages&quot;
                         package
                         version
                         %
                         (str (s/replace module &quot;.&quot; files/separator) &quot;.elm&quot;)))
       (some #(if (files/exists? %) % nil))))


(defn- get-exposed-modules [project-path {:keys [package exact]}]                          &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  (let [pck-json (u/parse-json-file (files/join project-path
                                                &quot;elm-stuff/packages&quot;
                                                package exact
                                                &quot;elm-package.json&quot;))]
    (-&amp;gt;&amp;gt; pck-json
         :exposed-modules
         (map (fn [x]
                {:name x
                 :packageName package
                 :version exact
                 :file (resolve-module-file project-path pck-json package x exact)})))))


(defn- get-package-modules [project-path]                                                 &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  (-&amp;gt;&amp;gt; (u/get-project-deps project-path)
       (filter :exact)
       (mapcat (partial get-exposed-modules project-path))
       (sort-by :name)))


(defn- deduce-module-name [root-path elm-file-path]                                       &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  (-&amp;gt; elm-file-path
      (s/replace root-path &quot;&quot;)
      (s/replace &quot;.elm&quot; &quot;&quot;)
      (s/replace #&quot;^/&quot; &quot;&quot;)
      (s/replace files/separator &quot;.&quot;)))


(defn- get-project-modules [project-path]                                                 &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  (let [pck-json (u/parse-json-file (files/join project-path &quot;elm-package.json&quot;))]
    (-&amp;gt;&amp;gt; (:source-directories pck-json)
         (mapcat (fn [dir]
                   (if (= dir &quot;.&quot;)
                     (-&amp;gt;&amp;gt; (files/ls project-path) ;; fixme: no nesting allowed to avoid elm-stuff etc
                          (filter #(= (files/ext %) &quot;elm&quot;))
                          (map (fn [x]
                                 {:name (deduce-module-name &quot;&quot; x)
                                  :file (files/join project-path x)})))
                     (-&amp;gt;&amp;gt; (files/filter-walk #(= (files/ext %) &quot;elm&quot;) (files/join project-path dir))
                          (map (fn [x]
                                 {:name (deduce-module-name (files/join project-path dir) x)
                                  :file x}))))))
         (map (fn [m]
                (assoc m :packageName (files/basename project-path) :version (:version pck-json))))
         (sort-by :name))))



(defn get-all-modules [project-path]                                                      &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
  (concat
    (get-project-modules project-path)
    (get-package-modules project-path)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Helper function which tries to resolve the file for a Module from a 3rd party library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Every 3rd party library also comes with a elm-package.json that lists which module are
publicly exposed. This helper function generates module info for all exposed modules from a 3rd party library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Given all defined project dependencies for a project at a given project-path this function generates
module informaation for all this packages. It will only try to resolve modules which has a resolved version &lt;code&gt;:exact&lt;/code&gt;, so there is a precondition
that you have run either &lt;code&gt;elm-package&lt;/code&gt; install or &lt;code&gt;elm-make&lt;/code&gt; successfully on your project first.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;deduce-module-name&lt;/code&gt; is a helper function which tries to deduce the module name for an Elm file in your project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Helper function that takes a simplistic approach to try to find all modules in you project and generate module information for them
It uses the &quot;source-directories&quot; key in your project&amp;#8217;s &lt;code&gt;elm-package.json&lt;/code&gt; as a starting point.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The complete list of modules is a concatination of 3rd party modules and your project modules.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There are a few simplifications in this implementation that might yield incomplete results (and sometimes erronous).
However for the majority of cases it should work fine.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_light_table_sidebar&quot;&gt;Light Table sidebar&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The module browser will live in the right sidebar in Light Table. The following code will
construct the wrapper view and a Light Table object that will allow us to wire up the appropriate
behaviors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(defui wrapper [this]                                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
   [:div {:id &quot;elm-module-browser&quot;} &quot;Retrieving modules...&quot;])


(object/object* ::modulebrowser                                   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                :tags #{:elm.modulebrowser}
                :label &quot;Elm module browser&quot;
                :order 2
                :init (fn [this]
                        (wrapper this)))

(def module-bar (object/create ::modulebrowser))                  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

(sidebar/add-item sidebar/rightbar module-bar)                    &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Helper function to create a wrapper div which will host our module browser&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A Light Table object (basically an ClojureScript atom) that allows us to tag behaviors.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The object above is instantiated at start up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We add the module bar to the right hand sidebar in Light Table&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_light_table_behaviors&quot;&gt;Light Table behaviors&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(behavior ::clear!                                              &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
          :triggers #{:clear!}
          :reaction (fn [this]
                      (cmd/exec! :close-sidebar)))

(behavior ::focus!                                              &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
          :triggers #{:focus!}
          :reaction (fn [this]
                      (let [input (dom/$ &quot;#elm-module-browser input&quot;)]
                        (.focus input))))

(behavior ::ensure-visible                                      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
          :triggers #{:ensure-visible}
          :reaction (fn [this]
                      (sidebar-cmd/ensure-visible this)))

(behavior ::show-project-modules                                &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
          :triggers #{:show-project-modules}
          :reaction (fn [this prj-path]
                      (let [modules (get-all-modules prj-path)
                            el (dom/$ &quot;#elm-module-browser&quot;)
                            mod-browser (.embed js/Elm js/Elm.ModuleBrowser el (clj-&amp;gt;js {:modzPort []}))] &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

                        (.send (.-modzPort (.-ports mod-browser)) (clj-&amp;gt;js modules))   &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

                        ;; set up port subscriptions

                        (.subscribe (.-changeSelection (.-ports mod-browser))          &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
                                    (fn []
                                      (object/raise this :ensure-visible)))

                        (.subscribe (.-select (.-ports mod-browser))
                                    (fn [file]
                                      (cmd/exec! :open-path file)
                                      (object/raise this :clear!)))

                        (.subscribe (.-close (.-ports mod-browser))
                                    (fn []
                                      (object/raise this :clear!)))


                        (object/raise this :focus!))))



(behavior ::list-modules                                     &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
          :triggers #{:editor.elm.list-modules}
          :reaction (fn [ed]
                      (when-let [prj-path (u/project-path (-&amp;gt; @ed :info :path))]
                        (do
                          (object/raise sidebar/rightbar :toggle module-bar)
                          (object/raise module-bar :show-project-modules prj-path)))))


(cmd/command {:command :show-modulebrowser                  &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
              :desc &quot;Elm: Show module-browser&quot;
              :exec (fn []
                      (when-let [ed (pool/last-active)]
                        (object/raise ed :editor.elm.list-modules)))})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This behavior basically closes the module browser sidebar when triggered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We need to be able to set focus to the search input field when we open the module browser&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Helper behavior that ensures that the currently selected item in the module browser is visible
on the screen. Ie it will scroll the div contents accordingly using a LT core helper function.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is were we hook everything up. We gather the module information for the given project
instantiate the Elm app, subscribe to outgoing messages(/signals!) and populate the module browser
with the module list.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We start the elm app here and tells it to render in the wrapper div defined previously. We provide
an initial value for the modzPort with an empty list. (Could have provided the gathered list modules here, but wanted to show how you send messages to a inbound Elm port explicitly. See next step)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To populate the module browser we send a message to the modzPort. Elm port thinks in JavaScript so we need to convert our list of ClojureScript maps to a list of JavaScript objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To listen to events from the Elm app we call subscribe with a given callback function. In this example
we trigger the ensure-visible behavior when the users moves the selection up or down, to ensure the selected item stays visible.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The behaviors above was tied(tagged) to the &lt;code&gt;module-bar&lt;/code&gt; object, however this behavior is tagged to
a currently opened and active elm editor object. Light Table has no concept of projects, so to deduce which project we should
open the module browser for we need a starting point. Any elm file in your project will do. Based on that
we can deduce the root project path. If we find a project we display the module bar view and trigger the behavior
for populating the module browser.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Commands are the user interfacing functions that responds to user actions. They can be listed in the command bar in Light Table
and you can assign shortcuts to them. The &lt;code&gt;show-modulebrowser&lt;/code&gt; command triggers the &lt;code&gt;list-modules&lt;/code&gt; behavior.
Commands are available regardless of which editor you trigger them from, this is why we introduced the intermediary &apos;list-modules` behavior
because that allows us to declaritly filter when this behavior will be triggered. You&amp;#8217;ll see how when we describe behaviors wiring in Light Table.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_wiring_up_lt_behaviors&quot;&gt;Wiring up LT behaviors&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our plugin behaviors file we need to wire up our behaviors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;[:editor.elm :lt.plugins.elm-light.modulebrowser/list-modules]       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
[:elm.modulebrowser :lt.plugins.elm-light.modulebrowser/clear!]      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
[:elm.modulebrowser :lt.plugins.elm-light.modulebrowser/show-project-modules]
[:elm.modulebrowser :lt.plugins.elm-light.modulebrowser/focus!]
[:elm.modulebrowser :lt.plugins.elm-light.modulebrowser/ensure-visible]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here we tell Light Table that only editor objects with the tag &lt;code&gt;:editor.elm&lt;/code&gt;
will respond with the list-modules behavior we described earlier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Similaritly the other behaviors will only be triggerd by objects tagged with &lt;code&gt;:elm-modulebrowser&lt;/code&gt;.
In our case that would be the &lt;code&gt;module-bar&lt;/code&gt; object we defined.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Why all this ceremony with behaviors ?&lt;/div&gt;
&lt;p&gt;Flexibility! It allows us to easily turn on/off features while Light Table is running. If you wish you could quite easily
create your own implementation for a behavior and replace the one supplied by the plugin.
Or maybe you&amp;#8217;d like to do something in addition for a given behavior trigger.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Okay let&amp;#8217;s be honest. We haven&amp;#8217;t set the world alight with a killer feature that couldn&amp;#8217;t
be accomplished quite easily without Elm. Neither have we created an advanced demo for Elm and ClojureScript integration.
But we&amp;#8217;ve certainly proven that it&amp;#8217;s possible and it wasn&amp;#8217;t particularily difficult.
It somehow feels better with an Elm plugin that has Elm as part of it&amp;#8217;s implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can do some pretty awesomly advanced UI&amp;#8217;s with Elm and combing it with ClojureScript is definitely feasible.
I&amp;#8217;ll leave it to you to evaluate if that would ever make sense to do though !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Typed up CRUD SPA with Haskell and Elm - Part 4: Feature creep</title>
        <link>http://rundis.github.io/blog/2016/haskel_elm_spa_part4.html</link>
        <pubDate>Tue, 1 Mar 2016 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2016/haskel_elm_spa_part4.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the hypothesis from &lt;a href=&quot;http://rundis.github.io/blog/2016/haskel_elm_spa_part3.html&quot;&gt;episode 3&lt;/a&gt; was that it should
be relatively easy to add new features. In this episode we&amp;#8217;ll put that hypothesis to the test and add CRUD features
for Albums. There will be a little refactoring, no testing, premature optimizations and plenty of &quot;let the friendly Elm and Haskell compilers guide us along the way&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Useful resources&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check out the other &lt;a href=&quot;http://rundis.github.io/blog/tags/haskellelmspa.html&quot;&gt;episodes&lt;/a&gt; in this blog series.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The accompanying &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;Albums&lt;/a&gt; sample app is on github, and there is a tag
for each episode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_backend&quot;&gt;Backend&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_stack&quot;&gt;Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_datamodel&quot;&gt;Datamodel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_bootstrapping&quot;&gt;Bootstrapping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_new_endpoints_for_albums&quot;&gt;New endpoints for Albums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_backend_summary&quot;&gt;Backend summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_frontend&quot;&gt;Frontend&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_new_routes&quot;&gt;New routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_service_api&quot;&gt;Service API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_the_album_page&quot;&gt;The album page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_track_row&quot;&gt;Track row&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_main_elm_wiring_it_all_up&quot;&gt;Main.elm wiring it all up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_frontend_summary&quot;&gt;Frontend summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_concluding_remarks&quot;&gt;Concluding remarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I set out to implement the features for this episode I didn&amp;#8217;t really reflect on how I would then later
go about blogging about it. It turns out I probably did way to many changes to fit nicely into a blog episode.
Let&amp;#8217;s just say I got caught up in a coding frenzy, but let me assure you I had a blast coding for this episode !
This means I wont be going into detail about every change I&amp;#8217;ve made since the last episode, but rather try to highlight
the most important/interesting ones.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A highlevel summary of changes includes:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.haskellstack.org/en/stable/README/&quot;&gt;Haskell stack&lt;/a&gt; has been introduced to the backend&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implemented REST endpoints for Albums CRUD&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Backend now composes endpoints for Artists and Albums&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data model changed to account for Album and Track entities&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bootstrapping of sample data extended and refactored to a separate module&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implemented UI for listing, deleting, creating, updating and displaying album details&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In particular the the features for creating/updating Albums and associated tracks, gives a glimpse
of the compasability powers of the &lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;Elm Architecture&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/RU0NB2xaQIg&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_backend&quot;&gt;Backend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_stack&quot;&gt;Stack&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Working with Cabal and Cabal sandboxes is a bit of a pain. &lt;a href=&quot;http://docs.haskellstack.org/en/stable/README/&quot;&gt;Stack&lt;/a&gt; promises to alleviate some of those pains, so I figured
I&amp;#8217;d give it a go. There are probably tutorials/blog posts out there going into how you should go about migrating
to use stack in your Haskell projects, so I won&amp;#8217;t go into any details here.
Basically I installed stack and added a stack configuration file &lt;code&gt;stack.yml&lt;/code&gt;. After that I was pretty much up and running.
The instructions for running the sample app with stack can be found in the Albums &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_datamodel&quot;&gt;Datamodel&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2016/albums_db_part4.png&quot; alt=&quot;albums db part4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The datamodel contains a little bit of flexibility so that a track can be potentially be included in many albums
(hence the album_track entity). For this episode though, we&amp;#8217;re not using that and of course that innocent bit of flexibility
comes with a cost of added complexity. I considered removing the album_track entity, but decided against it. I figured
that in a real project this is a typical example of things you have to deal with (say you have a DBA or even more relevant&amp;#8230;&amp;#8203; and exisiting datamodel you have to live with).
Let&amp;#8217;s run with it, and try to deal with it along the way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_bootstrapping&quot;&gt;Bootstrapping&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code for schema creation and bootstrapping test data has been moved to a separate module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/src/Bootstrap.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;bootstrapDB :: Sql.Connection -&amp;gt; IO ()
bootstrapDB conn = do
  createSchema conn
  populateSampleData conn


createSchema :: Sql.Connection -&amp;gt; IO ()
createSchema conn = do
  executeDB &quot;PRAGMA foreign_keys = ON&quot;
  executeDB &quot;create table artist (id integer primary key asc, name varchar2(255))&quot;
  executeDB &quot;create table track (id integer primary key asc, name varchar2(255), duration integer)&quot;
  executeDB &quot;create table album (id integer primary key asc, artist_id integer, name varchar2(255), FOREIGN KEY(artist_id) references artist(id))&quot;
  executeDB &quot;create table album_track (track_no integer, album_id, track_id, primary key(track_no, album_id, track_id), foreign key(album_id) references album(id), foreign key(track_id) references track(id))&quot;

  where
    executeDB = Sql.execute_ conn


-- definition of sample data omitted for brevity

populateSampleData :: Sql.Connection -&amp;gt; IO ()
populateSampleData conn = do
  mapM_ insertArtist artists
  mapM_ insertTrack tracks
  mapM_ insertAlbum albums
  mapM_ insertAlbumTrack albumTracks

  where
    insertArtist a = Sql.execute conn &quot;insert into artist (id, name) values (?, ?)&quot; a
    insertTrack t = Sql.execute conn &quot;insert into track (id, name, duration) values (?, ?, ?)&quot; t
    insertAlbum a = Sql.execute conn &quot;insert into album (id, artist_id, name) values (?, ?, ?)&quot; a
    insertAlbumTrack at = Sql.execute conn &quot;insert into album_track (track_no, album_id, track_id) values (?, ?, ?)&quot; at&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Somewhat amusing that foreign key constraints are not turned on by default in SQLite, but hey.
What&amp;#8217;s less amusing is that foreign key exceptions are very unspecific about which contraints are violated (:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_new_endpoints_for_albums&quot;&gt;New endpoints for Albums&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_model_additions&quot;&gt;Model additions&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/src/Model.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;data Track = Track                       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { trackId :: Maybe Int
  , trackName :: String
  , trackDuration :: Int -- seconds
  } deriving (Eq, Show, Generic)


data Album = Album                       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  { albumId :: Maybe Int
  , albumName :: String
  , albumArtistId :: Int
  , albumTracks :: [Track]
  } deriving (Eq, Show, Generic)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our Track type doesn&amp;#8217;t care about the distiction between the album and album_track entities&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;It was tempting to add Artist as a property to the Album type, but opted for just the id of an Artist entity.
I didn&amp;#8217;t want to be forced to return a full artist instance for every Album returned. You gotta draw the line somewhere right ?&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_albums_crud_functions&quot;&gt;Albums CRUD functions&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to keep this blog post from becoming to extensive we&amp;#8217;ve only included the functions to
list and create new albums. You can view the update, findById and delete functions in the
&lt;a href=&quot;https://github.com/rundis/albums/blob/master/backend/src/Storage.hs&quot;&gt;album sample repo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;findAlbums :: Sql.Connection -&amp;gt; IO [M.Album]                                                         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
findAlbums conn = do
  rows &amp;lt;- Sql.query_ conn (albumsQuery &quot;&quot;) :: IO [(Int, String, Int, Int, String, Int)]
  return $ Map.elems $ foldl groupAlbum Map.empty rows


findAlbumsByArtist :: Sql.Connection -&amp;gt; Int -&amp;gt; IO [M.Album]                                          &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
findAlbumsByArtist conn artistId = do
  rows &amp;lt;- Sql.query conn (albumsQuery &quot; where artist_id = ?&quot;) (Sql.Only artistId) :: IO [(Int, String, Int, Int, String, Int)]
  return $ Map.elems $ foldl groupAlbum Map.empty rows


albumsQuery :: String -&amp;gt; SqlTypes.Query                                                              &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
albumsQuery whereClause =
  SqlTypes.Query $ Txt.pack $
    &quot;select a.id, a.name, a.artist_id, t.id, t.name, t.duration \
    \ from album a inner join album_track at on a.id = at.album_id \
    \ inner join track t on at.track_id = t.id&quot;
    ++ whereClause
    ++ &quot; order by a.id, at.track_no&quot;


groupAlbum :: Map.Map Int M.Album -&amp;gt; (Int, String, Int, Int, String, Int) -&amp;gt; Map.Map Int M.Album     &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
groupAlbum acc (albumId, albumName, artistId, trackId, trackName, trackDuration) =
  case (Map.lookup albumId acc) of
    Nothing -&amp;gt; Map.insert albumId (M.Album (Just albumId) albumName artistId [M.Track (Just trackId) trackName trackDuration]) acc
    Just _ -&amp;gt; Map.update (\a -&amp;gt; Just (addTrack a (trackId, trackName, trackDuration))) albumId acc
              where
                addTrack album (trackId, trackName, trackDuration) =
                  album {M.albumTracks = (M.albumTracks album) ++ [M.Track (Just trackId) trackName trackDuration]}



newAlbum :: Sql.Connection -&amp;gt; M.Album -&amp;gt; IO M.Album                                                  &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
newAlbum conn album = do
  Sql.executeNamed conn &quot;insert into album (name, artist_id) values (:name, :artistId)&quot; [&quot;:name&quot; := (M.albumName album), &quot;:artistId&quot; := (M.albumArtistId album)]
  albumId &amp;lt;- lastInsertRowId conn
  tracks &amp;lt;- zipWithM (\t i -&amp;gt; newTrack conn (i, fromIntegral albumId, (M.albumArtistId album), t)) (M.albumTracks album) [0..]

  return album { M.albumId = Just $ fromIntegral albumId
               , M.albumTracks = tracks
               }


newTrack :: Sql.Connection -&amp;gt; (Int, Int, Int, M.Track) -&amp;gt; IO M.Track                                 &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
newTrack conn (trackNo, albumId, artistId, track) = do
  Sql.executeNamed conn &quot;insert into track (name, duration) values (:name, :duration)&quot; [&quot;:name&quot; := (M.trackName track), &quot;:duration&quot; := (M.trackDuration track)]
  trackId &amp;lt;- lastInsertRowId conn
  Sql.execute conn &quot;insert into album_track (track_no, album_id, track_id) values (?, ?, ?)&quot; (trackNo, albumId, trackId)

  return track {M.trackId = Just $ fromIntegral trackId}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Function to list all albums&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Function to list albums filtered by artist&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Helper function to construct an album query with an optional where clause. The query returns a product
of albums and their tracks. Let&amp;#8217;s just call this a performance optimization to avoid n+1 queries :-)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Since album information is repeated for each track, we need to group tracks per album. This part was a fun challenge
for a Haskell noob. I&amp;#8217;m sure it could be done eveny more succinct, but I&amp;#8217;m reasonably happy with the way it turned out.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is the function to create a new album with all it&amp;#8217;s tracks. We assume the tracks are sorted in the order they
should be persisted and uses zipWith to get a mapIndexed kind of function so that we can generate the appropriate track_no
for each album_track in the db.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Working with tracks we have to consider both the track and album_track entities in the db. As it is, the
album_track table is just overhead, but we knew that allready given the design decission taken earlier. Once we need to support
the fact that a track can be included in more that one album, we need to rethink this implementation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_adding_albums_to_the_api&quot;&gt;Adding albums to the API&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/src/Api.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;type AlbumAPI =                                                                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
       QueryParam &quot;artistId&quot; Int :&amp;gt; Get &apos;[JSON] [M.Album]                           &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  :&amp;lt;|&amp;gt; ReqBody &apos;[JSON] M.Album :&amp;gt; Post &apos;[JSON] M.Album
  :&amp;lt;|&amp;gt; Capture &quot;albumId&quot; Int :&amp;gt; ReqBody &apos;[JSON] M.Album :&amp;gt; Put &apos;[JSON] M.Album
  :&amp;lt;|&amp;gt; Capture &quot;albumId&quot; Int :&amp;gt; Get &apos;[JSON] M.Album
  :&amp;lt;|&amp;gt; Capture &quot;albumId&quot; Int :&amp;gt; Delete &apos;[] ()


albumsServer :: Sql.Connection -&amp;gt; Server AlbumAPI
albumsServer conn =
  getAlbums :&amp;lt;|&amp;gt; postAlbum :&amp;lt;|&amp;gt; updateAlbum :&amp;lt;|&amp;gt; getAlbum :&amp;lt;|&amp;gt; deleteAlbum

  where
    getAlbums artistId            = liftIO $ case artistId of                       &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                                              Nothing -&amp;gt; S.findAlbums conn
                                              Just x -&amp;gt; S.findAlbumsByArtist conn x
    postAlbum album               = liftIO $ Sql.withTransaction conn $ S.newAlbum conn album
    updateAlbum albumId album     = liftIOMaybeToEither err404 $ Sql.withTransaction conn $ S.updateAlbum conn album albumId
    getAlbum albumId              = liftIOMaybeToEither err404 $ S.albumById conn albumId
    deleteAlbum albumId           = liftIO $ Sql.withTransaction conn $ S.deleteAlbum conn albumId


type API = &quot;artists&quot; :&amp;gt; ArtistAPI :&amp;lt;|&amp;gt; &quot;albums&quot; :&amp;gt; AlbumAPI                         &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

combinedServer :: Sql.Connection -&amp;gt; Server API                                      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
combinedServer conn = artistsServer conn :&amp;lt;|&amp;gt; albumsServer conn&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;ve added a new API type for Albums&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For listing albums we support an optional query param to allow us to filter albums by artist&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This implementation is quite simplistic, we probably want to provide a more generic way to handle multiple
filter criteria in the future.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The API for our backend is now a composition of the api for artists and the api for albums&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;As Servant allows us to compose apis it also allows us to compose servers (ie the implementations of the apis).
We create a combined server, which is what we ultimately expose from our backend server&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The really observant reader might have noticed that the update function for albums is a little bit more
restrictive/solid than the corresponding function for artist. Here we actually check if the given album id
corresponds to a album in the DB. If it doesn&amp;#8217;t we return a 404.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/Main.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;app :: Sql.Connection -&amp;gt; Application
app conn = serve A.api (A.combinedServer conn)          &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;



main :: IO ()
main = do
  withTestConnection $ \conn -&amp;gt;  do
    B.bootstrapDB conn                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    run 8081 $ albumCors $ app conn&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Rather than serve the just the albumServer, we now serve the combined server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;ve updated bootstrapping to use the the new bootstrap module&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_backend_summary&quot;&gt;Backend summary&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That wasn&amp;#8217;t to hard now was it ? Adding additional end points was quite straightforward, the hard part
was overcoming analysis paralysis. Settling on data types and db design took some time, and in hindsight I might
have opted for a more simplistic db design. I&amp;#8217;m also curious about how the design would have been had I started top down (frontend first)
and backend last. I have a strong suspicion it would have been different.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Haskell IO&lt;/div&gt;
&lt;p&gt;The thing I probably spent most time struggling with was working with IO actions. Apparantly I shouldn&amp;#8217;t
use the term &lt;a href=&quot;http://blog.jle.im/entry/io-monad-considered-harmful&quot;&gt;IO Monad&lt;/a&gt;. Anyways I can&amp;#8217;t wrap my head around
when I&amp;#8217;m &quot;inside&quot; the IO thingie and when I&amp;#8217;m not. It&amp;#8217;s obvious that &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;&amp;#8592;&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; is something
I have to sit down and understand (in the context of IO things). My strategy of trial and error doesn&amp;#8217;t scale
all that well, and whatsmore It feels ackward not having a clue on the reasoning on why something is working or not.
Note to self, read up on Haskell IO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;REST concerns&lt;/div&gt;
&lt;p&gt;Even with this simple example I started to run into the same old beef I have with generic rest endpoints.
They rarely fit nicely with a Single Page Application. They work ok when it comes to adding and updating data,
but when it comes to querying it all becomes much more limiting. In a SPA you typically want much more flexibility
in terms of what you query by and what you get in return.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In an album listing for a given artist I might just want to display the name, release date, number of songs and album length
I&amp;#8217;m not interested in the tracks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In an album listing / album search outside of an artist context I probably want to display the artist name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a mobile client I might just want to display the album name (size of payloads might actually be important for mobile&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Likewise when listing artists I might want to display number of albums&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or when searching I might want to search album name, artist name and/or track name&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Reading about &lt;a href=&quot;https://facebook.github.io/graphql/&quot;&gt;GraphQL&lt;/a&gt;, &lt;a href=&quot;http://netflix.github.io/falcor/&quot;&gt;Falcor&lt;/a&gt;
and more recently &lt;a href=&quot;https://github.com/omcljs/om/wiki&quot;&gt;Om next&lt;/a&gt; has been an eye-opener to me.
The ideas here rings true and bodes well for the frontend, probably soonish something will materialize for Elm too.
But what to do on the server side I wonder ?
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_frontend&quot;&gt;Frontend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_new_routes&quot;&gt;New routes&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/src/Routes.elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Route                      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  = Home
  -- ...
  | AlbumDetailPage Int
  | NewArtistAlbumPage Int
  | EmptyRoute


routeParsers =                 &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  [ static Home &quot;/&quot;
  -- ...
  , dyn1 AlbumDetailPage &quot;/albums/&quot; int &quot;&quot;
  , dyn1 NewArtistAlbumPage &quot;/artists/&quot; int &quot;/albums/new&quot;
  ]

encode route =                 &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  case route of
    Home -&amp;gt; &quot;/&quot;
    -- ...
    AlbumDetailPage   i   -&amp;gt; &quot;/albums/&quot; ++ toString i
    NewArtistAlbumPage i  -&amp;gt; &quot;/artists/&quot; ++ (toString i) ++ &quot;/albums/new&quot;
    EmptyRoute -&amp;gt; &quot;&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We have added 2 new routes, one for edit/create albums, one for creating a new album (for a given artist)
(actually there is a 3 for creating an album without selecting an artist, but it&amp;#8217;s not wired up yet)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We need to add route matchers for the new routes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We also need to add encoders for our new routes.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_service_api&quot;&gt;Service API&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To call our new REST api for albums we need to implement a few new functions and json decoders.
We&amp;#8217;ll only show two of the api related functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias AlbumRequest a =    &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { a | name : String
      , artistId : Int
      , tracks : List Track
  }

type alias Album =             &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  { id : Int
  , name : String
  , artistId : Int
  , tracks : List Track
  }

type alias Track =             &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  { name : String
  , duration : Int
  }


getAlbumsByArtist : Int -&amp;gt; (Maybe (List Album) -&amp;gt; a) -&amp;gt; Effects a               &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
getAlbumsByArtist artistId action =
  Http.get albumsDecoder (baseUrl ++ &quot;/albums?artistId=&quot; ++ toString artistId)
    |&amp;gt; Task.toMaybe
    |&amp;gt; Task.map action
    |&amp;gt; Effects.task

createAlbum : AlbumRequest a -&amp;gt; (Maybe Album -&amp;gt; b) -&amp;gt; Effects.Effects b         &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
createAlbum album action =
  Http.send Http.defaultSettings
        { verb = &quot;POST&quot;
        , url = baseUrl ++ &quot;/albums&quot;
        , body = Http.string (encodeAlbum album)
        , headers = [(&quot;Content-Type&quot;, &quot;application/json&quot;)]
        }
    |&amp;gt; Http.fromJson albumDecoder
    |&amp;gt; Task.toMaybe
    |&amp;gt; Task.map action
    |&amp;gt; Effects.task

-- other functions left out for brevity. Check out the sample code or have a look at episode 2 for inspiration



-- Decoders/encoders for albums/tracks                                         &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

albumsDecoder : JsonD.Decoder (List Album)
albumsDecoder =
  JsonD.list albumDecoder


albumDecoder : JsonD.Decoder Album
albumDecoder =
  JsonD.object4 Album
    (&quot;albumId&quot; := JsonD.int)
    (&quot;albumName&quot; := JsonD.string)
    (&quot;albumArtistId&quot; := JsonD.int)
    (&quot;albumTracks&quot; := JsonD.list trackDecoder)


trackDecoder : JsonD.Decoder Track
trackDecoder =
  JsonD.object2 Track
    (&quot;trackName&quot; := JsonD.string)
    (&quot;trackDuration&quot; := JsonD.int)


encodeAlbum : AlbumRequest a -&amp;gt; String
encodeAlbum album =
  JsonE.encode 0 &amp;lt;|
    JsonE.object
      [ (&quot;albumName&quot;, JsonE.string album.name)
      , (&quot;albumArtistId&quot;, JsonE.int album.artistId)
      , (&quot;albumTracks&quot;, JsonE.list &amp;lt;| List.map encodeTrack album.tracks)
      ]


encodeTrack : Track -&amp;gt; JsonE.Value
encodeTrack track =
    JsonE.object
      [ (&quot;trackName&quot;, JsonE.string track.name)
      , (&quot;trackDuration&quot;, JsonE.int track.duration)
      ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We use the AlbumRequest type when dealing with new albums&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The Album type represents a persisted album&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We aren&amp;#8217;t really interested in the id of tracks so we only need one Track type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For finding albums for an artist we can use the Http.get function with default settings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To implement createAlbum we need to use Http.Send so that we can provide custom settings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Decoding/Encoding Json to/from types isn&amp;#8217;t particularily difficult, but it is a bit of boilerplate involved&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the_album_page&quot;&gt;The album page&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve made some changes to the ArtistDetail page which we won&amp;#8217;t show in this episode.
These changes include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;List all albums for an artist&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add features to remove album and link from each album in listin to edit the album&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A button to initation the Album detail page in &quot;Create New&quot; mode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2016/albumdetails.png&quot; alt=&quot;albumdetails&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We consider an Album and it&amp;#8217;s tracks to be an aggregate. This is also reflected in the implementation
of the ArlbumDetail module in the frontend code. You&amp;#8217;ll hopefully see that it&amp;#8217;s not that hard
to implement a semi advanced page by using the composability of the elm architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok lets look at how we&amp;#8217;ve implemented the Album detail page and it&amp;#8217;s associated track listing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_types&quot;&gt;Types&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Model =                                  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { id : Maybe Int
  , artistId : Maybe Int
  , name : String
  , tracks : List ( TrackRowId, TrackRow.Model )
  , nextTrackRowId : TrackRowId
  , artists : List Artist
  }


type alias TrackRowId =                             &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  Int


type Action                                         &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  = NoOp
  | GetAlbum (Int)
  | ShowAlbum (Maybe Album)
  | HandleArtistsRetrieved (Maybe (List Artist))
  | SetAlbumName (String)
  | SaveAlbum
  | HandleSaved (Maybe Album)
  | ModifyTrack TrackRowId TrackRow.Action
  | RemoveTrack TrackRowId
  | MoveTrackUp TrackRowId
  | MoveTrackDown TrackRowId&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The model kind of reflects the Album type we saw in the previous chapter, but it&amp;#8217;s
bespoke for use in this view. Most notably we keep a list of Artists (for an artist dropdown) and
tracks are represented as a list of trackrow models from the TrackRow.elm module.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To be able to forward updates to the appropriate TrackRow instance we are using a sequence type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;There are quite a few actions, But the last 4 are related to the list of TrackRows.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;AlbumDetails can be seen as holding an AlbumListing, updates that concerns the list is handled
by AlbumDetails whilst updates that concerns individual TrackRows are forwarded to the appropriate
TrackRow instance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_the_update_function&quot;&gt;The update function&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;update : Action -&amp;gt; Model -&amp;gt; ( Model, Effects Action )
update action model =
  case action of
    NoOp -&amp;gt;
      ( model, Effects.none )

    GetAlbum id -&amp;gt;                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      ( model
      , Effects.batch
          [ getAlbum id ShowAlbum
          , getArtists HandleArtistsRetrieved
          ]
      )

    ShowAlbum maybeAlbum -&amp;gt;             &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      case maybeAlbum of
        Just album -&amp;gt;
          ( createAlbumModel model album, Effects.none )

        -- TODO: This could be an error if returned from api !
        Nothing -&amp;gt;
          ( maybeAddPristine model, getArtists HandleArtistsRetrieved )

    HandleArtistsRetrieved xs -&amp;gt;        &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      ( { model | artists = (Maybe.withDefault [] xs) }
      , Effects.none
      )

    SetAlbumName txt -&amp;gt;                 &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
      ( { model | name = txt }
      , Effects.none
      )

    SaveAlbum -&amp;gt;                        &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
      case (model.id, model.artistId) of
        (Just albumId, Just artistId) -&amp;gt;
          ( model
          , updateAlbum (Album albumId model.name artistId (createTracks model.tracks)) HandleSaved
          )
        (Nothing, Just artistId) -&amp;gt;
          ( model
          , createAlbum { name = model.name
                          , artistId = artistId
                          , tracks = (createTracks model.tracks)
                          } HandleSaved
          )
        (_, _) -&amp;gt;
          Debug.crash &quot;Missing artist.id, needs to be handled by validation&quot;


    HandleSaved maybeAlbum -&amp;gt;          &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
      case maybeAlbum of
        Just album -&amp;gt;
          ( createAlbumModel model album
          , Effects.map (\_ -&amp;gt; NoOp) (Routes.redirect &amp;lt;| Routes.ArtistDetailPage album.artistId)
          )

        Nothing -&amp;gt;
          Debug.crash &quot;Save failed... we&apos;re not handling it...&quot;

    RemoveTrack id -&amp;gt;                  &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
      ( { model | tracks = List.filter (\( rowId, _ ) -&amp;gt; rowId /= id) model.tracks }
      , Effects.none
      )

    MoveTrackUp id -&amp;gt;                  &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
      let
        track =
          ListX.find (\( rowId, _ ) -&amp;gt; rowId == id) model.tracks
      in
        case track of
          Nothing -&amp;gt;
            ( model, Effects.none )

          Just t -&amp;gt;
            ( { model | tracks = moveUp model.tracks t }
            , Effects.none
            )

    MoveTrackDown id -&amp;gt;                &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
      let
        track =
          ListX.find (\( rowId, _ ) -&amp;gt; rowId == id) model.tracks

        mayMoveDown t =
          let
            idx =
              ListX.elemIndex t model.tracks
          in
            case idx of
              Nothing -&amp;gt;
                False

              Just i -&amp;gt;
                i &amp;lt; ((List.length model.tracks) - 2)
      in
        case track of
          Nothing -&amp;gt;
            ( model, Effects.none )

          Just t -&amp;gt;
            ( { model
                | tracks =
                    if (mayMoveDown t) then
                      moveDown model.tracks t
                    else
                      model.tracks
              }
            , Effects.none
            )

    ModifyTrack id trackRowAction -&amp;gt;  &lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;
      let
        updateTrack ( trackId, trackModel ) =
          if trackId == id then
            ( trackId, TrackRow.update trackRowAction trackModel )
          else
            ( trackId, trackModel )
      in
        ( maybeAddPristine { model | tracks = List.map updateTrack model.tracks }
        , Effects.none
        )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When we mount the route for an existing album, we need to retrieve both the album and
all artists (for the artist dropdown). To do both in one go we can use &lt;code&gt;Effects.batch&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We use the album param to differntiate between &quot;update&quot; and &quot;new&quot; mode for albums. If show album is called with an album we update our inital model with the information
contained in the given album (this also involves initating TrackRow.models for each album track.
If there is no album, we just add an empty track row and the initiate the retrieval of artists for the artists dropdown.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Once artists are retrieved we update our model to hold these&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This action is executed when the user changes the value of the name field&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The save action either calls update or create in the server api based on whether the model has an albumId or not.
In both instances it needs to convert the model to an Album/AlbumRequest as this is what the signature of the ServerApi functions require&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A successful save will give an Album type back, we update the model and in this instance we
also redirect the user to the artist detail page.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This action is called when the user clicks on the remove button for a track row. We&amp;#8217;ll get back to this when
in just a little while&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Action to move a track one step up in the track listing. If it&amp;#8217;s already at the top
it&amp;#8217;s a no op. The &quot;heavy&quot; lifting is done in the &lt;code&gt;moveUp&lt;/code&gt; generic helper function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Similar to &lt;code&gt;MoveTrackUp&lt;/code&gt; but it has addtional logic to ensure we don&amp;#8217;t move a track below the
always present empty (Pristine) row in the track listing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The ModifyTrack action forwards to the update function for the TrackRow in question. Each track row is
tagged with an Id (TrackRowId)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_the_view&quot;&gt;The view&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html                                  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
view address model =
  div
    []
    [ h1 [] [ text &amp;lt;| pageTitle model ]
    , Html.form
        [ class &quot;form-horizontal&quot; ]
        [ div
            [ class &quot;form-group&quot; ]
            [ label [ class &quot;col-sm-2 control-label&quot; ] [ text &quot;Name&quot; ]
            , div
                [ class &quot;col-sm-10&quot; ]
                [ input
                    [ class &quot;form-control&quot;
                    , value model.name
                    , on &quot;input&quot; targetValue (\str -&amp;gt; Signal.message address (SetAlbumName str))
                    ]
                    []
                ]
            ]
        , ( artistDropDown address model )
        , div
            [ class &quot;form-group&quot; ]
            [ div
                [ class &quot;col-sm-offset-2 col-sm-10&quot; ]
                [ button
                    [ class &quot;btn btn-default&quot;
                    , type&apos; &quot;button&quot;
                    , onClick address SaveAlbum
                    ]
                    [ text &quot;Save&quot; ]
                ]
            ]
        ]
    , h2 [] [ text &quot;Tracks&quot; ]
    , trackListing address model
    ]


artistDropDown : Signal.Address Action -&amp;gt; Model -&amp;gt; Html                        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
artistDropDown address model =
  let
    val =
      Maybe.withDefault (-1) model.artistId

    opt a =
        option [ value &amp;lt;| toString a.id, selected (a.id == val) ] [ text a.name ]
  in
    div
      [ class &quot;form-group&quot; ]
      [ label [ class &quot;col-sm-2 control-label&quot; ] [ text &quot;Artist&quot; ]
      , div
          [ class &quot;col-sm-10&quot; ]
          [ select
              [ class &quot;form-control&quot; ]
              (List.map opt model.artists)
          ]
      ]


trackListing : Signal.Address Action -&amp;gt; Model -&amp;gt; Html                          &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
trackListing address model =
  table
    [ class &quot;table table-striped&quot; ]
    [ thead
        []
        [ tr
            []
            [ th [] []
            , th [] []
            , th [] [ text &quot;Name&quot; ]
            , th [] [ text &quot;Duration&quot; ]
            , th [] []
            ]
        ]
    , tbody [] (List.map (trackRow address) model.tracks)
    ]


trackRow : Signal.Address Action -&amp;gt; ( TrackRowId, TrackRow.Model ) -&amp;gt; Html    &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
trackRow address ( id, rowModel ) =
  let
    context =
      TrackRow.Context
        (Signal.forwardTo address (ModifyTrack id))
        (Signal.forwardTo address (always (RemoveTrack id)))
        (Signal.forwardTo address (always (MoveTrackUp id)))
        (Signal.forwardTo address (always (MoveTrackDown id)))
  in
    TrackRow.view context rowModel&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The view function for the page.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The artist dropdown (a github star for the observant reader that can spot what&amp;#8217;s missing :-) )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Generates the track listing for the album&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The rendering of each individual TrackRow is forwarded to the TrackRow module. We pass on a
context so that a TrackRow is able to &quot;signal back&quot; to the AlbumDetails page for the actions
that are owned by AlbumDetails (RemoveTrack, MoveTrackUp and MoveTrackDown). You&amp;#8217;ll see how that
plays out when we look at the TrackRow implementation in the next secion.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Why the context thingie ?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well we can&amp;#8217;t have the AlbumDetails depending on TrackRows and the TrackRow component having a dependency
back to AlbumDetails. To solve that we pass on the tagged forwarding addresses so that TrackRows can signal
AlbumDetails with the appropriate actions. I guess you can sort of think of them as callbacks, but it&amp;#8217;s not quite that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another slightly more elaborate explantion might be that when a user performs something on a track row that
we capture (say a click on the remove button). The view from the track row returns a signal (wrapped as an effect) to album details which
in turn returns a signal back to main. The signal is processed by the startapp &quot;event-loop&quot; and flows back through
the update functions (main &amp;#8594; AlbumDetails) and since it&amp;#8217;s tagged to as an action to be handled by AlbumDetails is handled
in AlbumDetails update function (and doesn&amp;#8217;t flow further.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clear as mud or perhaps it makes sort of sense ?&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_track_row&quot;&gt;Track row&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_types_2&quot;&gt;Types&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Model =                        &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { name : String
  , durationMin : Maybe Int
  , durationSec : Maybe Int
  , status : Status
  }


type alias Context =                      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  { actions : Signal.Address Action
  , remove : Signal.Address ()
  , moveUp : Signal.Address ()
  , moveDown : Signal.Address ()
  }


type Status                               &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  = Saved
  | Modified
  | Error
  | Pristine                              &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;


type Action                               &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  = SetTrackName String
  | SetMinutes String
  | SetSeconds String&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The model captures information about an album track. Duration is separated into
minutes and seconds to be more presentable and easier for the user to input. In addition
we have a status flag to be able to give the user feedback and handle some conditional logic.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here you see the type definition for the Context we previously mentioned we used in the when
forwarding view rendering for each individual track row in the Album Details page. (Btw it could be any
component as long as they pass on a context with the given signature of Context).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The possible status types a row can be in.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Prisitine has a special meaning in the track listing in AlbumDetails. It should always be just one and it should be the last row.
However that&amp;#8217;s not the responsibility of TrackRow. TrackRow should just ensure the status is correct at all times.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The possible actions that TrackRow handles internally&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_update_function&quot;&gt;Update function&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;update : Action -&amp;gt; Model -&amp;gt; Model
update action model =
  case action of
    SetTrackName v -&amp;gt;        &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      { model | name = v, status = Modified }

    SetMinutes str -&amp;gt;        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      let
        maybeMinutes = Result.toMaybe &amp;lt;| String.toInt str
      in
        case maybeMinutes of
          Just m -&amp;gt;
            { model | durationMin = maybeMinutes, status = Modified }

          Nothing -&amp;gt;
            if String.isEmpty str then
              { model | durationMin = Nothing, status = Modified}
            else
              model


    SetSeconds str -&amp;gt;        &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      let
        maybeSeconds = Result.toMaybe &amp;lt;| String.toInt str
      in
        case maybeSeconds of
          Just m -&amp;gt;
            if m &amp;lt; 60 then
              { model | durationSec = maybeSeconds, status = Modified }
            else
              model

          Nothing -&amp;gt;
            if String.isEmpty str then
              { model | durationSec = Nothing, status = Modified}
            else
              model&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Updates the trackname model property when user inputs into the trackname field&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Updates the minutes property if a valid number is entered. Also blanks the field
when the text input field becomes empty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Similar to minutes, but also ensures that you don&amp;#8217;t enter more than 59 !&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_view&quot;&gt;View&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll only show parts of the view to limit the amount of code you need to scan through.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;view : Context -&amp;gt; Model -&amp;gt; Html
view context model =
  tr
    []
    [ td [] [ statusView model ]
    , td [] [ moveView context model ]
    , td [] [ nameView context model ]
    , td [] [ durationView context model ]
    , td [] [ removeView context model ]
    ]


nameView : Context -&amp;gt; Model -&amp;gt; Html
nameView context model =
  input
    [ class &quot;form-control&quot;
    , value model.name
    , on &quot;input&quot; targetValue (\str -&amp;gt; Signal.message context.actions (SetTrackName str))  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    ]
    []


removeView : Context -&amp;gt; Model -&amp;gt; Html
removeView context model =
  button
    [ onClick context.remove ()                                                           &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    , class &amp;lt;| &quot;btn btn-sm btn-danger &quot; ++ if isPristine model then &quot;disabled&quot; else &quot;&quot;
    ]
    [ text &quot;Remove&quot; ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When a user causes an input event on the name input field we create a message using the address in context.actions with action SetTrackName
So this message will cause an update eventually forwarded to the update function of TrackRow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When a user clicks on the remove button we use the address given by context.remove with a payload of () (ie void).
This message will always be forwarded to the address for AlbumDetails with the payload set to &lt;code&gt;RemoveTrack&lt;/code&gt; with the given track row id.
All of which TrackRow is blissfully unaware of.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_main_elm_wiring_it_all_up&quot;&gt;Main.elm wiring it all up&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Model =
  WithRoute
    Routes.Route
    { --....
    , albumDetailModel : AlbumDetail.Model
    }


type Action
  = NoOp
  -- ...
  | AlbumDetailAction AlbumDetail.Action
  | RouterAction (TransitRouter.Action Routes.Route)


initialModel =
  { transitRouter = TransitRouter.empty Routes.EmptyRoute
  -- ...
  , albumDetailModel = AlbumDetail.init
  }


mountRoute prevRoute route model =
  case route of
    -- ...

    AlbumDetailPage albumId -&amp;gt;         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      let
        (model&apos;, effects) =
          AlbumDetail.update (AlbumDetail.GetAlbum albumId) AlbumDetail.init
      in
        ( { model | albumDetailModel = model&apos; }
        , Effects.map AlbumDetailAction effects)


    NewArtistAlbumPage artistId -&amp;gt;     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      let
        (model&apos;, effects) =
          AlbumDetail.update (AlbumDetail.ShowAlbum Nothing) (AlbumDetail.initForArtist artistId)
      in
        ( { model | albumDetailModel = model&apos; }
        , Effects.map AlbumDetailAction effects)

    -- ...


update action model =
  case action of
    -- ..

    AlbumDetailAction act -&amp;gt;           &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      let
        ( model&apos;, effects ) =
          AlbumDetail.update act model.albumDetailModel
      in
        ( { model | albumDetailModel = model&apos; }
        , Effects.map AlbumDetailAction effects
        )

    -- ..&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When we mount the route for the AlbumDetailsPage (&quot;/albums/:albumId&quot;) we call the
update function of AlbuDetail with a &lt;code&gt;GetAlbum&lt;/code&gt; action. You might remember that this in turn calls the functions
for retrieving an Album and the function for retrieving artists as a batch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When the user performs an action that results in the NewArtistAlbumPage being mounted (&quot;/artists/:artistId/albums/new&quot;)
, we call the update on AlbumDetail with &lt;code&gt;ShowAlbum&lt;/code&gt; action and a reinitialized model where artistId is set.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In the update function of Main we forward any actions particular to AlbumDetail&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_frontend_summary&quot;&gt;Frontend summary&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Working with the frontend code in Elm has been mostly plain sailing. I struggled a bit to get
all my ducks(/effects) in a row and I&amp;#8217;m not too happy with some of the interactions related to new vs update.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately the elm-reactor isn&amp;#8217;t working all that well with 0.16, certainly not on my machine.
It also doesn&amp;#8217;t work particularily well with single page apps that changes the url. I looked at and tried a couple of
alternatives and settled on using &lt;a href=&quot;https://github.com/maxgurewitz/elm-server&quot;&gt;elm-server&lt;/a&gt;. I had to make some modifications
to make it work nicely with an SPA. I submitted a PR that seems to work nicely for my use case atleast.
With that in place, the roundtrip from change to feedback became very schneizz indeed !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Undoubtably there is quite a bit that feels like boiler plate. The addition of routing also introduces yet another thing you have
to keep in mind in several places. Boilerplate it might be, but it&amp;#8217;s also quite explicit.  I would imagine that in a large app you might grow a bit weary of some of the boilerplate and start looking for ways to reduce it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;d be lying if I said I&amp;#8217;ve fully grasped; signals, tasks, ports, effects and mailboxes. But it&amp;#8217;s gradually becoming clearer
and it&amp;#8217;s very nice that you can produce pretty cool things without investing to much up front.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_concluding_remarks&quot;&gt;Concluding remarks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I utterly failed to make a shorter blog post yet again. To my defence, the default formatting of Elm
do favor newlines bigtime. Most of the Elm code has been formatted by &lt;a href=&quot;https://github.com/avh4/elm-format&quot;&gt;elm-format&lt;/a&gt; btw.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m really starting to see the benefits of statically (strongly) typed functional languages. The journey
so far has been a massive learing experience. Heck this stuff has been so much fun, I ended up taking a day off work so that
I could work on this for a whole day with most of my good brain cells still at acceptable performance levels.
Shame I can&amp;#8217;t use this stuff at work, but I&amp;#8217;m starting to accumulate quite a substantial collection of selling points.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Whats next ?&lt;/div&gt;
&lt;p&gt;The sample app has started to accumulate quite a bit of technical dept, so I suppose the next episode(s)
should start to address some of that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Typed up CRUD SPA with Haskell and Elm - Part 3: Routing</title>
        <link>http://rundis.github.io/blog/2016/haskel_elm_spa_part3.html</link>
        <pubDate>Tue, 19 Jan 2016 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2016/haskel_elm_spa_part3.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any serious Single Page Application needs to have routing. Right ? So before we add
any further pages it&amp;#8217;s time to add routing support to the Elm frontend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;http://rundis.github.io/blog/2016/haskel_elm_spa_part2.html&quot;&gt;episode 2&lt;/a&gt;, we implemented
a Micky Mouse solution for page routing. Clearly that approach won&amp;#8217;t scale. Now is a good time to
implement something that can handle multiple pages, history navigation, direct linking etc.
We could do it all from scratch, but lets opt for pulling in a library.
In this episode we&amp;#8217;ll introduce &lt;a href=&quot;https://github.com/etaque/elm-transit-router&quot;&gt;elm-transit-router&lt;/a&gt;
to the &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;Albums&lt;/a&gt; sample application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Useful resources&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check out the other &lt;a href=&quot;http://rundis.github.io/blog/tags/haskellelmspa.html&quot;&gt;episodes&lt;/a&gt; in this blog series.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The accompanying &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;Albums&lt;/a&gt; sample app is on github, and there is a tag
for each episode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I decided pretty early on to try out the &lt;a href=&quot;https://github.com/etaque/elm-transit-router&quot;&gt;elm-transit-router&lt;/a&gt; library.
It seemed to cover most of what I was looking for. It even has some pretty cool support for animations when doing page transitions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Static typing is supposed to be really helpful when doing refactoring. Introducing routing should be a nice little excercise to
see if that holds. Remember, there still isn&amp;#8217;t a single test in our sample app, so it better hold.
The elm-transit-router library github repo contains a great example app that proved very helpful
in getting it up and running for the Albums app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;a href=&quot;https://github.com/sporto/hop&quot;&gt;Hop&lt;/a&gt; is an alternative routing library you might want to check out too.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/5o4sAxnk3U4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_implementation_changes&quot;&gt;Implementation changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/elm-package.json&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  // (...
  &quot;source-directories&quot;: [
        &quot;.&quot;,
        &quot;src/&quot;                                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    ],

  // ...
  &quot;dependencies&quot;: {
    //... others ommitted
    &quot;etaque/elm-route-parser&quot;: &quot;2.1.0 &amp;lt;= v &amp;lt; 3.0.0&quot;,       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &quot;etaque/elm-transit-style&quot;: &quot;1.0.1 &amp;lt;= v &amp;lt; 2.0.0&quot;,      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &quot;etaque/elm-transit-router&quot;: &quot;1.0.1 &amp;lt;= v &amp;lt; 2.0.0&quot;      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

  }
  ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;ve moved all elm files but Main.elm to the a src sub directory. So we need to add src to the list of source directories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A typed route parser with a nice DSL in Elm: We use it for defining our routes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Html animations for &lt;a href=&quot;https://github.com/etaque/elm-transit&quot;&gt;elm-transit&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Drop-in router with animated route transitions for single page apps in Elm. Drop in, as in fitting very nicely with &lt;a href=&quot;https://github.com/evancz/start-app&quot;&gt;elm start-app&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Album dependencies&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;http://rundis.github.io/blog/2016/albums_dependencies_large.png&quot;&gt;&lt;img src=&quot;http://rundis.github.io/blog/2016/albums_dependencies_small.png&quot; alt=&quot;Click for larger diagram&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The addition of the 3 new dependencies also adds quite a few transitive dependencies. The diagram
above is automatically generated by the &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;elm-light&lt;/a&gt; plugin for Light Table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Defining routes (frontend/src/Routes.elm)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Route                                                   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  = Home
  | ArtistListingPage
  | ArtistDetailPage Int
  | NewArtistPage
  | EmptyRoute


routeParsers : List (Matcher Route)
routeParsers =
  [ static Home &quot;/&quot;                                         &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  , static ArtistListingPage &quot;/artists&quot;
  , static NewArtistPage &quot;/artists/new&quot;
  , dyn1 ArtistDetailPage &quot;/artists/&quot; int &quot;&quot;                &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  ]


decode : String -&amp;gt; Route
decode path =                                               &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  RouteParser.match routeParsers path
    |&amp;gt; Maybe.withDefault EmptyRoute


encode : Route -&amp;gt; String
encode route =                                              &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  case route of
    Home -&amp;gt; &quot;/&quot;
    ArtistListingPage   -&amp;gt; &quot;/artists&quot;
    NewArtistPage       -&amp;gt; &quot;/artists/new&quot;
    ArtistDetailPage  i -&amp;gt; &quot;/artists/&quot; ++ toString i
    EmptyRoute -&amp;gt; &quot;&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Union type that defines the different routes for the application&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A static route matcher (&lt;code&gt;static&lt;/code&gt; is a function from the RouteParser dsl)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Dynamic route matcher with one dynamic param&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We try to match a given path with the route matchers defined above. Returns route of first successful match, or the &lt;code&gt;EmptyRoute&lt;/code&gt; route
if no match is found.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Encode a given route as a path&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A few handy router utils (frontend/src/Routes.elm)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;redirect : Route -&amp;gt; Effects ()
redirect route =                                       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  encode route
    |&amp;gt; Signal.send TransitRouter.pushPathAddress
    |&amp;gt; Effects.task


clickAttr : Route -&amp;gt; Attribute
clickAttr route =                                     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  on &quot;click&quot; Json.value (\_ -&amp;gt;  Signal.message TransitRouter.pushPathAddress &amp;lt;| encode route)


linkAttrs : Route -&amp;gt; List Attribute
linkAttrs route =                                     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  let
    path = encode route
  in
    [ href path
    , onWithOptions
        &quot;click&quot;
        { stopPropagation = True, preventDefault = True }
        Json.value
        (\_ -&amp;gt;  Signal.message TransitRouter.pushPathAddress path)
    ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This function allows us to perform routing through a redirect kind of effect. Comes in handy when we need to switch
routes as a result of performing a task or doing an update action of some sort.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Helper function that creates a click handler attribute. When clicked the signal is forwarded to an address of the internal mailbox for the
elm-transit-router library. By means of delegation the internal TransitRouter.Action type is wrapped into our app&amp;#8217;s Action type.
We&amp;#8217;ll get back to this when we wire it all together !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Another helper function, similar to clickAttr, but this is more specific for links that also has a href attribute&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_changes_in_main_elm&quot;&gt;Changes in Main.elm&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Too hook in elm-transit-router we need to make a couple of changes to how we wire up our model, actions, view and update function.
It&amp;#8217;s also worth noting that from episode 2 have removed all direct update delegation from ArtistListing to ArtistDetail, this now
all will happen through route transitions. An immediate benefit of that is that the ArtistDetail page becomes much more reusable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Model, actions, transitions and initialization&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Model = WithRoute Routes.Route                                &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { homeModel : Home.Model
  , artistListingModel : ArtistListing.Model
  , artistDetailModel : ArtistDetail.Model
  }


type Action =
    NoOp
  | HomeAction Home.Action
  | ArtistListingAction ArtistListing.Action
  | ArtistDetailAction ArtistDetail.Action
  | RouterAction (TransitRouter.Action Routes.Route)                    &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;


initialModel : Model
initialModel =
  { transitRouter = TransitRouter.empty Routes.EmptyRoute               &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  , homeModel = Home.init
  , artistListingModel = ArtistListing.init
  , artistDetailModel = ArtistDetail.init
  }


actions : Signal Action
actions =
  Signal.map RouterAction TransitRouter.actions                         &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;


mountRoute : Route -&amp;gt; Route -&amp;gt; Model -&amp;gt; (Model, Effects Action)
mountRoute prevRoute route model =                                      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  case route of

    Home -&amp;gt;
      (model, Effects.none)

    ArtistListingPage -&amp;gt;                                                &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
      (model, Effects.map ArtistListingAction (ServerApi.getArtists ArtistListing.HandleArtistsRetrieved))

    ArtistDetailPage artistId -&amp;gt;
      (model, Effects.map ArtistDetailAction (ServerApi.getArtist artistId ArtistDetail.ShowArtist))

    NewArtistPage -&amp;gt;
      ({ model | artistDetailModel = ArtistDetail.init } , Effects.none)

    EmptyRoute -&amp;gt;
      (model, Effects.none)


routerConfig : TransitRouter.Config Routes.Route Action Model
routerConfig =                                                          &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
  { mountRoute = mountRoute
  , getDurations = \_ _ _ -&amp;gt; (50, 200)
  , actionWrapper = RouterAction
  , routeDecoder = Routes.decode
  }


init : String -&amp;gt; (Model, Effects Action)
init path =                                                             &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
  TransitRouter.init routerConfig path initialModel&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We extend our model using &lt;code&gt;WithRoute&lt;/code&gt; for our Route type in routes. This extends our type with a transitRouter property&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We add a RouteAction to our Action type. We will handle that explicitly in the update function we&amp;#8217;ll cover in the next section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We define an initial model, which has the initial models for the various pages. In addition we initialize the transitRouter property
with an empty state and EmptyRoute route (that didn&amp;#8217;t read to well). Basically a route that shouldn&amp;#8217;t render anything, because it will transition
to an actual route. It&amp;#8217;s just an intermediary&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Transformer for mapping TransitRouter actions to our own RouterAction. This allows start-app to map external input signals to inputs with an action type our application
can recognize and process.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;mountRoute is a function that provides what we want to happen in our &lt;code&gt;update&lt;/code&gt; when a new route is mounted. Currently we
only pattern match on route to be mounted, but we could also match on the combination of previous route and new route to provide
custom behaviour depending on where you came from and where your are going to. Very powerful !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When the ArtistListingPage route is mounted we return an effect to retrieve artists (when that effect returns the &lt;code&gt;ArtistListing.HandleArtistRetrieved&lt;/code&gt; action is then eventually passed to the update function of ArtistListing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;routerConfig&lt;/code&gt; wires together the various bits that TransitRouter needs to do it&amp;#8217;s thing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The init function now just initializes the TransitRouter with our config, and initial path (which we receive from a port) and our Initial model&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s quite a bit going on here, but once this is all in place, adding new routes is quite a breeze. I&amp;#8217;d recommend reading
through the Readme for &lt;a href=&quot;https://github.com/etaque/elm-transit-router&quot;&gt;elm-transit-router&lt;/a&gt; to understand more about the details of each step&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The update function&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;update : Action -&amp;gt; Model -&amp;gt; (Model, Effects Action)
update action model =
  case action of

    NoOp -&amp;gt;
      (model, Effects.none)

    HomeAction homeAction -&amp;gt;
      let (model&apos;, effects) = Home.update homeAction model.homeModel
      in ( { model | homeModel = model&apos; }
         , Effects.map HomeAction effects )

    ArtistListingAction act -&amp;gt;                                                       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      let (model&apos;, effects) = ArtistListing.update act model.artistListingModel
      in ( { model | artistListingModel = model&apos; }
         , Effects.map ArtistListingAction effects )

    ArtistDetailAction act -&amp;gt;                                                        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      let (model&apos;, effects) = ArtistDetail.update act model.artistDetailModel
      in ( { model | artistDetailModel = model&apos; }
         , Effects.map ArtistDetailAction effects )

    RouterAction routeAction -&amp;gt;                                                      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      TransitRouter.update routerConfig routeAction model&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;You should recognize this pattern from the previous episode. We delegate all actions tagged with ArtistListingAction
to the update function for ArtistListing. The we update the model with the updated model from ArtistListing and
map any effects returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If you remember from &lt;a href=&quot;http://rundis.github.io/blog/2016/haskel_elm_spa_part2.html&quot;&gt;episode 2&lt;/a&gt; this used to reside in ArtistListing, but
has been moved here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;RouterAction&lt;/code&gt; action types are handled by the update function in TransitRouter. If you Debug.log this function you will see this
is called repeadly when there is a transition from one route to the next. (To handle the animation effects most notably)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The main view/layout&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;menu : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
menu address model =                                                       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  header [class &quot;navbar navbar-default&quot;] [
    div [class &quot;container&quot;] [
        div [class &quot;navbar-header&quot;] [
          div [ class &quot;navbar-brand&quot; ] [
            a (linkAttrs Home) [ text &quot;Albums galore&quot; ]
          ]
        ]
      , ul [class &quot;nav navbar-nav&quot;] [
          li [] [a (linkAttrs ArtistListingPage) [ text &quot;Artists&quot; ]]       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      ]
    ]
  ]



contentView : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
contentView address model =                                                &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  case (TransitRouter.getRoute model) of
    Home -&amp;gt;
      Home.view (Signal.forwardTo address HomeAction) model.homeModel

    ArtistListingPage -&amp;gt;                                                   &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
      ArtistListing.view (Signal.forwardTo address ArtistListingAction) model.artistListingModel

    ArtistDetailPage i -&amp;gt;
      ArtistDetail.view (Signal.forwardTo address ArtistDetailAction) model.artistDetailModel

    NewArtistPage  -&amp;gt;
      ArtistDetail.view (Signal.forwardTo address ArtistDetailAction) model.artistDetailModel

    EmptyRoute -&amp;gt;
      text &quot;Empty WHAT ?&quot;


view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =
  div [class &quot;container-fluid&quot;] [
      menu address model
    , div [ class &quot;content&quot;
          , style (TransitStyle.fadeSlideLeft 100 (getTransition model))]  &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
          [contentView address model]
  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Menu view function for the app&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here we use the &lt;code&gt;linkAttrs&lt;/code&gt; util function from Routes.elm to get a click handler. When the link is click
a route transition to the given page will occur (with addressbar update, history tracking and the whole shebang)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We render the appropriate main content view based which route is current in our model.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Getting the view for a page is used in the typical start-app way. Call the view function of the sub component and make sure
to provide a forwarding addres that main can handle in its update function !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We define the route transition animation using the style attribute (function) in elm-html. Here we use a transition style
defined in &lt;a href=&quot;https://github.com/etaque/elm-transit-style&quot;&gt;elm-transit-style&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_how_to_navigate_from_one_page_to_another&quot;&gt;How to navigate from one page to another ?&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Move from artistlisting to artistdetail (frontend/src/ArtistListing.elm)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;artistRow : Signal.Address Action -&amp;gt; Artist -&amp;gt; Html
artistRow address artist =
  tr [] [
     td [] [text artist.name]
    ,td [] [button [ Routes.clickAttr &amp;lt;| Routes.ArtistDetailPage artist.id ] [text &quot;Edit&quot;]]  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    ,td [] [button [ onClick address (DeleteArtist (.id artist))] [ text &quot;Delete!&quot; ]]
  ]


view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =
  div [] [
      h1 [] [text &quot;Artists&quot; ]
    , button [
            class &quot;pull-right btn btn-default&quot;
          , Routes.clickAttr Routes.NewArtistPage                                            &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        ]
        [text &quot;New Artist&quot;]
    , table [class &quot;table table-striped&quot;] [
          thead [] [
            tr [] [
               th [] [text &quot;Name&quot;]
              ,th [] []
              ,th [] []
          ]
        ]
        , tbody [] (List.map (artistRow address) model.artists)
    ]
  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For navigation using links we just use the util function &lt;code&gt;Routes.clickAttr&lt;/code&gt; function we defined earlier. This will trigger the necessary
route transition to the appropriate page (with params as necessary)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;It&amp;#8217;s worth noting that we since episode 2 have introduced a separate route for handling NewArtist (&lt;code&gt;/artists/new&lt;/code&gt;). We are still
using the same behaviour otherwise, so it&amp;#8217;s just a minor modification to have a separate transition for a new artist (since that doesn&amp;#8217;t have a numeric id as part of its route path)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Move to the artist listing after saving an artist (frontend/src/ArtistDetail.elm)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;  -- ... inside update function

  HandleSaved maybeArtist -&amp;gt;
      case maybeArtist of
        Just artist -&amp;gt;
          ({ model | id = Just artist.id
                   , name = artist.name }
            , Effects.map (\_ -&amp;gt; NoOp) (Routes.redirect Routes.ArtistListingPage)   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
          )

        Nothing -&amp;gt;
          Debug.crash &quot;Save failed... we&apos;re not handling it...&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We use the &lt;code&gt;Routes.redirect&lt;/code&gt; function we defined earlier. When the task fro saving is completed we trigger an effect
that will transtion route to the ArtistListing page. To allow the effect to work in our update function we need to map it to
an action that ArtistDetail knows about (we don&amp;#8217;t have access to the RouterAction in main here!). That&amp;#8217;s why we map the effect
to a NoOp action.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the_final_wiring&quot;&gt;The final wiring&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/main.elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;app : StartApp.App Model
app =
  StartApp.start
    { init = init initialPath                  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    , update = update
    , view = view
    , inputs = [actions]                       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }


main : Signal Html
main =
  app.html


port tasks : Signal (Task.Task Never ())
port tasks =
  app.tasks


port initialPath : String                      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We call the init function previously defined with a initialPath (which we get from a port, see 3 below)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The inputs fields of the start-app config is for external signals. We wire it to our &lt;code&gt;actions&lt;/code&gt; defintion defined earlier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We get the initialPath through a port from JavaScript. See the next section for how&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Initially I forgot to wire up the inputs. The net result of that was that none of the links actually did anything.
Was lost for a while there, but the author of elm-transit-router &lt;a href=&quot;https://github.com/etaque&quot;&gt;etaque&lt;/a&gt; was able to spot it easily
when I reached out in the &lt;a href=&quot;http://elmlang.herokuapp.com/&quot;&gt;elm-lang slack channel&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/index.html&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Albums&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;assets/css/bootstrap.min.css&quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;main.js&quot;&amp;gt;&amp;lt;/script&amp;gt;                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;/_reactor/debug.js&quot;&amp;gt;&amp;lt;/script&amp;gt;      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      var main = Elm.fullscreen(Elm.Main, {initialPath: &quot;/&quot;});             &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &amp;lt;/script&amp;gt;

  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is the transpiled elm to js for our frontend app&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We don&amp;#8217;t really need this one, but if reactor in debug mode had worked with ports this would be necessary for debug tracing etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We start our elm app with an input param for our initialPath. This is sent to the port defined above. It&amp;#8217;s currently hardcoded to &lt;code&gt;/&lt;/code&gt; (home), but
once we move to a proper web server we would probably use something like window.location.pathname to allow linking directly to
a specific route within our Single Page App.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary_and_next_steps&quot;&gt;Summary and next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was an all Elm episode. Hopefully I didn&amp;#8217;t loose all Haskellites along the way because of that. We&amp;#8217;ve added a crucial
feature for any Single Page (Web) Application in this episode. The end result was pretty neat and tidy too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So how was the refactoring experience this time ? Well the compiler was certainly my best buddy along the way. Obviously I also
had to consult the documentation of elm-transit-router quite often. i had a few times where things appeared to be compiling fine
in Light Table, but actually there was some error in a Module referred by Main. I&amp;#8217;m not sure if it&amp;#8217;s make&amp;#8217;s fault or just that there is
something missing in the elm-light plugin. I&amp;#8217;ll certainly look into that. Always handy to have the command line available when you&amp;#8217;re
not sure about whether your IDE/Editor is tripping you up or not. I don&amp;#8217;t think tests would have caught many of the issues I encountered.
Forgetting to wire up inputs to startapp was probably my biggest blunder, and I&amp;#8217;m sure no test would have covered that. I needed to know that this
was something I had to wire up for it to work. RTFM etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next up I think we will look at how much effort there is to add additional features. The hypothesis is that it should be
fairly straighforward, but who knows !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Typed up CRUD SPA with Haskell and Elm - Part 2: Persistence up and running</title>
        <link>http://rundis.github.io/blog/2016/haskel_elm_spa_part2.html</link>
        <pubDate>Thu, 14 Jan 2016 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2016/haskel_elm_spa_part2.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My journey into Elm and Haskell continues. It&amp;#8217;s time to add database support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since &lt;a href=&quot;http://rundis.github.io/blog/2015/haskell_elm_spa_part1.html&quot;&gt;episode 1&lt;/a&gt; I&amp;#8217;ve
managed to implement simple CRUD features for the Artist entity of the &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;Albums&lt;/a&gt; sample application.
It&amp;#8217;s been anything but plain sailing, but it&amp;#8217;s been a blast so far. Trying to wrap my head around two
new languages and their libraries in parallell is somewhat daunting. The journey would probably
have been smoother if I took more time to learn the language proper. Learning by doing is at times
frustrating, at the same time very rewarding when stuff finally works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There seems to be a pretty close correlation between &lt;strong&gt;it compiles&lt;/strong&gt; and &lt;strong&gt;it works&lt;/strong&gt; when programming
in Elm and Haskell&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Magnus&lt;br&gt;
&lt;cite&gt;(yeah I know; correlation does not imply causation)&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_backend&quot;&gt;Backend&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_adding_cors_support&quot;&gt;Adding cors support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_enter_sqlite&quot;&gt;Enter SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_backend_summary&quot;&gt;Backend summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_frontend&quot;&gt;Frontend&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_frontend_summary&quot;&gt;Frontend summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_conclusion_and_next_steps&quot;&gt;Conclusion and next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_overview&quot;&gt;Overview&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Useful resources&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check out the other &lt;a href=&quot;http://rundis.github.io/blog/tags/haskellelmspa.html&quot;&gt;episodes&lt;/a&gt; in this blog series.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The accompanying &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;Albums&lt;/a&gt; sample app is on github, and there is a tag
for each episode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;So what have I done for this episode ?&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added persistence support to the haskell/servant backend server using &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REST API now supports POST, PUT, DELETE and GET (multiple/single) Artists&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Elm frontend has features for listing, deleting, updating and creating new artists&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2016/albumlistingpage.png&quot; alt=&quot;albumlistingpage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve taken a bottom up approach to developing the features. For both the Frontend and the Backend I&amp;#8217;ve
implemented everything in one module. After that I&amp;#8217;ve done pretty substantial refactorings into smaller
modules while letting the respective compilers guide me along the way. So how did that work out ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_backend&quot;&gt;Backend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pretty early on I managed to get &lt;a href=&quot;https://github.com/lukexi/halive&quot;&gt;halive&lt;/a&gt; to start working. Having live recompiling is
really nice and seriously improved my workflow. I have very limited editor support because my editor (&lt;a href=&quot;https://github.com/LightTable/LightTable&quot;&gt;Light Table&lt;/a&gt;)
currently doesn&amp;#8217;t provide much in terms of haskell support. I was almost derailed with developing a Haskell plugin (or making the existing one work), but
managed to keep on track.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_adding_cors_support&quot;&gt;Adding cors support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During development of the spike for the previous episode I used a chrome plugin to get around CORS
restrictions from my browser. Surely this has to be solvable ? Indeed it was, &lt;a href=&quot;https://github.com/larskuhtz/wai-cors&quot;&gt;wai-cors&lt;/a&gt; to the rescue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/albums.cabal&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;  build-depends:
    -- ...
    ,  wai-cors
    -- ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/src/Main.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;;....

import Network.Wai.Middleware.Cors

;....

albumCors :: Middleware
albumCors = cors $ const (Just albumResourcePolicy)                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;


albumResourcePolicy :: CorsResourcePolicy                                       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
albumResourcePolicy =
    CorsResourcePolicy
        { corsOrigins = Nothing -- gives you /*
        , corsMethods = [&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;HEAD&quot;, &quot;OPTION&quot;]
        , corsRequestHeaders = simpleHeaders -- adds &quot;Content-Type&quot; to defaults
        , corsExposedHeaders = Nothing
        , corsMaxAge = Nothing
        , corsVaryOrigin = False
        , corsRequireOrigin = False
        , corsIgnoreFailures = False
        }


main :: IO ()
main = do
  run 8081 $ albumCors $ app                                                    &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define wai cors middleware&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define a cors policy. This one is very lax. You wouldn&amp;#8217;t want to use this for anything public facing as is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Apply the middleware to our app. Now cross origin headers are added and OPTION prefligh requests are supported. Nice&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Cors inspiration harvested from &lt;a href=&quot;https://github.com/nicklawls/lessons&quot; class=&quot;bare&quot;&gt;https://github.com/nicklawls/lessons&lt;/a&gt; btw
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_enter_sqlite&quot;&gt;Enter SQLite&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I looked at a few different options for database support. Most examples and tutorials related
to servant and database usage seems to favor &lt;a href=&quot;http://www.yesodweb.com/book/persistent&quot;&gt;persistent&lt;/a&gt;.
I&amp;#8217;m surely going to have a closer look at that, but my initial impression was that perhaps there was just
a little bit to much going on there. Just a little bit to much &quot;magic&quot; ? Having lost my taste
for ORM&amp;#8217;s in the JVM spehere (hibernate in particular) I wanted to start with something closer to the metal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So to make it a little harder for myself I went for the &lt;a href=&quot;https://github.com/nurpax/sqlite-simple&quot;&gt;sqlite-simple&lt;/a&gt; library.
Pretty happy with the choice so far.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/albums.cabal&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;  build-depends:
    -- ...
    , sqlite-simple
    -- ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/Main.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;{-# LANGUAGE OverloadedStrings #-}
module Main where


import qualified Storage as S                              &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
import qualified Api as A                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
import Network.Wai
import Network.Wai.Handler.Warp
import Servant
import Network.Wai.Middleware.Cors
import Control.Exception (bracket)
import Database.SQLite.Simple as Sql


app :: Sql.Connection -&amp;gt; Application
app conn = serve A.api (A.artistsServer conn)              &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;


testConnect :: IO Sql.Connection
testConnect = Sql.open &quot;:memory:&quot;                          &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;


withTestConnection :: (Sql.Connection -&amp;gt; IO a) -&amp;gt; IO a
withTestConnection cb =                                    &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  withConn $ \conn -&amp;gt; cb conn
  where
    withConn = bracket testConnect Sql.close               &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

{-
  ...
  cors stuff omitted, already covered
-}


main :: IO ()
main = do
  withTestConnection $ \conn -&amp;gt;  do
    S.bootstrapDB conn                                     &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
    run 8081 $ albumCors $ app conn                        &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Module with functions for communication with the Albums database. Only used for bootstrapping with test data in main&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Module that defines the webservice api&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We make sure to pass a connection to our webservice server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For simplicity we are using an in memory database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Wrap a function (cb) giving it a connection and cleaning up when done&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bracket&lt;/code&gt; ensures we also release the connection in case of any exceptions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Creates schema and bootstraps with some sample data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Ensure we pass the connection to our app function&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Read more about the &lt;a href=&quot;https://wiki.haskell.org/Bracket_pattern&quot;&gt;bracket pattern&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/Api.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE DataKinds     #-}

module Api where

import qualified Model as M                           &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
import qualified Storage as S
import Data.Aeson
import Control.Monad.IO.Class     (MonadIO, liftIO)
import Control.Monad.Trans.Either
import Servant
import Database.SQLite.Simple as Sql


instance ToJSON M.Artist
instance FromJSON M.Artist


type ArtistAPI =                                       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
       Get &apos;[JSON] [M.Artist]
  :&amp;lt;|&amp;gt; ReqBody &apos;[JSON] M.Artist :&amp;gt; Post &apos;[JSON] M.Artist
  :&amp;lt;|&amp;gt; Capture &quot;artistId&quot; Int :&amp;gt; Get &apos;[JSON] M.Artist
  :&amp;lt;|&amp;gt; Capture &quot;artistId&quot; Int :&amp;gt; ReqBody &apos;[JSON] M.Artist :&amp;gt; Put &apos;[JSON] M.Artist
  :&amp;lt;|&amp;gt; Capture &quot;artistId&quot; Int :&amp;gt; Delete &apos;[] ()

-- &apos;

artistsServer :: Sql.Connection -&amp;gt; Server ArtistAPI    &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
artistsServer conn =
  getArtists :&amp;lt;|&amp;gt; postArtist :&amp;lt;|&amp;gt; getArtist :&amp;lt;|&amp;gt;  updateArtist :&amp;lt;|&amp;gt; deleteArtist

  where
    getArtists                   = liftIO $ S.findArtists conn     &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    getArtist artistId           = liftIOMaybeToEither err404 $ S.artistById conn artistId
    postArtist artist            = liftIO $ S.newArtist conn artist
    updateArtist artistId artist = liftIO $ S.updateArtist conn artist artistId
    deleteArtist artistId        = liftIO $ S.deleteArtist conn artistId


liftIOMaybeToEither ::  (MonadIO m) =&amp;gt; a -&amp;gt; IO (Maybe b) -&amp;gt; EitherT a m b
liftIOMaybeToEither err x = do                         &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    m &amp;lt;- liftIO x
    case m of
      Nothing -&amp;gt; left err
      Just x -&amp;gt; right x


type API = &quot;artists&quot; :&amp;gt; ArtistAPI


api :: Proxy API
api = Proxy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The record definitions for our API lives in this module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;ve extended the api type defintions from &lt;a href=&quot;http://rundis.github.io/blog/2015/haskell_elm_spa_part1.html#_main_hs&quot;&gt;episode 1&lt;/a&gt;
to define the shape of get multiple, get single, post, put and delete.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Connection has been added as a parameter to our artist server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;liftIO&lt;/code&gt; is a &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Monad_transformers&quot;&gt;monad transformer&lt;/a&gt;. I&amp;#8217;d love to be able to explain
how it works, but well&amp;#8230;&amp;#8203; Anyways net result is that I don&amp;#8217;t have to define &lt;code&gt;EitherT ServantErr IO ..&lt;/code&gt; all over the place&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;liftIOMaybeToEither&lt;/code&gt; - what it says. Handy function to return a servant error (which again maps to a http error) if a function like getArtist doesn&amp;#8217;t return
a result. Tx to ToJans for &lt;a href=&quot;https://gist.github.com/ToJans/233f82087ee7b385e6e1&quot;&gt;inspiration&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
put aka update artist should also return a 404 when a non existing artist id is provided.
Actually, error handling is pretty light throughout, but we&amp;#8217;ll get back to that in a later episode !
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/backend/Model.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;{-# LANGUAGE DeriveGeneric #-}

module Model where

import GHC.Generics

data Artist = Artist                &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { artistId :: Maybe Int           &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  , artistName :: String            &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  } deriving (Eq, Show, Generic)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Moved record defintions to a separate module. Currently just Artist&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Make id optional. This is a quick and dirty way to be able to use the same
record definiton for new artists as for updates and gets.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Names in records are not scoped withing the record so one solution is to manually
make sure names stay unique.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
From what I gather record syntax is a bit clunky in Haskell (atleast when compared to Elm).
This &lt;a href=&quot;http://stackoverflow.com/questions/6922437/haskell-any-way-to-qualify-or-disambiguate-record-names&quot;&gt;stackoverflow post&lt;/a&gt;
didn&amp;#8217;t bring any warm fuzzy feelings. If anyone has some better solutions which also plays
well with the handy servant and SQLite simple functions feel free to leave a comment below !
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/Storage.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;{-# LANGUAGE OverloadedStrings #-}
module Storage where


import qualified Model as M
import qualified Data.Text as Txt


import Database.SQLite.Simple as Sql
import Database.SQLite.Simple.Types as SqlTypes


instance Sql.FromRow M.Artist where                         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  fromRow = M.Artist &amp;lt;$&amp;gt; Sql.field &amp;lt;*&amp;gt; Sql.field



artistById :: Sql.Connection -&amp;gt; Int -&amp;gt; IO (Maybe M.Artist)  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
artistById conn idParam =
  findById conn &quot;artist&quot; idParam :: IO (Maybe M.Artist)


findArtists :: Sql.Connection -&amp;gt; IO [M.Artist]
findArtists conn =
  Sql.query_ conn &quot;select * from artist&quot; :: IO [M.Artist]


newArtist :: Sql.Connection -&amp;gt; M.Artist -&amp;gt; IO M.Artist
newArtist conn artist = do
  Sql.execute conn &quot;insert into artist (name) values (?) &quot; (Sql.Only $ M.artistName artist)
  rawId &amp;lt;- lastInsertRowId conn
  let updArtist = artist { M.artistId = Just (fromIntegral rawId) }  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  return updArtist


-- Really we should check whether the artist exists here
updateArtist :: Sql.Connection -&amp;gt; M.Artist -&amp;gt; Int -&amp;gt; IO M.Artist
updateArtist conn artist idParam = do
  Sql.executeNamed conn &quot;update artist set name = :name where id = :id&quot; params
  return artist { M.artistId = Just idParam }                        &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  where
    params = [&quot;:id&quot; := (idParam :: Int), &quot;:name&quot; := ((M.artistName artist) :: String)]


deleteArtist :: Sql.Connection -&amp;gt; Int -&amp;gt; IO ()
deleteArtist conn idParam =
  Sql.execute conn &quot;delete from artist where id = ?&quot; (Sql.Only idParam)


findById :: (FromRow a) =&amp;gt; Sql.Connection -&amp;gt; String -&amp;gt; Int -&amp;gt; IO (Maybe a)
findById conn table idParam = do
  rows &amp;lt;- Sql.queryNamed conn (createFindByIdQuery table) [&quot;:id&quot; := (idParam :: Int)]
  let result = case (length rows) of
                  0 -&amp;gt; Nothing
                  _ -&amp;gt; Just $ head rows      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

  return result


createFindByIdQuery :: String -&amp;gt; SqlTypes.Query
createFindByIdQuery table =
  SqlTypes.Query $ Txt.pack $ &quot;SELECT * from &quot; ++ table ++ &quot; where id = :id&quot;   &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

-- ... boostrap function left out, check the source repo for details&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define SQLite row converter to create artist records for rows with id and name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Finding an artist by Id may return empty results. Prematurely factored out a generic findById function that is used here&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the id of the newly inserted artist row to the resulting artist. (The Maybe artistId starts to smell)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Yuck, this smells even worse. The decision to support an optional id on the Artist record doesn&amp;#8217;t ring true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Using let allows us to &quot;work inside&quot; the IO monad. Otherwise the compiler complains along the lines of &lt;code&gt;Couldn&amp;#8217;t match expected type ‘[r1]’ with actual type ‘IO [r0]’&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Whacking strings together is discouraged (helps avoid sql injection for one), but getting around it is possible with a little serimony&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_backend_summary&quot;&gt;Backend summary&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well now we got persistence up and running with a good ole&apos; relational database. That&amp;#8217;s
not very exciting and I might return to change that in a future episode. The REST api is quite simple and lacking in validation and error handling, but it&amp;#8217;s hopefully a decent start and foundation
for future changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After working with Clojure and Leiningen not to long ago, the server startup time feels blistering fast in comparison.
Getting halive to work made significant improvements to the development workflow.
When working with Haskell I get a constant reminder that I would benefit from learning more about the language
and fundemental concepts. The compiler messages still throws me off a lot of times, but the situation is gradually improving as I&amp;#8217;m learning.
I guess I&amp;#8217;m already spoilt with the error messages from Elm which feels a lot clearer and better at highlighting the root cause(s) of my mistakes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m still fumbling to design a sensible structure for the custom data types. I have a feeling
several iterations will be needed as I add support for additional services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_frontend&quot;&gt;Frontend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s a shame the hot reloading support in elm-reactor is broken at the time of writing, otherwise the development experience
would have been a lot better. &lt;code&gt;Make&lt;/code&gt; &amp;#8594; &lt;code&gt;reload browser&lt;/code&gt; is just a keystroak away in Light Table, but still.
Having the informative compiler error and warning messages inline in my Editor is really nice though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Do better understand the elm-architecture I&amp;#8217;ve tried to follow, you should really check out the
&lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;tutorial&lt;/a&gt;. It does a much better job at explaining the core
concepts than I do.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2016/albums_pages.png&quot; alt=&quot;albums pages&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/Main.elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;module Main where


import ArtistListing
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick)
import Task exposing (..)
import Effects exposing (Effects, Never)
import StartApp


type alias Model =                                    &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { artistListing : ArtistListing.Model}


type Action =                                         &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    ShowHomePage
  | ArtistListingAction ArtistListing.Action


init : (Model, Effects Action)                        &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
init =
  let
    (artistListing, fx) = ArtistListing.init
  in
    ( Model artistListing
      , Effects.map ArtistListingAction fx            &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    )




update : Action -&amp;gt; Model -&amp;gt; (Model, Effects Action)
update action model =
  case action of

    ShowHomePage -&amp;gt;                                   &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
      let
        (artistListing, fx) = ArtistListing.init
      in
        ( {model | artistListing = artistListing}
        , Effects.map ArtistListingAction fx
        )

    ArtistListingAction sub -&amp;gt;                        &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
      let
        (artistListing, fx) = ArtistListing.update sub model.artistListing
      in
        ( {model | artistListing = artistListing}
        , Effects.map ArtistListingAction fx
        )


menu : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
menu address model =
  header [class &quot;navbar navbar-default&quot;] [
    div [class &quot;container&quot;] [
      div [class &quot;navbar-header&quot;] [
        button [ class &quot;btn-link navbar-brand&quot;, onClick address ShowHomePage ]
        [text &quot;Albums Crud&quot;]
      ]
    ]
  ]


view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =
  div [class &quot;container-fluid&quot;] [
      menu address model   &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
    , ArtistListing.view (Signal.forwardTo address ArtistListingAction) model.artistListing
  ]

-- ... app, main and port for tasks left out, no changes since previous episode&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The main model composes the artistlisting page model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Actions for main, currently just holds the actions for ArtistListing + a convenience action to reset/show home page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The init function from ArtistListing returns it&amp;#8217;s model and an effect (get artist from server task). We initialize the
main model with the artistlisting model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We map the effect from ArtistListing to an Main module effect which is then handled by the startapp &quot;signal loop&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Quick and dirty way to trigger showing of the artist listing page (re-initialized)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;All ArtistListing actions are tagged with ArtistListingAction, we delegate to the update function for ArtistListing
, update the main model accordingly and the map the returne effect&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To get/create the view for ArtistListing we call it&amp;#8217;s view function, but we need to ensure signals sent from  ArtistListing makes it back to the main view mailbox address. &lt;code&gt;Signal.forwardTo&lt;/code&gt; helps us create a forwarding address.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Read more about &lt;a href=&quot;https://github.com/elm-guides/elm-for-js/blob/master/Mailboxes%2C%20Messages%2C%20and%20Addresses.md#talk-to-this-guy&quot;&gt;Mailboxes, Messages and Addresses&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/ArtistListing.elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;module ArtistListing (Model, Action (..), init, view, update) where


import ServerApi exposing (..)                                                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
import ArtistDetail
-- ... other imports ommited

type Page = ArtistListingPage | ArtistDetailPage


type alias Model =
  { artists : List Artist
  , artistDetail : ArtistDetail.Model
  , page : Page}



type Action =
    HandleArtistsRetrieved (Maybe (List Artist))
  | SelectArtist (Int)
  | DeleteArtist (Int)
  | HandleArtistDeleted (Maybe Http.Response)
  | ArtistDetailAction ArtistDetail.Action
  | NewArtist


init : (Model, Effects Action)
init =
  let
    (artistDetail, fx) = ArtistDetail.init
  in
    ( Model [] artistDetail ArtistListingPage
      , getArtists HandleArtistsRetrieved                                      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    )


update : Action -&amp;gt; Model -&amp;gt; (Model, Effects Action)
update action model =
  case action of

    HandleArtistsRetrieved xs -&amp;gt;                                               &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      ( {model | artists = (Maybe.withDefault [] xs) }
      , Effects.none
      )

    DeleteArtist id -&amp;gt;
      (model, deleteArtist id HandleArtistDeleted)

    HandleArtistDeleted res -&amp;gt;
      (model, getArtists HandleArtistsRetrieved)

    NewArtist -&amp;gt;                                                              &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
      update (ArtistDetailAction &amp;lt;| ArtistDetail.ShowArtist Nothing) model

    SelectArtist id -&amp;gt;
      update (ArtistDetailAction &amp;lt;| ArtistDetail.GetArtist id) model

    ArtistDetailAction sub -&amp;gt;                                                 &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
      let
        (detailModel, fx) = ArtistDetail.update sub model.artistDetail
      in
        ( { model | artistDetail = detailModel
                  , page = ArtistDetailPage }                                 &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
        , Effects.map ArtistDetailAction fx
        )



-- ... artistView details ommitted for brevity

view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =
  div [class &quot;content&quot;] [
    case model.page of                                                       &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;

      ArtistListingPage -&amp;gt;
        artistsView address model

      ArtistDetailPage -&amp;gt;
        ArtistDetail.view (Signal.forwardTo address ArtistDetailAction) model.artistDetail

  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;ServerApi&lt;/code&gt; module exposes functions to interact with the backend server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;getArtists HandleArtistsRetrieved&lt;/code&gt; calls the serverAPI with a action param, so that when the ajax/xhr callback finally makes in back into the elm signal loop, the update function is called with the action we want&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Update the model with the list of artists retrieved (if any)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To show the artist detail page in &quot;create&quot; mode we create a ArtistDetailAction with the appropriate ArtistDetail.action&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;ArtistDetailAction sub actions are actions that are delegated to the actions of the ArtistDetail module.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Note that we change &quot;page context&quot; here so that the view function displays the appropriate page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our naive page routing, just toggles display of pages by the page attribute of our model&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve implemented a very simplistic page routing here. In a later episode we will refactor to
something more managable for handling proper page routing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/ArtistDetail.elm&lt;/div&gt;
&lt;p&gt;This page handles update/creation of a single Artist. I&amp;#8217;ll leave it to you to check out
the details of the &lt;a href=&quot;https://github.com/rundis/albums/releases/tag/part_2&quot;&gt;sample code&lt;/a&gt; on github.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/ServerApi.elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;module ServerApi where


import Json.Decode as JsonD exposing ((:=))
import Json.Encode as JsonE
import Effects exposing (Effects)
import Http
import Task


type alias ArtistRequest a =                                                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { a | name : String }

type alias Artist =
  { id : Int
  , name : String
  }

baseUrl : String
baseUrl = &quot;http://localhost:8081&quot;


getArtist : Int -&amp;gt; (Maybe Artist -&amp;gt; a) -&amp;gt; Effects.Effects a
getArtist id action =                                                        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  Http.get artistDecoder (baseUrl ++ &quot;/artists/&quot; ++ toString id)
    |&amp;gt; Task.toMaybe
    |&amp;gt; Task.map action                                                       &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    |&amp;gt; Effects.task


getArtists : (Maybe (List Artist) -&amp;gt; a) -&amp;gt; Effects a
getArtists action =
  Http.get artistsDecoder (baseUrl ++ &quot;/artists&quot;)
    |&amp;gt; Task.toMaybe
    |&amp;gt; Task.map action
    |&amp;gt; Effects.task

createArtist : ArtistRequest a -&amp;gt; (Maybe Artist -&amp;gt; b) -&amp;gt; Effects.Effects b
createArtist artist action =                                                 &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  Http.send Http.defaultSettings
        { verb = &quot;POST&quot;
        , url = baseUrl ++ &quot;/artists&quot;
        , body = Http.string (encodeArtist artist)                           &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        , headers = [(&quot;Content-Type&quot;, &quot;application/json&quot;)]
        }
    |&amp;gt; Http.fromJson artistDecoder
    |&amp;gt; Task.toMaybe
    |&amp;gt; Task.map action
    |&amp;gt; Effects.task

-- .. the remaining services and encoding|decoding left out for brevity&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This type is an extensible &lt;a href=&quot;http://elm-lang.org/docs/records#record-types&quot;&gt;record type&lt;/a&gt;. It allows our
artist related services to be a little bit more generic and still keep a level of type checking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GET a single artist from our backend api. (Actually it returns and effect that will executa a &lt;a href=&quot;http://elm-lang.org/guide/reactivity#tasks&quot;&gt;task&lt;/a&gt; which upon callback will eventually call the update function in our app with the given action)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;ve relented on type safety for actions by allowing it to be a generic param, but we gain some flexibility
that allows our service to be usable in many different contexts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To take more control over http actions we use &lt;code&gt;Http.send&lt;/code&gt;. It&amp;#8217;s closer to the metal so it&amp;#8217;s a little
bit more boilerplate.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Encode the artist (request) to a json string&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To see the remaining services and details of decoding and encoding please consolt the &lt;a href=&quot;https://github.com/rundis/albums/releases/tag/part_2&quot;&gt;sample code&lt;/a&gt; on github.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_frontend_summary&quot;&gt;Frontend summary&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are beginning to see the resmblance of a Single Page Application. We have started to compose
views and pages using the Elm Architecture. The app supports basic CRUD oparations for an Artist entity.
Error handling is light, there is no validation and our routing solution is overly simplistic, but we&amp;#8217;ll get
to that soonish !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Working with Elm has been an absolute pleasure. The compiler messages really do help. Doing refactoring (without tests I might add)
doesn&amp;#8217;t feel anywhere near as scary as I&amp;#8217;m used to from other languages.
I&amp;#8217;m starting to understand more about the Elm Architecture, but I&amp;#8217;m still getting a little confused about the details
of Signals, Tasks, Mailboxes, Effects etc. It&amp;#8217;s coming to me gradually. The important thing is I can still be quite productive
even though I don&amp;#8217;t understand all the details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have to say I&amp;#8217;m not looking forward to my next refactoring in some messy imperative jquery page mutant at work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion_and_next_steps&quot;&gt;Conclusion and next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m aware this blog post got way to long even though I tried to shave of some of the code from the
code listings. I&amp;#8217;ll have to try to take on smaller/more targeted chunks in future episodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyways. I&amp;#8217;m staring to feel I&amp;#8217;m getting somewhere now. Both with Haskell and Elm. Learning Haskell is
by far the most challenging but getting my head around Functional Reactive Programming in Elm isn&amp;#8217;t without challenges either.
My motivation is still strong and I&amp;#8217;m learning a ton of stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Candidate areas to address for the next episode are; routing, validation, error handling and obviously more useful features.
I&amp;#8217;m thinking perhaps routing comes first, but we&amp;#8217;ll see.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Managing and diagramming elm packages with d3 in Light Table</title>
        <link>http://rundis.github.io/blog/2016/elm_light_package.html</link>
        <pubDate>Fri, 1 Jan 2016 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2016/elm_light_package.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In an effort to making management of project dependencies in Elm projects a little easier, the Elm plugin
for &lt;a href=&quot;http://lighttable.com/&quot;&gt;Light Table&lt;/a&gt; the &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;elm-light&lt;/a&gt; has a few neat features up it&amp;#8217;s sleave.
Check out the demo below for a brief overview.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can find the elm-light plugin &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;here&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_demo&quot;&gt;Demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/Okk-YjEeUgI&quot;&gt;ScreenCast demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Okk-YjEeUgI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Other relevant demos:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://rundis.github.io/blog/2015/elm_light.html&quot;&gt;elm-light intro demo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_short_implementation_summary&quot;&gt;Short implementation summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m just going to give a very brief overview of a few key pieces for how the features are implemented here.
I might add a more detailed blog post if there is any interest for that in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_package_management&quot;&gt;Package management&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The package manager is just a thin wrapper around the &lt;code&gt;elm-package&lt;/code&gt; executable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(defn parse-json-file [json-file]
  (when (files/exists? json-file)
    (-&amp;gt; (-&amp;gt;&amp;gt; (files/open-sync json-file)
             :content
             (.parse js/JSON))
        (js-&amp;gt;clj :keywordize-keys true))))


(defn remove-pkg [path pkg]
  (let [pkg-file (files/join path &quot;elm-package.json&quot;)]
    (-&amp;gt; (u/parse-json-file pkg-file)
        (update-in [:dependencies] (fn [deps]
                                     (-&amp;gt; (into {}
                                               (map (fn [[k v]]
                                                      [(u/nskw-&amp;gt;name k) v]) deps))
                                         (dissoc pkg))))
        u/pretty-json
        ((partial files/save pkg-file)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To list, update and remove dependencies it parses (and updates) the project file for elm projects; &lt;code&gt;elm-package.json&lt;/code&gt;. In addition
it parses the &lt;code&gt;exact-dependencies.json&lt;/code&gt; file for all resolved dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Working with json in ClojureScript feels almost seamless to working with native ClojureScript datastructures
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_view_rendering&quot;&gt;View rendering&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To render the package listing the plugin uses &lt;a href=&quot;https://github.com/levand/quiescent&quot;&gt;quiescent&lt;/a&gt; and &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;react&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(q/defcomponent PackageTable [props]
  (d/table
   {:className &quot;package-table&quot;}
   (d/thead
    {}
    (d/tr
     {}
     (d/th {} &quot;Package&quot;)
     (d/th {} &quot;Range&quot;)
     (d/th {} &quot;Exact&quot;)
     (d/th {} &quot;&quot;)))
   (apply d/tbody {}
          (map #(PackageRow (assoc %
                              :on-remove (:on-remove props)
                              :on-browse (:on-browse props)))
               (:packages props)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find a detailed blog post about some of the benefits of using react for view rendering in Light Table
in &lt;a href=&quot;http://rundis.github.io/blog/2015/lt_react.html&quot;&gt;Implementing a Clojure ns-browser in Light Table with React&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_dependency_autocompletion&quot;&gt;Dependency autocompletion&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whan adding dependencies there is a handy autocompleter. This uses a json resource from &lt;a href=&quot;http://package.elm-lang.org/&quot; class=&quot;bare&quot;&gt;http://package.elm-lang.org/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(defn fetch-all-packages
  &quot;Fetch all packages from package.elm-lang.org&quot;
  [callback]
  (fetch/xhr (str &quot;http://package.elm-lang.org/all-packages?date=&quot; (.getTime (new js/Date)))
             {}
             (fn [data]
               (let [pkgs (js-&amp;gt;clj (.parse js/JSON data) :keywordize-keys true)]
                 (callback pkgs)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_dependency_graph&quot;&gt;Dependency graph&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To implement the dependency graph d3 and dagreD3 is used. Both of these ships node-modules. Using node-modules from
Light Table plugins is definetely not rocket science !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(def dagreD3 (js/require (files/join u/elm-plugin-dir &quot;node_modules/dagre-d3&quot;)))
(def d3 (js/require (files/join u/elm-plugin-dir &quot;node_modules/d3&quot;)))


defn create-graph [data]                                                         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  (let [g (.setGraph (new dagreD3.graphlib.Graph)  #js {})]
    (doseq [x (:nodes data)]
      (.setNode g (dep-id x) (node-label x)))
    (doseq [x (:edges data)]
      (.setEdge g (:a x) (:b x) #js {:label (:label x)
                                     :style (when (:transitive x)
                                              &quot;stroke-dasharray: 5, 5;&quot;)}))
    g))



(behavior ::on-render                                                           &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
          :desc &quot;Elm render dependencies&quot;
          :triggers #{:elm.graph.render}
          :reaction (fn [this]
                      (let [svg (.select d3 &quot;svg&quot;)
                            g (.select svg &quot;g&quot;)
                            renderer (.render dagreD3)]
                        (renderer g (create-graph (:data @this)))
                        (init-zoom svg g)
                        (resize-graph this svg))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The function to create the dependency graph. Helper functions omitted, but not much to it really&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Light Table behavior that is responsible for rendering the graph&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_credits&quot;&gt;Credits&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://d3js.org/&quot;&gt;d3.js&lt;/a&gt; - Provides awesome graphing features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpettitt/dagre-d3&quot;&gt;dagreD3&lt;/a&gt; - Create Directed Acyclic Graphs in a breeze&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Typed up CRUD SPA with Haskell and Elm  - Part 1: Spike time</title>
        <link>http://rundis.github.io/blog/2015/haskell_elm_spa_part1.html</link>
        <pubDate>Mon, 28 Dec 2015 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2015/haskell_elm_spa_part1.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Join me on my journey into statically typed functional languages. I&amp;#8217;ve been living a pretty happily
dynamic life so far. What&amp;#8217;s the fuzz with all those types ? What do they give me in a real life
scenario (aka is it worth using for work gigs) ? I need to make an effort and try to figure
some of this out. This blog series is an attempt to document some of my experiences along the way through a practical example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;There will be:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A single page web application with crud features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lots of types, refactoring and hopefully some testing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An evolving web-app github repo for your amusement or amazement&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_just_a_little_background_on_me&quot;&gt;Just a little background on me&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For quite some time I&amp;#8217;ve been wanting to learn more about functional languages that are statically (and strongly) typed.
What benefits do they really provide in practice and what are the downsides ?
My background is a from quite a few years with Java, and the last 3-4 years I&amp;#8217;ve been working
 mostly with Groovy, JavaScript and Clojure/ClojureScript.
I&amp;#8217;ve dabbled a little with Elm recently (&lt;a href=&quot;http://rundis.github.io/blog/2015/elm_sweeper.html&quot;&gt;minesweeper in Elm&lt;/a&gt;)
, and I&amp;#8217;ve tried to take on Haskell a couple of times (without much success I might add).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I mostly do web apps at work, so I figured I need to try and make something at least remotely
similar to what I do in real life.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_let_s_get_started&quot;&gt;Let&amp;#8217;s get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the point where I&amp;#8217;ve run into analysis paralysis so many a time before.
So I set out to create a crud app, but what shall I build. After some deliberation
I settled on making something related to Music. You know Albums, Artists, Tracks and such.
I have no idea what the end result will be, but to start off I&amp;#8217;ll make a simple spike.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2015/artists.png&quot; alt=&quot;artists&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The spike should&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;establish a base architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implement a simple feature: &lt;strong&gt;List artists&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will find the sample application code on &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;github&lt;/a&gt;.
There will be a tag for each blog post in the series&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_backend&quot;&gt;Backend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wanted to implement server component that would provide REST-services. There are quite
a few options available for Haskell that can help with that. After some research and trials
I ended up using &lt;a href=&quot;https://haskell-servant.github.io/&quot;&gt;Servant&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Some of the other options I looked at includes:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.spock.li/&quot;&gt;Spock&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/scotty-web/scotty&quot;&gt;Scotty&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://snapframework.com/&quot;&gt;Snap&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.yesodweb.com/&quot;&gt;Yesod&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I just had to choose one, and Servant seemed like a nice fit for REST stuff and I managed to get it
working without to much hazzle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_project_set_up&quot;&gt;Project set up&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m using &lt;a href=&quot;https://www.haskell.org/cabal/&quot;&gt;cabal&lt;/a&gt;, but you might also want to consider looking
at &lt;a href=&quot;http://docs.haskellstack.org/en/stable/index.html&quot;&gt;stack&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;name:                albums
version:             0.1.0.0
synopsis:            Albums rest backend
license:             MIT
license-file:        LICENSE
author:              rundis
maintainer:          mrundberget@hotmail.com
category:            Web
build-type:          Simple
cabal-version:       &amp;gt;=1.10

executable albums
  main-is:             Main.hs              &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , either
    , aeson &amp;gt;= 0.8                          &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    , servant                               &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    , servant-server
    , wai
    , warp
  hs-source-dirs:      src                  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  default-language:    Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The entry point for the application&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Provides JSON support&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The servant library that helps us create type safe rest services&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The directory(ies) where the source code for our app resides&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purposes of this spike all haskell code will reside in &lt;code&gt;Main.hs&lt;/code&gt;. This will
surely not be the case as the app progresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you wan&amp;#8217;t to try out automatic reloading support, you may want to check out &lt;a href=&quot;https://github.com/lukexi/halive&quot;&gt;halive&lt;/a&gt;.
Unfortunately I couldn&amp;#8217;t get it to work on my machine (OS/X Maverick), but it might work our for you though :-)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_main_hs&quot;&gt;Main.hs&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;data Artist = Artist
  { artistId :: Int
  , name :: String
  } deriving (Eq, Show, Generic)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple type describing the shape of an Artist in our app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;instance ToJSON Artist                                       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

type ArtistAPI =                                             &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
       Get &apos;[JSON] [Artist]                                  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  :&amp;lt;|&amp;gt; Capture &quot;artistId&quot; Int :&amp;gt; Get &apos;[JSON] Artist          &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;


artistsServer :: Server ArtistAPI
artistsServer = getArtists :&amp;lt;|&amp;gt; artistOperations             &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

  where getArtists :: EitherT ServantErr IO [Artist]
        getArtists = return artists                          &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

        artistOperations artistId =
          viewArtist

          where viewArtist :: EitherT ServantErr IO Artist
                viewArtist = artistById artistId             &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ToJSON&lt;/code&gt; is a &lt;a href=&quot;https://www.haskell.org/tutorial/classes.html&quot;&gt;type class&lt;/a&gt;. This line
basically is all we need to set up for json encoding an instance of our Artist type.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We describe our REST api using a type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Get on this api returns a list of Artists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Definition of how to get a single Artist by it&amp;#8217;s id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;server&lt;/code&gt; type is the part where we descibe how we actually serve the api&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The handler for listing artists. Currently it just returns a static list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The handler for retrieving a given artist by its id&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;:&amp;lt;&amp;gt;&lt;/code&gt; is a &lt;a href=&quot;https://wiki.haskell.org/Combinator&quot;&gt;combinator&lt;/a&gt; that ships with Servant. It allows us to combine the various parts
of our API into a single type.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;artistById :: Int -&amp;gt; EitherT ServantErr IO Artist
artistById idParam =
  case a of
    Nothing -&amp;gt; left (err404 {errBody = &quot;No artist with given id exists&quot;})  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    Just b -&amp;gt; return b                                                     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  where
    a = find ((== idParam) . artistId) artists                             &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the find (by id) in &lt;strong&gt;3&lt;/strong&gt; returns Nothing (see &lt;a href=&quot;https://hackage.haskell.org/package/base-4.8.1.0/docs/Data-Maybe.html&quot;&gt;Maybe monad&lt;/a&gt;).
We return a 404 error with a custom body&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Upon success return the given artist instance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Find a given artist by id from our List of artists&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;EitherT&lt;/code&gt; - An either monad. Check out the description from the servant tutorial on &lt;a href=&quot;https://haskell-servant.github.io/tutorial/server.html#the-eithert-servanterr-io-monad&quot;&gt;EitherT&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Wrapping it all up&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;type API = &quot;artists&quot; :&amp;gt; ArtistAPI    &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;


api :: Proxy API
api = Proxy                          &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;


app :: Application
app = serve api artistsServer        &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;


main :: IO ()
main = run 8081 app                  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A generic type for our api. It let&amp;#8217;s us combine multiple types, but the
main reason it&amp;#8217;s factored out for now is to avoid repetion of the root path for our
api &lt;code&gt;artists&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;TBH I haven&amp;#8217;t grokked why this is needed, but it&amp;#8217;s probably to do with some type magic ?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;An &quot;abstract&quot; web application. serve gives us a &lt;a href=&quot;http://www.stackage.org/package/wai&quot;&gt;WAI&lt;/a&gt; web application.
I guess WAI is like a common API for Haskell Web applicaitons.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The main entry point for our application. It starts our web application on port 8081
(and uses &lt;a href=&quot;http://www.stackage.org/package/warp&quot;&gt;warp&lt;/a&gt; behind the scene to do so.)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get the backend up and running, check out the readme for the &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;sample application&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_backend_experiences&quot;&gt;Backend experiences&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following the &lt;a href=&quot;https://haskell-servant.github.io/tutorial/server.html&quot;&gt;Servant tutorial&lt;/a&gt; it was quite
easy to get a simple translated example to work. However I did start to struggle once I started
to venture off from the tutorial. Some of it is obviously due to my nearly non-existing haskell knowledge.
But I think what tripped me up most was the EitherT monad. Heck I still don&amp;#8217;t really know what
a monad is. The error messages I got along the way didn&amp;#8217;t help me much, but I guess gradually
they&amp;#8217;ll make more and more sense, once my haskell foo improves.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_frontend&quot;&gt;Frontend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So Elm is pretty cool. The syntax isn&amp;#8217;t too far off from Haskell. I&amp;#8217;ve already started
looking at Elm so it makes sense continuing with Elm to hopefully gain deeper knowledge of its
strenghts and weaknesses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For a really pleasurable experience when developing elm I would suggest choosing an
editor with linting support. As a shameless plug, one suggestion would be to use &lt;a href=&quot;http://lighttable.com/&quot;&gt;Light Table&lt;/a&gt;
with my &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;elm-light&lt;/a&gt; plugin. (Emacs, Vim, Sublime, Visual Code are other good options)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_project_setup&quot;&gt;Project setup&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;{
    &quot;version&quot;: &quot;1.0.0&quot;,
    &quot;summary&quot;: &quot;The frontend for the Albums CRUD sample app&quot;,
    &quot;repository&quot;: &quot;https://github.com/rundis/albums.git&quot;,
    &quot;license&quot;: &quot;MIT&quot;,
    &quot;source-directories&quot;: [
        &quot;.&quot;                                                      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    ],
    &quot;exposed-modules&quot;: [],
    &quot;dependencies&quot;: {                                            &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        &quot;elm-lang/core&quot;: &quot;3.0.0 &amp;lt;= v &amp;lt; 4.0.0&quot;,
        &quot;evancz/elm-effects&quot;: &quot;2.0.1 &amp;lt;= v &amp;lt; 3.0.0&quot;,
        &quot;evancz/elm-html&quot;: &quot;4.0.2 &amp;lt;= v &amp;lt; 5.0.0&quot;,
        &quot;evancz/elm-http&quot;: &quot;3.0.0 &amp;lt;= v &amp;lt; 4.0.0&quot;,
        &quot;evancz/start-app&quot;: &quot;2.0.2 &amp;lt;= v &amp;lt; 3.0.0&quot;
    },
    &quot;elm-version&quot;: &quot;0.16.0 &amp;lt;= v &amp;lt; 0.17.0&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For simplicity source files currently resides in the root folder of the project.
This will change once the application grows&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Initial set of dependencies used&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_album_elm&quot;&gt;Album.elm&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before you start you may want to check out &lt;a href=&quot;https://github.com/evancz/start-app&quot;&gt;start-app&lt;/a&gt;.
The frontend code is based on this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Artist =                                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { id : Int
  , name : String
  }

type alias Model =                                      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  { artists : List Artist}


type Action = ArtistRetrieved (Maybe (List Artist))     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Front end representation of Artist. You&amp;#8217;ll notice it&amp;#8217;s strikingly similar
to it&amp;#8217;s Haskell counterpart on the server side&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Type for keeping track of our model. Currently it will only contain
a list of artists, but there is more to come later&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&quot;Tagged type&quot; that describes the actions supported in the frontend app.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;init : (Model, Effects Action)
init =                                                  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  ( Model []
    , getArtists
  )


update : Action -&amp;gt; Model -&amp;gt; (Model, Effects Action)
update action model =                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  case action of
    ArtistRetrieved xs -&amp;gt;
      ( {model | artists = (Maybe.withDefault [] xs) }
      , Effects.none
      )


getArtists : Effects.Effects Action
getArtists =                                           &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  Http.get artists &quot;http://localhost:8081/artists&quot;
    |&amp;gt; Task.toMaybe
    |&amp;gt; Task.map ArtistRetrieved
    |&amp;gt; Effects.task


artist : Json.Decoder Artist
artist =                                               &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  Json.object2 Artist
    (&quot;artistId&quot; := Json.int)
    (&quot;name&quot; := Json.string)


artists : Json.Decoder (List Artist)
artists =                                              &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  Json.list artist&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Initializer function called by start-app when staring the application
it returns an empty model and an effect &lt;code&gt;getArtists&lt;/code&gt;. Meaning getArtists will be
invoked once the page is loaded&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The update function handles actions in our app. Currently it only supports
one action, and that is the a callback once getArtists have returned. It updates
the model with the retrieved artists and returns the updated model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our ajax call ! We invoke the our rest endpoint using the elm http library. The first
argument to Http.get, &lt;code&gt;artists&lt;/code&gt;, tells elm how to decode the result.
A lot is going on here, but the end result is that it does an xhr request decodes the result (if success)
using the given decoder and eventually invoke the update function with our list of artists (wrapped in a Maybe).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A decoder for decoding the json representation of an artist from the server to and &lt;code&gt;Artist&lt;/code&gt; type instance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The response from our rest endpoint is a list of artists, so we use the JSON.list function
telling it to use our artist decoder for each item in the list&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;artistRow : Artist -&amp;gt; Html
artistRow artist =                                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  tr [] [
     td [] [text (toString artist.id)]
    ,td [] [text artist.name]
  ]

view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  div [class &quot;container-fluid&quot;] [
        h1 [] [text &quot;Artists&quot; ]
      , table [class &quot;table table-striped&quot;] [
          thead [] [
            tr [] [
               th [] [text &quot;Id&quot;]
              ,th [] [text &quot;Name&quot;]
          ]
        ]
      , tbody [] (List.map artistRow model.artists)
    ]
  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Function to generate the view for a single artist row&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our main view function for presenting a list of artists&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
We are not rendering dom nodes here, it&amp;#8217;s just a representation of what we want
to render. The actual rendering uses Virual DOM.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Wrapping up the frontend&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;app : StartApp.App Model
app =                                          &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  StartApp.start
    { init = init
    , update = update
    , view = view
    , inputs = []
    }



main : Signal Html
main =                                         &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  app.html



port tasks : Signal (Task.Task Never ())
port tasks =                                   &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  app.tasks&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Using startapp to wire up our core functions (init, update and view)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The entry point function for our frontend app&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When communicating with the outside world elm uses &lt;a href=&quot;http://elm-lang.org/guide/interop#ports&quot;&gt;ports&lt;/a&gt;.
This is used for by our rest invocation. It does so using &lt;a href=&quot;http://elm-lang.org/guide/reactivity#tasks&quot;&gt;tasks&lt;/a&gt; which
is the elm way to describe asynchronous operations.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_frontend_experiences&quot;&gt;Frontend experiences&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Elm ports, tasks and effects are concepts that are yet to dawn completely on me. I protect my brain
temporarily by giving them overy simplistic explanations.
I wasn&amp;#8217;t sure how to do the JSON decoding stuff, but fired up an elm-repl in Light Table and just experiemented a little until
I had something workable.
I used the linter feature of my Light Table plugin quite heavily, and the error messages from elm proved yet again
to be very helpful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion_and_next_steps&quot;&gt;Conclusion and next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I pretty sure I could have knocked this up with Clojure/ClojureScript, groovy/grails or plan old JavaScript
in a fraction of the time I&amp;#8217;ve used. But that&amp;#8217;s not really a fair or relevant comparison.
Learning completely new languages and new libraries takes time.
I think I&amp;#8217;ve learned quite a bit already and I&amp;#8217;m very pleased to have made it this far !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Elm was easier to get into than Haskell and the Elm compiler felt a lot more helpful to me than
ghc (haskell compiler). I had a head start on Elm, but I do remember getting started with Elm felt
a lot smoother than jumping into Haskell. I&amp;#8217;m still very much looking forward to improving my haskell skills
and I&amp;#8217;m sure that will proove very valuable eventually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what&amp;#8217;s up next? Not sure, but i think adding persistence and the facility to add/update
artists might be next up. I will keep you posted !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Minesweeper - a brief journey from JavaScript/React to Elm</title>
        <link>http://rundis.github.io/blog/2015/elm_sweeper.html</link>
        <pubDate>Tue, 10 Nov 2015 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2015/elm_sweeper.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After taking a keen interest to Elm lately I figured I needed to solve a real problem. Something a bit fun and achievable in a couple of evenings/nights.
Not being awfully creative, piggiebacking on other peoples&apos; work is sometimes a good option.
In this post I&amp;#8217;ll take you through some of my steps in porting/re-implementing &lt;a href=&quot;https://github.com/cjohansen/react-sweeper&quot; class=&quot;bare&quot;&gt;https://github.com/cjohansen/react-sweeper&lt;/a&gt; (JavaScript and React) to an Elm implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2015/elm_sweeper.png&quot; alt=&quot;elm sweeper&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you&amp;#8217;d like to have a look at the complete implementation of the game, check out &lt;a href=&quot;https://github.com/rundis/elm-sweeper&quot; class=&quot;bare&quot;&gt;https://github.com/rundis/elm-sweeper&lt;/a&gt;.
There you&amp;#8217;ll find instructions on how to get it running too.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_little_background&quot;&gt;A little background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Right! So I&amp;#8217;ve taken an interest in &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; lately.  If you&amp;#8217;ve read any of my previous posts you might have
noticed that I&amp;#8217;m quite fond of Clojure and ClojureScript. I still very much am and I have tons to learn there still. But I wanted  to dip my toes
into a statically typed functional language. Elm seems quite approachable and I guess probably the talk &lt;a href=&quot;https://www.youtube.com/watch?v=oYk8CKH7OhE&quot;&gt;&quot;Let&amp;#8217;s be mainstream&quot;&lt;/a&gt;
made my mind up to give it a go. After creating a language plugin for Light Table: &lt;a href=&quot;http://rundis.github.io/blog/2015/elm_light.html&quot;&gt;elm-light&lt;/a&gt;
 and attending an Elm workshop at CodeMesh, I needed something concrete to try it out on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I remembered that a colleague of mine  &lt;a href=&quot;http://www.kodemaker.no&quot;&gt;at Kodemaker&lt;/a&gt;, Christian Johansen,  made a minesweeper implementation using JavaScript and React.
That seemed like a sufficiently interesting problem and I could shamelessly steal most of the game logic :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_first_steps_the_game_logic&quot;&gt;First steps - The Game Logic&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the obvious place to start was the game logic. I had the option of trying to set up &lt;a href=&quot;https://github.com/deadfoxygrandpa/Elm-Test&quot;&gt;Elm-Test&lt;/a&gt;
to use a test-driven inspired approach. But heck I figured I had to try to put those types to the test, so I went for
an all out repl driven approach. That gave me a chance to experience the good and bad with the &lt;a href=&quot;https://github.com/rundis/elm-light#56-editor-repl&quot;&gt;repl integration&lt;/a&gt; of my own Light Table Elm plugin too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2015/elm_repl.png&quot; alt=&quot;elm repl&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_starting_with_records_and_type_aliases&quot;&gt;Starting with records and type aliases&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reading the &lt;a href=&quot;https://github.com/cjohansen/react-sweeper/blob/master/immutable-es6/src/game.js&quot;&gt;game logic&lt;/a&gt; in react-sweeper I decided to
define a couple of types&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Tile               &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { id: Int
  , threatCount: Maybe Int    &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  , isRevealed: Bool
  , isMine: Bool}

type GameStatus = IN_PROGRESS | SAFE | DEAD

type alias Game =             &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  { status: GameStatus        &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  , rows: Int
  , cols: Int
  , tiles: List Tile}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Type alias for records representing a tile in the game.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Threat count is a property on a tile that is not set until the game logic allows it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Type alias for a record representing a game&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Status of the game, the possible states are defined by GameStatus. SAFE means you&amp;#8217;ve won, DEAD&amp;#8230;&amp;#8203; well&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Describing these types proved to be valuable documentation as well as being very helpful when implementing
the game logic later on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
What&amp;#8217;s that &lt;code&gt;Maybe&lt;/code&gt; thing ? If someone told me it&amp;#8217;s a &lt;a href=&quot;https://en.wikipedia.org/wiki/Monad_(functional_programming)&quot;&gt;Monad&lt;/a&gt; I wouldn&amp;#8217;t be any wiser. I think of it
as a handy way of describing that something may have a value. A nifty way to eliminate the use of null basically.
It also forces you to be explicit about handling the fact that it may not have a value.
You won&amp;#8217;t get null pointer errors in an Elm program! (nor &lt;code&gt;Undefined is not a function&lt;/code&gt;).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_finding_neighbours_of_a_tile&quot;&gt;Finding neighbours of a tile&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When revealing tiles in minesweeper you also reveal any adjacent tiles that aren&amp;#8217;t next to a mine.
In addition you display the threat count (how many mines are adjacent to a tile) for tiles next to those
you just revealed. So we need a way to find the neighbouring tiles of a given tile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_javascript_implementation&quot;&gt;JavaScript implementation&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;function onWEdge(game, tile) {                                                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  return tile % game.get(&apos;cols&apos;) === 0;
}

function onEEdge(game, tile) {                                                 &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  return tile % game.get(&apos;cols&apos;) === game.get(&apos;cols&apos;) - 1;
}


function nw(game, tile) {                                                      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  return onWEdge(game, tile) ? null : idx(game, tile - game.get(&apos;cols&apos;) - 1);
}

function n(game, tile) {
  return idx(game, tile - game.get(&apos;cols&apos;));
}

// etc , ommitted other directions for brevity


const directions = [nw, n, ne, e, se, s, sw, w];

function neighbours(game, tile) {
  return keep(directions, function (dir) {                                     &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    return game.getIn([&apos;tiles&apos;, dir(game, tile)]);
  });
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Helper function to determine if a given tile is on the west edge of the board&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Helper function to determine if a given tile is on the east edge of the board&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Returns the the tile north-west of a given tile. Null if none exists to the north-west&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Keep is a helper function that maps over the collection and filters out any resulting `null`s. So the function
iterates all directions (invoking their respective function) and returns all possible tiles
neighbouring the given tile.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_elm_implementation&quot;&gt;Elm implementation&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Direction = W | NW | N | NE | E | SE | S | SW                                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

onWEdge : Game -&amp;gt; Tile -&amp;gt; Bool                                                     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
onWEdge game tile =
  (tile.id % game.cols) == 0


onEEdge : Game -&amp;gt; Tile -&amp;gt; Bool
onEEdge game tile =
  (tile.id % game.cols) == game.cols - 1


neighbourByDir : Game -&amp;gt; Maybe Tile -&amp;gt; Direction -&amp;gt; Maybe Tile                     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
neighbourByDir game tile dir =
  let
    tIdx = tileByIdx game                                                          &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    isWOk t = not &amp;lt;| onWEdge game t                                                &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    isEOk t = not &amp;lt;| onEEdge game t
  in
    case (tile, dir) of                                                            &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
      (Nothing, _) -&amp;gt; Nothing                                                      &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
      (Just t, N)  -&amp;gt; tIdx &amp;lt;| t.id - game.cols
      (Just t, S)  -&amp;gt; tIdx &amp;lt;| t.id + game.cols
      (Just t, W)  -&amp;gt; if isWOk t then tIdx &amp;lt;| t.id - 1             else Nothing
      (Just t, NW) -&amp;gt; if isWOk t then tIdx &amp;lt;| t.id - game.cols - 1 else Nothing    &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
      (Just t, SW) -&amp;gt; if isWOk t then tIdx &amp;lt;| t.id + game.cols - 1 else Nothing
      (Just t, E)  -&amp;gt; if isEOk t then tIdx &amp;lt;| t.id + 1             else Nothing
      (Just t, NE) -&amp;gt; if isEOk t then tIdx &amp;lt;| t.id - game.cols + 1 else Nothing
      (Just t, SE) -&amp;gt; if isEOk t then tIdx &amp;lt;| t.id + game.cols + 1 else Nothing


neighbours : Game -&amp;gt; Maybe Tile -&amp;gt; List Tile
neighbours game tile =
  let
    n = neighbourByDir game tile                                                   &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
  in
    List.filterMap identity &amp;lt;| List.map n [W, NW, N, NE, E, SE, S, SW]             &lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A type (actually a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tagged_union&quot;&gt;tagged union&lt;/a&gt;) describing/enumerating the possible directions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Pretty much the same as it&amp;#8217;s JavaScript counterpart. I&amp;#8217;ve been lazy and assumed the id of a tile
is also the index in the tiles list of our game.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Find a neighbour by a given direction. The function takes 3 arguments; a game record, a tile (that may or may not have a value) and a direction. It returns a tile (that may or may not have a value)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;tileByIdx is a functions that finds a tile by its index. (it returns a tile, &amp;#8230;&amp;#8203; maybe). tIdx is a local function that just curries(/binds/partially applies) the first parameter - game&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A local function that checks if it&amp;#8217;s okay to retrieve a westward tile for a given tile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Pattern match on tile and direction. You might consider it a switch statement on steroids.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the tile doesn&amp;#8217;t have a value (then we don&amp;#8217;t care about the direction hence _) we return Nothing (Maybe.Nothing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Just t, NW matches on a tile that has value (assigned t) and a given direction of NW. The logic is for this case the same as for it&amp;#8217;s JavaScript counterpart. Well except it returns Nothing if NW isn&amp;#8217;t possible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A partially applied version of neightBourByDir to make the mapping function in 10. a bit less verbose&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We map over all directions finding their neighbours, then &lt;code&gt;List.filterMap identity&lt;/code&gt; filters out all List entries with Nothing.
Leaving us with a list of valid neighbours for the given tile.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We covered quite a bit of ground here. I could have implemented all the direction functions as in the JavaScript implementation,
but opted for a more generic function using pattern matching. It&amp;#8217;s not that I dislike short functions, quite the contrary but
in this case it felt like a good match (no pun intended). Once you get used to the syntax it gives a
really nice overview as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Think of &amp;lt;| as one way to avoid parenthesis. It&amp;#8217;s actually a backwards function application
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When testing this function I got my first runtime error in Elm complaining that my case wasn&amp;#8217;t
exhaustive. Rumors has it that the next version of elm might handle this at compile time as well :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2015/elm_case_error.png&quot; alt=&quot;elm case error&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_threat_count&quot;&gt;Threat count&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_javascript&quot;&gt;JavaScript&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;function getMineCount(game, tile) {                                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  var nbs = neighbours(game, tile);
  return nbs.filter(prop(&apos;isMine&apos;)).length;
}

function addThreatCount(game, tile) {                                           &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  return game.setIn([&apos;tiles&apos;, tile, &apos;threatCount&apos;], getMineCount(game, tile));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Gets the number of neighbouring tiles that are mines for a given tile. (prop is a helper function for retrieving a named property on a js object)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Set the threatCount property on a given tile in the game&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_elm&quot;&gt;Elm&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;mineCount : Game -&amp;gt; Maybe Tile -&amp;gt; Int                                           &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
mineCount game tile =
  List.length &amp;lt;| List.filter .isMine &amp;lt;| neighbours game tile

revealThreatCount : Game -&amp;gt; Tile -&amp;gt; Tile                                        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
revealThreatCount game tile =
  {tile | threatCount &amp;lt;- Just (mineCount game &amp;lt;| Just tile)
        , isRevealed  &amp;lt;- True}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Same as for it&amp;#8217;s JavaScript counterpart, but using a . syntax for dynamic property access&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Almoust the same as addThreatCount, but since once we add it the tile would also always be revealed
I opted for a two in one function.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;For mine count, both implementations are potentially flawed.&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For JavaScript you might get 0 for a non-existent tile, which isn&amp;#8217;t too bad. But maybe you&amp;#8217;ll get
a null pointer somewhere deeper down the call stack. To be sure you have to crawl through all function calls this function makes and
apply your JavaScript foo to know things like null &amp;lt; 1 is obviously true, but null &amp;lt; 0 is false. &amp;#8230;&amp;#8203; and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The elm implementation won&amp;#8217;t have any null pointer exceptions, but really it should return Maybe Int to guard
against giving 0 back for a Nothing tile !&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_revealing_safe_adjacent_tiles&quot;&gt;Revealing safe adjacent tiles&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_javascript_2&quot;&gt;JavaScript&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;function revealAdjacentSafeTiles(game, tile) {
  if (isMine(game, tile)) {
    return game;
  }
  game = addThreatCount(game, tile).setIn([&apos;tiles&apos;, tile, &apos;isRevealed&apos;], true);
  if (game.getIn([&apos;tiles&apos;, tile, &apos;threatCount&apos;]) === 0) {
    return keep(directions, function (dir) {
      return dir(game, tile);
    }).reduce(function (game, pos) {
      return !game.getIn([&apos;tiles&apos;, pos, &apos;isRevealed&apos;]) ?
        revealAdjacentSafeTiles(game, pos) : game;
    }, game);
  }
  return game;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_elm_2&quot;&gt;Elm&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;revealAdjacentSafeTiles :  Game -&amp;gt; Int -&amp;gt; Game
revealAdjacentSafeTiles game tileId =
  case tileByIdx game tileId of
    Nothing -&amp;gt; game
    Just t -&amp;gt;
      if t.isMine then game else
        let
          updT   = revealThreatCount game t
          updG   = {game | tiles &amp;lt;- updateIn tileId (\_ -&amp;gt; updT) game.tiles}
          fn t g = if not t.isRevealed then revealAdjacentSafeTiles g t.id else g
        in
          if not (updT.threatCount == Just 0) then
            updG
          else
            List.foldl fn updG &amp;lt;| neighbours updG &amp;lt;| Just updT&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_a_brief_comparison&quot;&gt;A brief comparison&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most noteworthy difference is really the explicit handling of an illegal tile index in the Elm implementation.
If I didn&amp;#8217;t have the JavaScript code to look at, I&amp;#8217;m guessing the difference would have been more noticable. Not necessarily for the better.
We&amp;#8217;ll never know.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyways, enough about the game logic. Let&amp;#8217;s move on to the view part.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_comparing_the_view_rendering&quot;&gt;Comparing the view rendering&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_javascript_3&quot;&gt;JavaScript&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The React part for rendering the UI is found in &lt;a href=&quot;https://github.com/cjohansen/react-sweeper/blob/master/immutable-es6/src/ui.js&quot;&gt;ui.js&lt;/a&gt;
Below I&amp;#8217;ve picked out the most interesting parts&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;export function createUI(channel) {                                            &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  const Tile = createComponent((tile) =&amp;gt; {                                     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    if (tile.get(&apos;isRevealed&apos;)) {
      return div({className: &apos;tile&apos; + (tile.get(&apos;isMine&apos;) ? &apos; mine&apos; : &apos;&apos;)},
                 tile.get(&apos;threatCount&apos;) &amp;gt; 0 ? tile.get(&apos;threatCount&apos;) : &apos;&apos;);
    }
    return div({
      className: &apos;tile&apos;,
      onClick: function () {
        channel.emit(&apos;reveal&apos;, tile.get(&apos;id&apos;));                                &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      }
    }, div({className: &apos;lid&apos;}, &apos;&apos;));
  });

  const Row = createComponent((tiles) =&amp;gt; {
    return div({className: &apos;row&apos;}, tiles.map(Tile).toJS());
  });

  const Board = createComponent((game) =&amp;gt; {
    return div({
      className: &apos;board&apos;
    }, partition(game.get(&apos;cols&apos;), game.get(&apos;tiles&apos;)).map(Row).toJS());
  });

  const UndoButton = createComponent(() =&amp;gt; {                                  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    return button({
      onClick: channel.emit.bind(channel, &apos;undo&apos;)
    }, &apos;Undo&apos;);
  });

  const Game = createComponent((game) =&amp;gt; {
    return div({}, [Board(game), UndoButton()]);
  });

  return (data, container) =&amp;gt; {                                               &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    render(Game(data), container);
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This function returns a function for creating the react component tree for the game. It takes a channel
param, which is an event emitter. So when components need to notify the &quot;controller&quot; about user actions they can just emit messages to this channel
A neat way to avoid using callbacks!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;createComponent is a handy helper function that avoids some react boiler plate and provides an optimized shouldComponentUpdate function for each react component used.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When a user clicks on a tile a reveal message with the tile id is emitted&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The game also supports undo previous move :)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Returns a function that when called starts the react rendering of the game in the given container element&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_elm_3&quot;&gt;Elm&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;threatCount : Maybe Int -&amp;gt; List Html
threatCount count =
  case count of
    Nothing -&amp;gt; []
    Just t  -&amp;gt; [text (if t &amp;gt; 0 then toString t else &quot;&quot;)]


tileView : Signal.Address Action -&amp;gt; Game.Tile -&amp;gt; Html                               &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
tileView address tile =
  if tile.isRevealed then
    div [class (&quot;tile&quot; ++ (if tile.isMine then &quot; mine&quot; else &quot;&quot;))]
        &amp;lt;| threatCount tile.threatCount

  else
    div [class &quot;tile&quot;, onClick address (RevealTile tile.id)]                        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        [div [class &quot;lid&quot;] []]                                                      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;


rowView : Signal.Address Action -&amp;gt; List Game.Tile -&amp;gt; Html
rowView address tiles =
  div [class &quot;row&quot;] (List.map (tileView address) tiles)


statusView: Game -&amp;gt; Html
statusView game =
  let
    (status, c) = case game.status of
                    SAFE          -&amp;gt; (&quot; -  You won&quot;, &quot;status-won&quot;)
                    DEAD          -&amp;gt; (&quot; - You lost&quot;, &quot;status-lost&quot;)
                    IN_PROGRESS   -&amp;gt; (&quot;&quot;, &quot;&quot;)
  in
    span [class c] [text status]


view : Signal.Address Action -&amp;gt; Game -&amp;gt; Html                                       &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
view address game =
  let
    rows = Utils.partitionByN game.cols game.tiles
  in
    div [id &quot;main&quot;] [
      h1 [] [text &quot;Minesweeper&quot;, statusView game],
      div [class &quot;board&quot;] (List.map (rowView address) rows),
      div [] [button [class &quot;button&quot;, onClick address NewGame] [text &quot;New game&quot;]]
    ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The function responsible for rendering a single tile. Very much comparable to the React tile component
in the JavaScript implementation. Similar to  React, we aren&amp;#8217;t returning actual dom elments, Elm also has
a virtual dom implementation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When a tile is clicked a message is sent to a given address (we&amp;#8217;ll get back to that a little bit later).
Well actually it doesn&amp;#8217;t happen right away, rather think of it as creating an envelope with content and a known address. The Elm runtime receives a signal back
that will take care of sending the message to it&amp;#8217;s rendering function when appropriate.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;div here is actually a function from the HTML module in Elm. It takes two lists as arguments, the first
is a list of attributes and the second is a list of child elements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our main entry function for creating our view. It takes an address and game as parameter and returns a virtual dom node (Html)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;Signal.Address Action&lt;/code&gt; : Address points to a particular type of Signal, in our case the Signal is an &lt;code&gt;Action&lt;/code&gt;
we&amp;#8217;ll come back to that shortly. But the short story is that this is what enables us to talk back to the main application.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wiring_it_all_together&quot;&gt;Wiring it all together&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_javascript_4&quot;&gt;JavaScript&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;const channel = new EventEmitter();
const renderMinesweeper = createUI(channel);
let game = createGame({cols: 16, rows: 16, mines: 48});
let history = List([game]);

function render() {                                                         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  renderMinesweeper(game, document.getElementById(&apos;board&apos;));
}

channel.on(&apos;undo&apos;, () =&amp;gt; {                                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  if (history.size &amp;gt; 1) {
    history = history.pop();
    game = history.last();
    render();
  }
});

channel.on(&apos;reveal&apos;, (tile) =&amp;gt; {                                            &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  if (isGameOver(game)) { return; }

  const newGame = revealTile(game, tile);

  if (newGame !== game) {
    history = history.push(newGame);
    game = newGame;
  }

  render();

  if (isGameOver(game)) {
    // Wait for the final render to complete before alerting the user
    setTimeout(() =&amp;gt; { alert(&apos;GAME OVER!&apos;); }, 50);
  }
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The react render entry point for the game. Called whenever the game state is changed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The JavaScript implementation keeps a history of all game states. I forgot to mention that &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;immutable-js&lt;/a&gt; is for collections.
Undo just gets the previous game state and rerenders. Nice and simple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Event listener for reveal messages. It invokes reveal tile, adds to history (and potentially ends the game).&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is all very neat and tidy and works so great because the game state is managed in one place and is passed through
 the ui component tree as an immutable value. The fact that the state is immutable also makes the undo implementation a breeze.
 I really like this approach !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_elm_4&quot;&gt;Elm&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you don&amp;#8217;t know Elm at all, this part might be the most tricky to grasp. To simplify things I&amp;#8217;ll split it into
two parts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_start_app_approach&quot;&gt;Start-app approach&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/evancz/start-app&quot;&gt;Start-app&lt;/a&gt; is a small elm package that makes it easy to get started
with an elm Model-View-Update structure. This is a great place to start for your first elm app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Action = RevealTile Int                                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;


init : Game                                                              &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
init =
  Game.createGame 15 15 5787345


update : Action -&amp;gt; Game -&amp;gt; Game                                          &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
update Action game =
  case action of
    RevealTile id -&amp;gt; if not (game.status == IN_PROGRESS) then game else  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                      Game.revealTile game id

main =                                                                   &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  StartApp.Simple.start                                                  &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
    { model = init
    , update = update
    , view = view
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Type describing the actions the game supports. Currently just revealing tiles, and you can see that
we also specify that the RevealTile action expects an Int paramater. That would be the tile id.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The init function provides the initial state for our application. &lt;code&gt;createGame&lt;/code&gt; is a helper function for creating
a game with x cols and y rows. The 3.rd param is a seed for randomizing tiles. We&amp;#8217;ll return to that seed thing in the next chapter!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Update is the function that handles the actual update of state, or rather the transformation to the next state
based on some action. It&amp;#8217;s quite simple in this case, just reveal a given tile and return the updated game&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;No point in revealing more tiles when the game is already over :)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;main&lt;/code&gt; is the entry point into our application. If you use elm-reactor this will be automatically invoked for you, which is handy for getting started quickly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;StartApp.Simple.start&lt;/code&gt; takes care of wiring things up and start your application&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_trouble_in_paradise_we_get_the_same_board_every_time&quot;&gt;Trouble in paradise, we get the same board every time&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do you remember the 3rd param to createGame in the previous chapter? That is the initial seed to a random generator (&lt;a href=&quot;http://package.elm-lang.org/packages/elm-lang/core/2.1.0/Random&quot;&gt;Random&lt;/a&gt;) to randomize the
occurence of mines. The problem is that using the same seed produces the same result. Calling an elm random
generator will return a new seed, so of course I could/should have stored that and used that for the next game.
But I still need an initial seed that&amp;#8217;s different every time I start the app. Current time would be a good candidate
for an initial seed. But there is no getCurrentTime function in Elm. Why ? It&amp;#8217;s impure, and Elm doesn&amp;#8217;t like impure functions.
By &quot;pure&quot;, we mean that if you call a function with the same arguments, you get the same result.
There are several reasons why pure functions is a great thing (testing is one), but I won&amp;#8217;t go into that, let&amp;#8217;s just accept the fact
that this is the case, so how can we deal with it ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well the elm-core package has a &lt;a href=&quot;http://package.elm-lang.org/packages/elm-lang/core/2.1.0/Time&quot;&gt;Time module&lt;/a&gt; with a timestamp function that looks useful.
To use that we have to change a few things though, most notably we can&amp;#8217;t use the simple start app approach any more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Action =
  NewGame                                                                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  | RevealTile Int



update : (Float, Action) -&amp;gt; Game -&amp;gt; Game                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
update (time, action) game =
  case action of
    NewGame -&amp;gt; Game.createGame 15 15  (truncate time)                     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    RevealTile id -&amp;gt; if not (game.status == IN_PROGRESS) then game else
                       Game.revealTile game id


actions: Signal.Mailbox Action                                            &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
actions =
  Signal.mailbox NewGame

model: Signal Game                                                        &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
model =
  Signal.foldp update init (Time.timestamp actions.signal)

main : Signal Html                                                        &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
main =
  Signal.map (view actions.address) model

port initGame : Task.Task x ()                                            &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
port initGame =
  Signal.send actions.address NewGame&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We introduce a new action &lt;code&gt;NewGame&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our update function now takes a tuple of time and action + game as input parameters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We use the elm core function &lt;code&gt;truncate&lt;/code&gt; to convert the time(stamp) float into an integer and use that as our seed to &lt;code&gt;createGame&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We construct a mailbox for our Action messages manually, with an initial value of NewGame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our model is a fold (reduce) of all state changes sent to our mailbox (from the app started to the current moment of time).
This is where we introduce the Time.timestamp function, which wraps our action signal and produces a tuple of (timestamp, action)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;main is just a map over our view function with our current model. Since view also expects an (mailbox) address we curry/partially apply that to our view function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Unfortunately I couldn&amp;#8217;t figure out how to get the timestamp passed to the init function. The creation
step (4) of the mailbox doesn&amp;#8217;t actually cause the NewGame action to be executed either. So this is a little hack
that fires off a task to execute the NewGame action. This is run after initialization so when you load the game you&amp;#8217;ll not see state 0 for the game, but actually state 1.
If any elm-ers out there reads this, feel free to comment on how this could be done in a more idiomatic fashion!&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I found &lt;a href=&quot;https://yobriefca.se/blog/2015/08/02/deconstructing-your-first-elm-app/&quot;&gt;this&lt;/a&gt; blogpost
very illuminating for deconstructing start-app.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_but_what_about_undo&quot;&gt;But what about undo ?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is an elm-package I think would help us do that quite simply;
&lt;a href=&quot;https://github.com/TheSeamau5/elm-undo-redo&quot;&gt;elm-undo-redo&lt;/a&gt;. However if you are using &lt;a href=&quot;https://github.com/elm-lang/elm-reactor&quot;&gt;elm-reactor&lt;/a&gt;
you pretty much get undo-redo and more out of the box. Great for development, but maybe not so much for production!&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/P3B4ldi1cmc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Getting into Elm has been a really pleasurable experience so far. It&amp;#8217;s quite easy to get up and running without
knowing all that much about the language. I&amp;#8217;ve found the elm compiler to be a really nice and friendly companion.
The error messages I get are really impressive and I can truly say I&amp;#8217;ve never experienced anything quite like it.
Working with types (at least for this simple application) hasn&amp;#8217;t felt like a burden at all. I still feel I should have
had some tests, but I think I would feel more comfortable refactoring this app with a lot less tests than I would in say JavaScript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If my intention for this post had been to bash JavaScript I chose a poor example to compare with. But then again
that was never my intention. I wanted to show how a well written JavaScript app might compare to an Elm implementation
written by an Elm noob. Hopefully I&amp;#8217;ve also managed to demonstrate that it&amp;#8217;s not all that difficult getting started with Elm and perhaps
peeked your interest enough to give it a try !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are some of the resources that have helped me getting up to speed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pragmaticstudio.com/elm&quot;&gt;Elm: Building Reactive Web Apps&lt;/a&gt; - A really nice step-by-step tutorial with videos and examples to get you up to speed. You get great value for $29 I think.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pragmaticstudio.com/elm-signals&quot;&gt;Elm: Signals, Mailboxes &amp;amp; Ports&lt;/a&gt; - Elm signals in depth. Really useful for getting into more detail on what Signals are, how they work and how to use them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial/&quot;&gt;Elm Architecture Tutorial&lt;/a&gt; - Tutorial outlining &quot;the Elm Architecture&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://elm-lang.org/&quot;&gt;elm-lang.org&lt;/a&gt; - The official site for the elm language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;elm-light&lt;/a&gt; - My elm plugin for Light Table, or if you use another editor it might be listed &lt;a href=&quot;http://elm-lang.org/get-started#configure-your-editor&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_addendum_potential_improvements&quot;&gt;Addendum - Potential improvements&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Initialize game with seed without adding an extra state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perhaps I should/could have used &lt;a href=&quot;http://elm-lang.org/docs/records#record-types&quot;&gt;extensible records&lt;/a&gt; to model the game&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maybe Array would be a better choice than List for holding tiles ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Elm plugin for Light Table</title>
        <link>http://rundis.github.io/blog/2015/elm_light.html</link>
        <pubDate>Fri, 30 Oct 2015 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2015/elm_light.html</guid>
          <description>
  	       &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_background&quot;&gt;Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve just started playing around a little bit with &lt;a href=&quot;http://elm-lang.org/&quot;&gt;elm&lt;/a&gt;.
This weekend I&amp;#8217;m going to &lt;a href=&quot;http://www.codemesh.io/&quot;&gt;codemesh&lt;/a&gt; where I&amp;#8217;ll be attending an Elm workshop
with the author of Elm, Evan Czaplicki.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To ensure I have an editor I&amp;#8217;m familiar with and to get me started a little, I figured I&amp;#8217;d create an Elm language plugin
for Light Table. However lately I&amp;#8217;ve been a little busy helping out  getting &lt;a href=&quot;https://github.com/LightTable/LightTable&quot; class=&quot;bare&quot;&gt;https://github.com/LightTable/LightTable&lt;/a&gt; version 0.8
released. Last weekend we got an 0.8 alpha out. I needed some of the features from Electron. So now with Light Table using
Electron under the hoods I could finally complete an intial plugin release. It&amp;#8217;s rough, but it&amp;#8217;s an ok start I suppose !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_demo&quot;&gt;Demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/B_eZw_GcM-4&quot;&gt;ScreenCast demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/B_eZw_GcM-4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_plugin&quot;&gt;The plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can find the plugin repo on github &lt;a href=&quot;https://github.com/rundis/elm-light&quot; class=&quot;bare&quot;&gt;https://github.com/rundis/elm-light&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>

  </channel>
</rss>
