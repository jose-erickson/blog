<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ElmRundis</title>
    <link>http://rundis.github.io/blog</link>
    <atom:link href="http://rundis.github.io/blog/elmfeed.xml" rel="self" type="application/rss+xml" />
    <description>Elm feed from rundis.github.com/blog</description>
    <language>en-gb</language>
    <pubDate>Wed, 20 Jan 2016 12:39:42 +0100</pubDate>
    <lastBuildDate>Wed, 20 Jan 2016 12:39:42 +0100</lastBuildDate>

      <item>
        <title>Typed up CRUD SPA with Haskell and Elm - Part 3: Routing</title>
        <link>http://rundis.github.io/blog/2016/haskel_elm_spa_part3.html</link>
        <pubDate>Tue, 19 Jan 2016 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2016/haskel_elm_spa_part3.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any serious Single Page Application needs to have routing. Right ? So before we add
any further pages it&amp;#8217;s time to add routing support to the Elm frontend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;http://rundis.github.io/blog/2016/haskel_elm_spa_part2.html&quot;&gt;episode 2&lt;/a&gt;, we implemented
a Micky Mouse solution for page routing. Clearly that approach won&amp;#8217;t scale. Now is a good time to
implement something that can handle multiple pages, history navigation, direct linking etc.
We could do it all from scratch, but lets opt for pulling in a library.
In this episode we&amp;#8217;ll introduce &lt;a href=&quot;https://github.com/etaque/elm-transit-router&quot;&gt;elm-transit-router&lt;/a&gt;
to the &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;Albums&lt;/a&gt; sample application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Useful resources&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check out the other &lt;a href=&quot;http://rundis.github.io/blog/tags/haskellelmspa.html&quot;&gt;episodes&lt;/a&gt; in this blog series.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The accompanying &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;Albums&lt;/a&gt; sample app is on github, and there is a tag
for each episode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I decided pretty early on to try out the &lt;a href=&quot;https://github.com/etaque/elm-transit-router&quot;&gt;elm-transit-router&lt;/a&gt; library.
It seemed to cover most of what I was looking for. It even has some pretty cool support for animations when doing page transitions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Static typing is supposed to be really helpful when doing refactoring. Introducing routing should be a nice little excercise to
see if that holds. Remember, there still isn&amp;#8217;t a single test in our sample app, so it better hold.
The elm-transit-router library github repo contains a great example app that proved very helpful
in getting it up and running for the Albums app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;a href=&quot;https://github.com/sporto/hop&quot;&gt;Hop&lt;/a&gt; is an alternative routing library you might want to check out too.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/5o4sAxnk3U4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_implementation_changes&quot;&gt;Implementation changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/elm-package.json&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  // (...
  &quot;source-directories&quot;: [
        &quot;.&quot;,
        &quot;src/&quot;                                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    ],

  // ...
  &quot;dependencies&quot;: {
    //... others ommitted
    &quot;etaque/elm-route-parser&quot;: &quot;2.1.0 &amp;lt;= v &amp;lt; 3.0.0&quot;,       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &quot;etaque/elm-transit-style&quot;: &quot;1.0.1 &amp;lt;= v &amp;lt; 2.0.0&quot;,      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &quot;etaque/elm-transit-router&quot;: &quot;1.0.1 &amp;lt;= v &amp;lt; 2.0.0&quot;      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

  }
  ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;ve moved all elm files but Main.elm to the a src sub directory. So we need to add src to the list of source directories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A typed route parser with a nice DSL in Elm: We use it for defining our routes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Html animations for &lt;a href=&quot;https://github.com/etaque/elm-transit&quot;&gt;elm-transit&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Drop-in router with animated route transitions for single page apps in Elm. Drop in, as in fitting very nicely with &lt;a href=&quot;https://github.com/evancz/start-app&quot;&gt;elm start-app&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Album dependencies&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;http://rundis.github.io/blog/2016/albums_dependencies_large.png&quot;&gt;&lt;img src=&quot;http://rundis.github.io/blog/2016/albums_dependencies_small.png&quot; alt=&quot;Click for larger diagram&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The addition of the 3 new dependencies also adds quite a few transitive dependencies. The diagram
above is automatically generated by the &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;elm-light&lt;/a&gt; plugin for Light Table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Defining routes (frontend/src/Routes.elm)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Route                                                   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  = Home
  | ArtistListingPage
  | ArtistDetailPage Int
  | NewArtistPage
  | EmptyRoute


routeParsers : List (Matcher Route)
routeParsers =
  [ static Home &quot;/&quot;                                         &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  , static ArtistListingPage &quot;/artists&quot;
  , static NewArtistPage &quot;/artists/new&quot;
  , dyn1 ArtistDetailPage &quot;/artists/&quot; int &quot;&quot;                &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  ]


decode : String -&amp;gt; Route
decode path =                                               &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  RouteParser.match routeParsers path
    |&amp;gt; Maybe.withDefault EmptyRoute


encode : Route -&amp;gt; String
encode route =                                              &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  case route of
    Home -&amp;gt; &quot;/&quot;
    ArtistListingPage   -&amp;gt; &quot;/artists&quot;
    NewArtistPage       -&amp;gt; &quot;/artists/new&quot;
    ArtistDetailPage  i -&amp;gt; &quot;/artists/&quot; ++ toString i
    EmptyRoute -&amp;gt; &quot;&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Union type that defines the different routes for the application&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A static route matcher (&lt;code&gt;static&lt;/code&gt; is a function from the RouteParser dsl)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Dynamic route matcher with one dynamic param&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We try to match a given path with the route matchers defined above. Returns route of first successful match, or the &lt;code&gt;EmptyRoute&lt;/code&gt; route
if no match is found.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Encode a given route as a path&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A few handy router utils (frontend/src/Routes.elm)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;redirect : Route -&amp;gt; Effects ()
redirect route =                                       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  encode route
    |&amp;gt; Signal.send TransitRouter.pushPathAddress
    |&amp;gt; Effects.task


clickAttr : Route -&amp;gt; Attribute
clickAttr route =                                     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  on &quot;click&quot; Json.value (\_ -&amp;gt;  Signal.message TransitRouter.pushPathAddress &amp;lt;| encode route)


linkAttrs : Route -&amp;gt; List Attribute
linkAttrs route =                                     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  let
    path = encode route
  in
    [ href path
    , onWithOptions
        &quot;click&quot;
        { stopPropagation = True, preventDefault = True }
        Json.value
        (\_ -&amp;gt;  Signal.message TransitRouter.pushPathAddress path)
    ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This function allows us to perform routing through a redirect kind of effect. Comes in handy when we need to switch
routes as a result of performing a task or doing an update action of some sort.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Helper function that creates a click handler attribute. When clicked the signal is forwarded to an address of the internal mailbox for the
elm-transit-router library. By means of delegation the internal TransitRouter.Action type is wrapped into our app&amp;#8217;s Action type.
We&amp;#8217;ll get back to this when we wire it all together !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Another helper function, similar to clickAttr, but this is more specific for links that also has a href attribute&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_changes_in_main_elm&quot;&gt;Changes in Main.elm&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Too hook in elm-transit-router we need to make a couple of changes to how we wire up our model, actions, view and update function.
It&amp;#8217;s also worth noting that from episode 2 have removed all direct update delegation from ArtistListing to ArtistDetail, this now
all will happen through route transitions. An immediate benefit of that is that the ArtistDetail page becomes much more reusable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Model, actions, transitions and initialization&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Model = WithRoute Routes.Route                                &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { homeModel : Home.Model
  , artistListingModel : ArtistListing.Model
  , artistDetailModel : ArtistDetail.Model
  }


type Action =
    NoOp
  | HomeAction Home.Action
  | ArtistListingAction ArtistListing.Action
  | ArtistDetailAction ArtistDetail.Action
  | RouterAction (TransitRouter.Action Routes.Route)                    &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;


initialModel : Model
initialModel =
  { transitRouter = TransitRouter.empty Routes.EmptyRoute               &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  , homeModel = Home.init
  , artistListingModel = ArtistListing.init
  , artistDetailModel = ArtistDetail.init
  }


actions : Signal Action
actions =
  Signal.map RouterAction TransitRouter.actions                         &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;


mountRoute : Route -&amp;gt; Route -&amp;gt; Model -&amp;gt; (Model, Effects Action)
mountRoute prevRoute route model =                                      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  case route of

    Home -&amp;gt;
      (model, Effects.none)

    ArtistListingPage -&amp;gt;                                                &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
      (model, Effects.map ArtistListingAction (ServerApi.getArtists ArtistListing.HandleArtistsRetrieved))

    ArtistDetailPage artistId -&amp;gt;
      (model, Effects.map ArtistDetailAction (ServerApi.getArtist artistId ArtistDetail.ShowArtist))

    NewArtistPage -&amp;gt;
      ({ model | artistDetailModel = ArtistDetail.init } , Effects.none)

    EmptyRoute -&amp;gt;
      (model, Effects.none)


routerConfig : TransitRouter.Config Routes.Route Action Model
routerConfig =                                                          &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
  { mountRoute = mountRoute
  , getDurations = \_ _ _ -&amp;gt; (50, 200)
  , actionWrapper = RouterAction
  , routeDecoder = Routes.decode
  }


init : String -&amp;gt; (Model, Effects Action)
init path =                                                             &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
  TransitRouter.init routerConfig path initialModel&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We extend our model using &lt;code&gt;WithRoute&lt;/code&gt; for our Route type in routes. This extends our type with a transitRouter property&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We add a RouteAction to our Action type. We will handle that explicitly in the update function we&amp;#8217;ll cover in the next section&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We define an initial model, which has the initial models for the various pages. In addition we initialize the transitRouter property
with an empty state and EmptyRoute route (that didn&amp;#8217;t read to well). Basically a route that shouldn&amp;#8217;t render anything, because it will transition
to an actual route. It&amp;#8217;s just an intermediary&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Transformer for mapping TransitRouter actions to our own RouterAction. This allows start-app to map external input signals to inputs with an action type our application
can recognize and process.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;mountRoute is a function that provides what we want to happen in our &lt;code&gt;update&lt;/code&gt; when a new route is mounted. Currently we
only pattern match on route to be mounted, but we could also match on the combination of previous route and new route to provide
custom behaviour depending on where you came from and where your are going to. Very powerful !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When the ArtistListingPage route is mounted we return an effect to retrieve artists (when that effect returns the &lt;code&gt;ArtistListing.HandleArtistRetrieved&lt;/code&gt; action is then eventually passed to the update function of ArtistListing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;routerConfig&lt;/code&gt; wires together the various bits that TransitRouter needs to do it&amp;#8217;s thing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The init function now just initializes the TransitRouter with our config, and initial path (which we receive from a port) and our Initial model&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s quite a bit going on here, but once this is all in place, adding new routes is quite a breeze. I&amp;#8217;d recommend reading
through the Readme for &lt;a href=&quot;https://github.com/etaque/elm-transit-router&quot;&gt;elm-transit-router&lt;/a&gt; to understand more about the details of each step&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The update function&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;update : Action -&amp;gt; Model -&amp;gt; (Model, Effects Action)
update action model =
  case action of

    NoOp -&amp;gt;
      (model, Effects.none)

    HomeAction homeAction -&amp;gt;
      let (model&apos;, effects) = Home.update homeAction model.homeModel
      in ( { model | homeModel = model&apos; }
         , Effects.map HomeAction effects )

    ArtistListingAction act -&amp;gt;                                                       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      let (model&apos;, effects) = ArtistListing.update act model.artistListingModel
      in ( { model | artistListingModel = model&apos; }
         , Effects.map ArtistListingAction effects )

    ArtistDetailAction act -&amp;gt;                                                        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      let (model&apos;, effects) = ArtistDetail.update act model.artistDetailModel
      in ( { model | artistDetailModel = model&apos; }
         , Effects.map ArtistDetailAction effects )

    RouterAction routeAction -&amp;gt;                                                      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      TransitRouter.update routerConfig routeAction model&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;You should recognize this pattern from the previous episode. We delegate all actions tagged with ArtistListingAction
to the update function for ArtistListing. The we update the model with the updated model from ArtistListing and
map any effects returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If you remember from &lt;a href=&quot;http://rundis.github.io/blog/2016/haskel_elm_spa_part2.html&quot;&gt;episode 2&lt;/a&gt; this used to reside in ArtistListing, but
has been moved here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;RouterAction&lt;/code&gt; action types are handled by the update function in TransitRouter. If you Debug.log this function you will see this
is called repeadly when there is a transition from one route to the next. (To handle the animation effects most notably)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The main view/layout&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;menu : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
menu address model =                                                       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  header [class &quot;navbar navbar-default&quot;] [
    div [class &quot;container&quot;] [
        div [class &quot;navbar-header&quot;] [
          div [ class &quot;navbar-brand&quot; ] [
            a (linkAttrs Home) [ text &quot;Albums galore&quot; ]
          ]
        ]
      , ul [class &quot;nav navbar-nav&quot;] [
          li [] [a (linkAttrs ArtistListingPage) [ text &quot;Artists&quot; ]]       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      ]
    ]
  ]



contentView : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
contentView address model =                                                &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  case (TransitRouter.getRoute model) of
    Home -&amp;gt;
      Home.view (Signal.forwardTo address HomeAction) model.homeModel

    ArtistListingPage -&amp;gt;                                                   &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
      ArtistListing.view (Signal.forwardTo address ArtistListingAction) model.artistListingModel

    ArtistDetailPage i -&amp;gt;
      ArtistDetail.view (Signal.forwardTo address ArtistDetailAction) model.artistDetailModel

    NewArtistPage  -&amp;gt;
      ArtistDetail.view (Signal.forwardTo address ArtistDetailAction) model.artistDetailModel

    EmptyRoute -&amp;gt;
      text &quot;Empty WHAT ?&quot;


view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =
  div [class &quot;container-fluid&quot;] [
      menu address model
    , div [ class &quot;content&quot;
          , style (TransitStyle.fadeSlideLeft 100 (getTransition model))]  &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
          [contentView address model]
  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Menu view function for the app&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Here we use the &lt;code&gt;linkAttrs&lt;/code&gt; util function from Routes.elm to get a click handler. When the link is click
a route transition to the given page will occur (with addressbar update, history tracking and the whole shebang)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We render the appropriate main content view based which route is current in our model.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Getting the view for a page is used in the typical start-app way. Call the view function of the sub component and make sure
to provide a forwarding addres that main can handle in its update function !&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We define the route transition animation using the style attribute (function) in elm-html. Here we use a transition style
defined in &lt;a href=&quot;https://github.com/etaque/elm-transit-style&quot;&gt;elm-transit-style&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_how_to_navigate_from_one_page_to_another&quot;&gt;How to navigate from one page to another ?&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Move from artistlisting to artistdetail (frontend/src/ArtistListing.elm)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;artistRow : Signal.Address Action -&amp;gt; Artist -&amp;gt; Html
artistRow address artist =
  tr [] [
     td [] [text artist.name]
    ,td [] [button [ Routes.clickAttr &amp;lt;| Routes.ArtistDetailPage artist.id ] [text &quot;Edit&quot;]]  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    ,td [] [button [ onClick address (DeleteArtist (.id artist))] [ text &quot;Delete!&quot; ]]
  ]


view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =
  div [] [
      h1 [] [text &quot;Artists&quot; ]
    , button [
            class &quot;pull-right btn btn-default&quot;
          , Routes.clickAttr Routes.NewArtistPage                                            &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        ]
        [text &quot;New Artist&quot;]
    , table [class &quot;table table-striped&quot;] [
          thead [] [
            tr [] [
               th [] [text &quot;Name&quot;]
              ,th [] []
              ,th [] []
          ]
        ]
        , tbody [] (List.map (artistRow address) model.artists)
    ]
  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For navigation using links we just use the util function &lt;code&gt;Routes.clickAttr&lt;/code&gt; function we defined earlier. This will trigger the necessary
route transition to the appropriate page (with params as necessary)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;It&amp;#8217;s worth noting that we since episode 2 have introduced a separate route for handling NewArtist (&lt;code&gt;/artists/new&lt;/code&gt;). We are still
using the same behaviour otherwise, so it&amp;#8217;s just a minor modification to have a separate transition for a new artist (since that doesn&amp;#8217;t have a numeric id as part of its route path)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Move to the artist listing after saving an artist (frontend/src/ArtistDetail.elm)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;  -- ... inside update function

  HandleSaved maybeArtist -&amp;gt;
      case maybeArtist of
        Just artist -&amp;gt;
          ({ model | id = Just artist.id
                   , name = artist.name }
            , Effects.map (\_ -&amp;gt; NoOp) (Routes.redirect Routes.ArtistListingPage)   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
          )

        Nothing -&amp;gt;
          Debug.crash &quot;Save failed... we&apos;re not handling it...&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We use the &lt;code&gt;Routes.redirect&lt;/code&gt; function we defined earlier. When the task fro saving is completed we trigger an effect
that will transtion route to the ArtistListing page. To allow the effect to work in our update function we need to map it to
an action that ArtistDetail knows about (we don&amp;#8217;t have access to the RouterAction in main here!). That&amp;#8217;s why we map the effect
to a NoOp action.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the_final_wiring&quot;&gt;The final wiring&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/main.elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;app : StartApp.App Model
app =
  StartApp.start
    { init = init initialPath                  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    , update = update
    , view = view
    , inputs = [actions]                       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }


main : Signal Html
main =
  app.html


port tasks : Signal (Task.Task Never ())
port tasks =
  app.tasks


port initialPath : String                      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We call the init function previously defined with a initialPath (which we get from a port, see 3 below)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The inputs fields of the start-app config is for external signals. We wire it to our &lt;code&gt;actions&lt;/code&gt; defintion defined earlier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We get the initialPath through a port from JavaScript. See the next section for how&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Initially I forgot to wire up the inputs. The net result of that was that none of the links actually did anything.
Was lost for a while there, but the author of elm-transit-router &lt;a href=&quot;https://github.com/etaque&quot;&gt;etaque&lt;/a&gt; was able to spot it easily
when I reached out in the &lt;a href=&quot;http://elmlang.herokuapp.com/&quot;&gt;elm-lang slack channel&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/index.html&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Albums&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;assets/css/bootstrap.min.css&quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;main.js&quot;&amp;gt;&amp;lt;/script&amp;gt;                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;/_reactor/debug.js&quot;&amp;gt;&amp;lt;/script&amp;gt;      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      var main = Elm.fullscreen(Elm.Main, {initialPath: &quot;/&quot;});             &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &amp;lt;/script&amp;gt;

  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is the transpiled elm to js for our frontend app&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We don&amp;#8217;t really need this one, but if reactor in debug mode had worked with ports this would be necessary for debug tracing etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We start our elm app with an input param for our initialPath. This is sent to the port defined above. It&amp;#8217;s currently hardcoded to &lt;code&gt;/&lt;/code&gt; (home), but
once we move to a proper web server we would probably use something like window.location.pathname to allow linking directly to
a specific route within our Single Page App.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary_and_next_steps&quot;&gt;Summary and next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was an all Elm episode. Hopefully I didn&amp;#8217;t loose all Haskellites along the way because of that. We&amp;#8217;ve added a crucial
feature for any Single Page (Web) Application in this episode. The end result was pretty neat and tidy too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So how was the refactoring experience this time ? Well the compiler was certainly my best buddy along the way. Obviously I also
had to consult the documentation of elm-transit-router quite often. i had a few times where things appeared to be compiling fine
in Light Table, but actually there was some error in a Module referred by Main. I&amp;#8217;m not sure if it&amp;#8217;s make&amp;#8217;s fault or just that there is
something missing in the elm-light plugin. I&amp;#8217;ll certainly look into that. Always handy to have the command line available when you&amp;#8217;re
not sure about whether your IDE/Editor is tripping you up or not. I don&amp;#8217;t think tests would have caught many of the issues I encountered.
Forgetting to wire up inputs to startapp was probably my biggest blunder, and I&amp;#8217;m sure no test would have covered that. I needed to know that this
was something I had to wire up for it to work. RTFM etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next up I think we will look at how much effort there is to add additional features. The hypothesis is that it should be
fairly straighforward, but who knows !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Typed up CRUD SPA with Haskell and Elm - Part 2: Persistence up and running</title>
        <link>http://rundis.github.io/blog/2016/haskel_elm_spa_part2.html</link>
        <pubDate>Thu, 14 Jan 2016 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2016/haskel_elm_spa_part2.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My journey into Elm and Haskell continues. It&amp;#8217;s time to add database support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since &lt;a href=&quot;http://rundis.github.io/blog/2015/haskell_elm_spa_part1.html&quot;&gt;episode 1&lt;/a&gt; I&amp;#8217;ve
managed to implement simple CRUD features for the Artist entity of the &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;Albums&lt;/a&gt; sample application.
It&amp;#8217;s been anything but plain sailing, but it&amp;#8217;s been a blast so far. Trying to wrap my head around two
new languages and their libraries in parallell is somewhat daunting. The journey would probably
have been smoother if I took more time to learn the language proper. Learning by doing is at times
frustrating, at the same time very rewarding when stuff finally works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There seems to be a pretty close correlation between &lt;strong&gt;it compiles&lt;/strong&gt; and &lt;strong&gt;it works&lt;/strong&gt; when programming
in Elm and Haskell&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Magnus&lt;br&gt;
&lt;cite&gt;(yeah I know; correlation does not imply causation)&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_backend&quot;&gt;Backend&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_adding_cors_support&quot;&gt;Adding cors support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_enter_sqlite&quot;&gt;Enter SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_backend_summary&quot;&gt;Backend summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_frontend&quot;&gt;Frontend&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_frontend_summary&quot;&gt;Frontend summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_conclusion_and_next_steps&quot;&gt;Conclusion and next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_overview&quot;&gt;Overview&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Useful resources&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check out the other &lt;a href=&quot;http://rundis.github.io/blog/tags/haskellelmspa.html&quot;&gt;episodes&lt;/a&gt; in this blog series.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The accompanying &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;Albums&lt;/a&gt; sample app is on github, and there is a tag
for each episode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;So what have I done for this episode ?&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added persistence support to the haskell/servant backend server using &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REST API now supports POST, PUT, DELETE and GET (multiple/single) Artists&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Elm frontend has features for listing, deleting, updating and creating new artists&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2016/albumlistingpage.png&quot; alt=&quot;albumlistingpage&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve taken a bottom up approach to developing the features. For both the Frontend and the Backend I&amp;#8217;ve
implemented everything in one module. After that I&amp;#8217;ve done pretty substantial refactorings into smaller
modules while letting the respective compilers guide me along the way. So how did that work out ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_backend&quot;&gt;Backend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pretty early on I managed to get &lt;a href=&quot;https://github.com/lukexi/halive&quot;&gt;halive&lt;/a&gt; to start working. Having live recompiling is
really nice and seriously improved my workflow. I have very limited editor support because my editor (&lt;a href=&quot;https://github.com/LightTable/LightTable&quot;&gt;Light Table&lt;/a&gt;)
currently doesn&amp;#8217;t provide much in terms of haskell support. I was almost derailed with developing a Haskell plugin (or making the existing one work), but
managed to keep on track.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_adding_cors_support&quot;&gt;Adding cors support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During development of the spike for the previous episode I used a chrome plugin to get around CORS
restrictions from my browser. Surely this has to be solvable ? Indeed it was, &lt;a href=&quot;https://github.com/larskuhtz/wai-cors&quot;&gt;wai-cors&lt;/a&gt; to the rescue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/albums.cabal&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;  build-depends:
    -- ...
    ,  wai-cors
    -- ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/src/Main.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;;....

import Network.Wai.Middleware.Cors

;....

albumCors :: Middleware
albumCors = cors $ const (Just albumResourcePolicy)                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;


albumResourcePolicy :: CorsResourcePolicy                                       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
albumResourcePolicy =
    CorsResourcePolicy
        { corsOrigins = Nothing -- gives you /*
        , corsMethods = [&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;HEAD&quot;, &quot;OPTION&quot;]
        , corsRequestHeaders = simpleHeaders -- adds &quot;Content-Type&quot; to defaults
        , corsExposedHeaders = Nothing
        , corsMaxAge = Nothing
        , corsVaryOrigin = False
        , corsRequireOrigin = False
        , corsIgnoreFailures = False
        }


main :: IO ()
main = do
  run 8081 $ albumCors $ app                                                    &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define wai cors middleware&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define a cors policy. This one is very lax. You wouldn&amp;#8217;t want to use this for anything public facing as is&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Apply the middleware to our app. Now cross origin headers are added and OPTION prefligh requests are supported. Nice&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Cors inspiration harvested from &lt;a href=&quot;https://github.com/nicklawls/lessons&quot; class=&quot;bare&quot;&gt;https://github.com/nicklawls/lessons&lt;/a&gt; btw
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_enter_sqlite&quot;&gt;Enter SQLite&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I looked at a few different options for database support. Most examples and tutorials related
to servant and database usage seems to favor &lt;a href=&quot;http://www.yesodweb.com/book/persistent&quot;&gt;persistent&lt;/a&gt;.
I&amp;#8217;m surely going to have a closer look at that, but my initial impression was that perhaps there was just
a little bit to much going on there. Just a little bit to much &quot;magic&quot; ? Having lost my taste
for ORM&amp;#8217;s in the JVM spehere (hibernate in particular) I wanted to start with something closer to the metal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So to make it a little harder for myself I went for the &lt;a href=&quot;https://github.com/nurpax/sqlite-simple&quot;&gt;sqlite-simple&lt;/a&gt; library.
Pretty happy with the choice so far.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/albums.cabal&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;  build-depends:
    -- ...
    , sqlite-simple
    -- ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/Main.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;{-# LANGUAGE OverloadedStrings #-}
module Main where


import qualified Storage as S                              &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
import qualified Api as A                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
import Network.Wai
import Network.Wai.Handler.Warp
import Servant
import Network.Wai.Middleware.Cors
import Control.Exception (bracket)
import Database.SQLite.Simple as Sql


app :: Sql.Connection -&amp;gt; Application
app conn = serve A.api (A.artistsServer conn)              &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;


testConnect :: IO Sql.Connection
testConnect = Sql.open &quot;:memory:&quot;                          &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;


withTestConnection :: (Sql.Connection -&amp;gt; IO a) -&amp;gt; IO a
withTestConnection cb =                                    &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  withConn $ \conn -&amp;gt; cb conn
  where
    withConn = bracket testConnect Sql.close               &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

{-
  ...
  cors stuff omitted, already covered
-}


main :: IO ()
main = do
  withTestConnection $ \conn -&amp;gt;  do
    S.bootstrapDB conn                                     &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
    run 8081 $ albumCors $ app conn                        &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Module with functions for communication with the Albums database. Only used for bootstrapping with test data in main&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Module that defines the webservice api&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We make sure to pass a connection to our webservice server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For simplicity we are using an in memory database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Wrap a function (cb) giving it a connection and cleaning up when done&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bracket&lt;/code&gt; ensures we also release the connection in case of any exceptions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Creates schema and bootstraps with some sample data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Ensure we pass the connection to our app function&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Read more about the &lt;a href=&quot;https://wiki.haskell.org/Bracket_pattern&quot;&gt;bracket pattern&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/Api.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE DataKinds     #-}

module Api where

import qualified Model as M                           &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
import qualified Storage as S
import Data.Aeson
import Control.Monad.IO.Class     (MonadIO, liftIO)
import Control.Monad.Trans.Either
import Servant
import Database.SQLite.Simple as Sql


instance ToJSON M.Artist
instance FromJSON M.Artist


type ArtistAPI =                                       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
       Get &apos;[JSON] [M.Artist]
  :&amp;lt;|&amp;gt; ReqBody &apos;[JSON] M.Artist :&amp;gt; Post &apos;[JSON] M.Artist
  :&amp;lt;|&amp;gt; Capture &quot;artistId&quot; Int :&amp;gt; Get &apos;[JSON] M.Artist
  :&amp;lt;|&amp;gt; Capture &quot;artistId&quot; Int :&amp;gt; ReqBody &apos;[JSON] M.Artist :&amp;gt; Put &apos;[JSON] M.Artist
  :&amp;lt;|&amp;gt; Capture &quot;artistId&quot; Int :&amp;gt; Delete &apos;[] ()

-- &apos;

artistsServer :: Sql.Connection -&amp;gt; Server ArtistAPI    &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
artistsServer conn =
  getArtists :&amp;lt;|&amp;gt; postArtist :&amp;lt;|&amp;gt; getArtist :&amp;lt;|&amp;gt;  updateArtist :&amp;lt;|&amp;gt; deleteArtist

  where
    getArtists                   = liftIO $ S.findArtists conn     &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    getArtist artistId           = liftIOMaybeToEither err404 $ S.artistById conn artistId
    postArtist artist            = liftIO $ S.newArtist conn artist
    updateArtist artistId artist = liftIO $ S.updateArtist conn artist artistId
    deleteArtist artistId        = liftIO $ S.deleteArtist conn artistId


liftIOMaybeToEither ::  (MonadIO m) =&amp;gt; a -&amp;gt; IO (Maybe b) -&amp;gt; EitherT a m b
liftIOMaybeToEither err x = do                         &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    m &amp;lt;- liftIO x
    case m of
      Nothing -&amp;gt; left err
      Just x -&amp;gt; right x


type API = &quot;artists&quot; :&amp;gt; ArtistAPI


api :: Proxy API
api = Proxy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The record definitions for our API lives in this module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;ve extended the api type defintions from &lt;a href=&quot;http://rundis.github.io/blog/2015/haskell_elm_spa_part1.html#_main_hs&quot;&gt;episode 1&lt;/a&gt;
to define the shape of get multiple, get single, post, put and delete.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Connection has been added as a parameter to our artist server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;liftIO&lt;/code&gt; is a &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Monad_transformers&quot;&gt;monad transformer&lt;/a&gt;. I&amp;#8217;d love to be able to explain
how it works, but well&amp;#8230;&amp;#8203; Anyways net result is that I don&amp;#8217;t have to define &lt;code&gt;EitherT ServantErr IO ..&lt;/code&gt; all over the place&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;liftIOMaybeToEither&lt;/code&gt; - what it says. Handy function to return a servant error (which again maps to a http error) if a function like getArtist doesn&amp;#8217;t return
a result. Tx to ToJans for &lt;a href=&quot;https://gist.github.com/ToJans/233f82087ee7b385e6e1&quot;&gt;inspiration&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
put aka update artist should also return a 404 when a non existing artist id is provided.
Actually, error handling is pretty light throughout, but we&amp;#8217;ll get back to that in a later episode !
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;/backend/Model.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;{-# LANGUAGE DeriveGeneric #-}

module Model where

import GHC.Generics

data Artist = Artist                &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { artistId :: Maybe Int           &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  , artistName :: String            &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  } deriving (Eq, Show, Generic)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Moved record defintions to a separate module. Currently just Artist&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Make id optional. This is a quick and dirty way to be able to use the same
record definiton for new artists as for updates and gets.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Names in records are not scoped withing the record so one solution is to manually
make sure names stay unique.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
From what I gather record syntax is a bit clunky in Haskell (atleast when compared to Elm).
This &lt;a href=&quot;http://stackoverflow.com/questions/6922437/haskell-any-way-to-qualify-or-disambiguate-record-names&quot;&gt;stackoverflow post&lt;/a&gt;
didn&amp;#8217;t bring any warm fuzzy feelings. If anyone has some better solutions which also plays
well with the handy servant and SQLite simple functions feel free to leave a comment below !
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;backend/Storage.hs&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;{-# LANGUAGE OverloadedStrings #-}
module Storage where


import qualified Model as M
import qualified Data.Text as Txt


import Database.SQLite.Simple as Sql
import Database.SQLite.Simple.Types as SqlTypes


instance Sql.FromRow M.Artist where                         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  fromRow = M.Artist &amp;lt;$&amp;gt; Sql.field &amp;lt;*&amp;gt; Sql.field



artistById :: Sql.Connection -&amp;gt; Int -&amp;gt; IO (Maybe M.Artist)  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
artistById conn idParam =
  findById conn &quot;artist&quot; idParam :: IO (Maybe M.Artist)


findArtists :: Sql.Connection -&amp;gt; IO [M.Artist]
findArtists conn =
  Sql.query_ conn &quot;select * from artist&quot; :: IO [M.Artist]


newArtist :: Sql.Connection -&amp;gt; M.Artist -&amp;gt; IO M.Artist
newArtist conn artist = do
  Sql.execute conn &quot;insert into artist (name) values (?) &quot; (Sql.Only $ M.artistName artist)
  rawId &amp;lt;- lastInsertRowId conn
  let updArtist = artist { M.artistId = Just (fromIntegral rawId) }  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  return updArtist


-- Really we should check whether the artist exists here
updateArtist :: Sql.Connection -&amp;gt; M.Artist -&amp;gt; Int -&amp;gt; IO M.Artist
updateArtist conn artist idParam = do
  Sql.executeNamed conn &quot;update artist set name = :name where id = :id&quot; params
  return artist { M.artistId = Just idParam }                        &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  where
    params = [&quot;:id&quot; := (idParam :: Int), &quot;:name&quot; := ((M.artistName artist) :: String)]


deleteArtist :: Sql.Connection -&amp;gt; Int -&amp;gt; IO ()
deleteArtist conn idParam =
  Sql.execute conn &quot;delete from artist where id = ?&quot; (Sql.Only idParam)


findById :: (FromRow a) =&amp;gt; Sql.Connection -&amp;gt; String -&amp;gt; Int -&amp;gt; IO (Maybe a)
findById conn table idParam = do
  rows &amp;lt;- Sql.queryNamed conn (createFindByIdQuery table) [&quot;:id&quot; := (idParam :: Int)]
  let result = case (length rows) of
                  0 -&amp;gt; Nothing
                  _ -&amp;gt; Just $ head rows      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

  return result


createFindByIdQuery :: String -&amp;gt; SqlTypes.Query
createFindByIdQuery table =
  SqlTypes.Query $ Txt.pack $ &quot;SELECT * from &quot; ++ table ++ &quot; where id = :id&quot;   &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

-- ... boostrap function left out, check the source repo for details&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define SQLite row converter to create artist records for rows with id and name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Finding an artist by Id may return empty results. Prematurely factored out a generic findById function that is used here&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the id of the newly inserted artist row to the resulting artist. (The Maybe artistId starts to smell)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Yuck, this smells even worse. The decision to support an optional id on the Artist record doesn&amp;#8217;t ring true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Using let allows us to &quot;work inside&quot; the IO monad. Otherwise the compiler complains along the lines of &lt;code&gt;Couldn&amp;#8217;t match expected type ‘[r1]’ with actual type ‘IO [r0]’&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Whacking strings together is discouraged (helps avoid sql injection for one), but getting around it is possible with a little serimony&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_backend_summary&quot;&gt;Backend summary&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well now we got persistence up and running with a good ole&apos; relational database. That&amp;#8217;s
not very exciting and I might return to change that in a future episode. The REST api is quite simple and lacking in validation and error handling, but it&amp;#8217;s hopefully a decent start and foundation
for future changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After working with Clojure and Leiningen not to long ago, the server startup time feels blistering fast in comparison.
Getting halive to work made significant improvements to the development workflow.
When working with Haskell I get a constant reminder that I would benefit from learning more about the language
and fundemental concepts. The compiler messages still throws me off a lot of times, but the situation is gradually improving as I&amp;#8217;m learning.
I guess I&amp;#8217;m already spoilt with the error messages from Elm which feels a lot clearer and better at highlighting the root cause(s) of my mistakes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m still fumbling to design a sensible structure for the custom data types. I have a feeling
several iterations will be needed as I add support for additional services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_frontend&quot;&gt;Frontend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s a shame the hot reloading support in elm-reactor is broken at the time of writing, otherwise the development experience
would have been a lot better. &lt;code&gt;Make&lt;/code&gt; &amp;#8594; &lt;code&gt;reload browser&lt;/code&gt; is just a keystroak away in Light Table, but still.
Having the informative compiler error and warning messages inline in my Editor is really nice though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Do better understand the elm-architecture I&amp;#8217;ve tried to follow, you should really check out the
&lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial&quot;&gt;tutorial&lt;/a&gt;. It does a much better job at explaining the core
concepts than I do.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2016/albums_pages.png&quot; alt=&quot;albums pages&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/Main.elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;module Main where


import ArtistListing
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick)
import Task exposing (..)
import Effects exposing (Effects, Never)
import StartApp


type alias Model =                                    &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { artistListing : ArtistListing.Model}


type Action =                                         &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    ShowHomePage
  | ArtistListingAction ArtistListing.Action


init : (Model, Effects Action)                        &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
init =
  let
    (artistListing, fx) = ArtistListing.init
  in
    ( Model artistListing
      , Effects.map ArtistListingAction fx            &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    )




update : Action -&amp;gt; Model -&amp;gt; (Model, Effects Action)
update action model =
  case action of

    ShowHomePage -&amp;gt;                                   &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
      let
        (artistListing, fx) = ArtistListing.init
      in
        ( {model | artistListing = artistListing}
        , Effects.map ArtistListingAction fx
        )

    ArtistListingAction sub -&amp;gt;                        &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
      let
        (artistListing, fx) = ArtistListing.update sub model.artistListing
      in
        ( {model | artistListing = artistListing}
        , Effects.map ArtistListingAction fx
        )


menu : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
menu address model =
  header [class &quot;navbar navbar-default&quot;] [
    div [class &quot;container&quot;] [
      div [class &quot;navbar-header&quot;] [
        button [ class &quot;btn-link navbar-brand&quot;, onClick address ShowHomePage ]
        [text &quot;Albums Crud&quot;]
      ]
    ]
  ]


view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =
  div [class &quot;container-fluid&quot;] [
      menu address model   &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
    , ArtistListing.view (Signal.forwardTo address ArtistListingAction) model.artistListing
  ]

-- ... app, main and port for tasks left out, no changes since previous episode&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The main model composes the artistlisting page model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Actions for main, currently just holds the actions for ArtistListing + a convenience action to reset/show home page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The init function from ArtistListing returns it&amp;#8217;s model and an effect (get artist from server task). We initialize the
main model with the artistlisting model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We map the effect from ArtistListing to an Main module effect which is then handled by the startapp &quot;signal loop&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Quick and dirty way to trigger showing of the artist listing page (re-initialized)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;All ArtistListing actions are tagged with ArtistListingAction, we delegate to the update function for ArtistListing
, update the main model accordingly and the map the returne effect&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To get/create the view for ArtistListing we call it&amp;#8217;s view function, but we need to ensure signals sent from  ArtistListing makes it back to the main view mailbox address. &lt;code&gt;Signal.forwardTo&lt;/code&gt; helps us create a forwarding address.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Read more about &lt;a href=&quot;https://github.com/elm-guides/elm-for-js/blob/master/Mailboxes%2C%20Messages%2C%20and%20Addresses.md#talk-to-this-guy&quot;&gt;Mailboxes, Messages and Addresses&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/ArtistListing.elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;module ArtistListing (Model, Action (..), init, view, update) where


import ServerApi exposing (..)                                                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
import ArtistDetail
-- ... other imports ommited

type Page = ArtistListingPage | ArtistDetailPage


type alias Model =
  { artists : List Artist
  , artistDetail : ArtistDetail.Model
  , page : Page}



type Action =
    HandleArtistsRetrieved (Maybe (List Artist))
  | SelectArtist (Int)
  | DeleteArtist (Int)
  | HandleArtistDeleted (Maybe Http.Response)
  | ArtistDetailAction ArtistDetail.Action
  | NewArtist


init : (Model, Effects Action)
init =
  let
    (artistDetail, fx) = ArtistDetail.init
  in
    ( Model [] artistDetail ArtistListingPage
      , getArtists HandleArtistsRetrieved                                      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    )


update : Action -&amp;gt; Model -&amp;gt; (Model, Effects Action)
update action model =
  case action of

    HandleArtistsRetrieved xs -&amp;gt;                                               &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      ( {model | artists = (Maybe.withDefault [] xs) }
      , Effects.none
      )

    DeleteArtist id -&amp;gt;
      (model, deleteArtist id HandleArtistDeleted)

    HandleArtistDeleted res -&amp;gt;
      (model, getArtists HandleArtistsRetrieved)

    NewArtist -&amp;gt;                                                              &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
      update (ArtistDetailAction &amp;lt;| ArtistDetail.ShowArtist Nothing) model

    SelectArtist id -&amp;gt;
      update (ArtistDetailAction &amp;lt;| ArtistDetail.GetArtist id) model

    ArtistDetailAction sub -&amp;gt;                                                 &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
      let
        (detailModel, fx) = ArtistDetail.update sub model.artistDetail
      in
        ( { model | artistDetail = detailModel
                  , page = ArtistDetailPage }                                 &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
        , Effects.map ArtistDetailAction fx
        )



-- ... artistView details ommitted for brevity

view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =
  div [class &quot;content&quot;] [
    case model.page of                                                       &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;

      ArtistListingPage -&amp;gt;
        artistsView address model

      ArtistDetailPage -&amp;gt;
        ArtistDetail.view (Signal.forwardTo address ArtistDetailAction) model.artistDetail

  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;ServerApi&lt;/code&gt; module exposes functions to interact with the backend server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;getArtists HandleArtistsRetrieved&lt;/code&gt; calls the serverAPI with a action param, so that when the ajax/xhr callback finally makes in back into the elm signal loop, the update function is called with the action we want&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Update the model with the list of artists retrieved (if any)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To show the artist detail page in &quot;create&quot; mode we create a ArtistDetailAction with the appropriate ArtistDetail.action&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;ArtistDetailAction sub actions are actions that are delegated to the actions of the ArtistDetail module.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Note that we change &quot;page context&quot; here so that the view function displays the appropriate page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our naive page routing, just toggles display of pages by the page attribute of our model&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve implemented a very simplistic page routing here. In a later episode we will refactor to
something more managable for handling proper page routing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/ArtistDetail.elm&lt;/div&gt;
&lt;p&gt;This page handles update/creation of a single Artist. I&amp;#8217;ll leave it to you to check out
the details of the &lt;a href=&quot;https://github.com/rundis/albums/releases/tag/part_2&quot;&gt;sample code&lt;/a&gt; on github.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;frontend/ServerApi.elm&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;module ServerApi where


import Json.Decode as JsonD exposing ((:=))
import Json.Encode as JsonE
import Effects exposing (Effects)
import Http
import Task


type alias ArtistRequest a =                                                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { a | name : String }

type alias Artist =
  { id : Int
  , name : String
  }

baseUrl : String
baseUrl = &quot;http://localhost:8081&quot;


getArtist : Int -&amp;gt; (Maybe Artist -&amp;gt; a) -&amp;gt; Effects.Effects a
getArtist id action =                                                        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  Http.get artistDecoder (baseUrl ++ &quot;/artists/&quot; ++ toString id)
    |&amp;gt; Task.toMaybe
    |&amp;gt; Task.map action                                                       &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    |&amp;gt; Effects.task


getArtists : (Maybe (List Artist) -&amp;gt; a) -&amp;gt; Effects a
getArtists action =
  Http.get artistsDecoder (baseUrl ++ &quot;/artists&quot;)
    |&amp;gt; Task.toMaybe
    |&amp;gt; Task.map action
    |&amp;gt; Effects.task

createArtist : ArtistRequest a -&amp;gt; (Maybe Artist -&amp;gt; b) -&amp;gt; Effects.Effects b
createArtist artist action =                                                 &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  Http.send Http.defaultSettings
        { verb = &quot;POST&quot;
        , url = baseUrl ++ &quot;/artists&quot;
        , body = Http.string (encodeArtist artist)                           &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        , headers = [(&quot;Content-Type&quot;, &quot;application/json&quot;)]
        }
    |&amp;gt; Http.fromJson artistDecoder
    |&amp;gt; Task.toMaybe
    |&amp;gt; Task.map action
    |&amp;gt; Effects.task

-- .. the remaining services and encoding|decoding left out for brevity&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This type is an extensible &lt;a href=&quot;http://elm-lang.org/docs/records#record-types&quot;&gt;record type&lt;/a&gt;. It allows our
artist related services to be a little bit more generic and still keep a level of type checking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GET a single artist from our backend api. (Actually it returns and effect that will executa a &lt;a href=&quot;http://elm-lang.org/guide/reactivity#tasks&quot;&gt;task&lt;/a&gt; which upon callback will eventually call the update function in our app with the given action)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;ve relented on type safety for actions by allowing it to be a generic param, but we gain some flexibility
that allows our service to be usable in many different contexts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To take more control over http actions we use &lt;code&gt;Http.send&lt;/code&gt;. It&amp;#8217;s closer to the metal so it&amp;#8217;s a little
bit more boilerplate.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Encode the artist (request) to a json string&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To see the remaining services and details of decoding and encoding please consolt the &lt;a href=&quot;https://github.com/rundis/albums/releases/tag/part_2&quot;&gt;sample code&lt;/a&gt; on github.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_frontend_summary&quot;&gt;Frontend summary&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are beginning to see the resmblance of a Single Page Application. We have started to compose
views and pages using the Elm Architecture. The app supports basic CRUD oparations for an Artist entity.
Error handling is light, there is no validation and our routing solution is overly simplistic, but we&amp;#8217;ll get
to that soonish !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Working with Elm has been an absolute pleasure. The compiler messages really do help. Doing refactoring (without tests I might add)
doesn&amp;#8217;t feel anywhere near as scary as I&amp;#8217;m used to from other languages.
I&amp;#8217;m starting to understand more about the Elm Architecture, but I&amp;#8217;m still getting a little confused about the details
of Signals, Tasks, Mailboxes, Effects etc. It&amp;#8217;s coming to me gradually. The important thing is I can still be quite productive
even though I don&amp;#8217;t understand all the details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have to say I&amp;#8217;m not looking forward to my next refactoring in some messy imperative jquery page mutant at work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion_and_next_steps&quot;&gt;Conclusion and next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m aware this blog post got way to long even though I tried to shave of some of the code from the
code listings. I&amp;#8217;ll have to try to take on smaller/more targeted chunks in future episodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyways. I&amp;#8217;m staring to feel I&amp;#8217;m getting somewhere now. Both with Haskell and Elm. Learning Haskell is
by far the most challenging but getting my head around Functional Reactive Programming in Elm isn&amp;#8217;t without challenges either.
My motivation is still strong and I&amp;#8217;m learning a ton of stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Candidate areas to address for the next episode are; routing, validation, error handling and obviously more useful features.
I&amp;#8217;m thinking perhaps routing comes first, but we&amp;#8217;ll see.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Managing and diagramming elm packages with d3 in Light Table</title>
        <link>http://rundis.github.io/blog/2016/elm_light_package.html</link>
        <pubDate>Fri, 1 Jan 2016 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2016/elm_light_package.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In an effort to making management of project dependencies in Elm projects a little easier, the Elm plugin
for &lt;a href=&quot;http://lighttable.com/&quot;&gt;Light Table&lt;/a&gt; the &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;elm-light&lt;/a&gt; has a few neat features up it&amp;#8217;s sleave.
Check out the demo below for a brief overview.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can find the elm-light plugin &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;here&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_demo&quot;&gt;Demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/Okk-YjEeUgI&quot;&gt;ScreenCast demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Okk-YjEeUgI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Other relevant demos:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://rundis.github.io/blog/2015/elm_light.html&quot;&gt;elm-light intro demo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_short_implementation_summary&quot;&gt;Short implementation summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m just going to give a very brief overview of a few key pieces for how the features are implemented here.
I might add a more detailed blog post if there is any interest for that in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_package_management&quot;&gt;Package management&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The package manager is just a thin wrapper around the &lt;code&gt;elm-package&lt;/code&gt; executable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(defn parse-json-file [json-file]
  (when (files/exists? json-file)
    (-&amp;gt; (-&amp;gt;&amp;gt; (files/open-sync json-file)
             :content
             (.parse js/JSON))
        (js-&amp;gt;clj :keywordize-keys true))))


(defn remove-pkg [path pkg]
  (let [pkg-file (files/join path &quot;elm-package.json&quot;)]
    (-&amp;gt; (u/parse-json-file pkg-file)
        (update-in [:dependencies] (fn [deps]
                                     (-&amp;gt; (into {}
                                               (map (fn [[k v]]
                                                      [(u/nskw-&amp;gt;name k) v]) deps))
                                         (dissoc pkg))))
        u/pretty-json
        ((partial files/save pkg-file)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To list, update and remove dependencies it parses (and updates) the project file for elm projects; &lt;code&gt;elm-package.json&lt;/code&gt;. In addition
it parses the &lt;code&gt;exact-dependencies.json&lt;/code&gt; file for all resolved dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Working with json in ClojureScript feels almost seamless to working with native ClojureScript datastructures
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_view_rendering&quot;&gt;View rendering&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To render the package listing the plugin uses &lt;a href=&quot;https://github.com/levand/quiescent&quot;&gt;quiescent&lt;/a&gt; and &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;react&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(q/defcomponent PackageTable [props]
  (d/table
   {:className &quot;package-table&quot;}
   (d/thead
    {}
    (d/tr
     {}
     (d/th {} &quot;Package&quot;)
     (d/th {} &quot;Range&quot;)
     (d/th {} &quot;Exact&quot;)
     (d/th {} &quot;&quot;)))
   (apply d/tbody {}
          (map #(PackageRow (assoc %
                              :on-remove (:on-remove props)
                              :on-browse (:on-browse props)))
               (:packages props)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find a detailed blog post about some of the benefits of using react for view rendering in Light Table
in &lt;a href=&quot;http://rundis.github.io/blog/2015/lt_react.html&quot;&gt;Implementing a Clojure ns-browser in Light Table with React&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_dependency_autocompletion&quot;&gt;Dependency autocompletion&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whan adding dependencies there is a handy autocompleter. This uses a json resource from &lt;a href=&quot;http://package.elm-lang.org/&quot; class=&quot;bare&quot;&gt;http://package.elm-lang.org/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(defn fetch-all-packages
  &quot;Fetch all packages from package.elm-lang.org&quot;
  [callback]
  (fetch/xhr (str &quot;http://package.elm-lang.org/all-packages?date=&quot; (.getTime (new js/Date)))
             {}
             (fn [data]
               (let [pkgs (js-&amp;gt;clj (.parse js/JSON data) :keywordize-keys true)]
                 (callback pkgs)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_dependency_graph&quot;&gt;Dependency graph&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To implement the dependency graph d3 and dagreD3 is used. Both of these ships node-modules. Using node-modules from
Light Table plugins is definetely not rocket science !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(def dagreD3 (js/require (files/join u/elm-plugin-dir &quot;node_modules/dagre-d3&quot;)))
(def d3 (js/require (files/join u/elm-plugin-dir &quot;node_modules/d3&quot;)))


defn create-graph [data]                                                         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  (let [g (.setGraph (new dagreD3.graphlib.Graph)  #js {})]
    (doseq [x (:nodes data)]
      (.setNode g (dep-id x) (node-label x)))
    (doseq [x (:edges data)]
      (.setEdge g (:a x) (:b x) #js {:label (:label x)
                                     :style (when (:transitive x)
                                              &quot;stroke-dasharray: 5, 5;&quot;)}))
    g))



(behavior ::on-render                                                           &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
          :desc &quot;Elm render dependencies&quot;
          :triggers #{:elm.graph.render}
          :reaction (fn [this]
                      (let [svg (.select d3 &quot;svg&quot;)
                            g (.select svg &quot;g&quot;)
                            renderer (.render dagreD3)]
                        (renderer g (create-graph (:data @this)))
                        (init-zoom svg g)
                        (resize-graph this svg))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The function to create the dependency graph. Helper functions omitted, but not much to it really&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Light Table behavior that is responsible for rendering the graph&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_credits&quot;&gt;Credits&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://d3js.org/&quot;&gt;d3.js&lt;/a&gt; - Provides awesome graphing features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpettitt/dagre-d3&quot;&gt;dagreD3&lt;/a&gt; - Create Directed Acyclic Graphs in a breeze&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Typed up CRUD SPA with Haskell and Elm  - Part 1: Spike time</title>
        <link>http://rundis.github.io/blog/2015/haskell_elm_spa_part1.html</link>
        <pubDate>Mon, 28 Dec 2015 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2015/haskell_elm_spa_part1.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Join me on my journey into statically typed functional languages. I&amp;#8217;ve been living a pretty happily
dynamic life so far. What&amp;#8217;s the fuzz with all those types ? What do they give me in a real life
scenario (aka is it worth using for work gigs) ? I need to make an effort and try to figure
some of this out. This blog series is an attempt to document some of my experiences along the way through a practical example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;There will be:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A single page web application with crud features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lots of types, refactoring and hopefully some testing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An evolving web-app github repo for your amusement or amazement&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_just_a_little_background_on_me&quot;&gt;Just a little background on me&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For quite some time I&amp;#8217;ve been wanting to learn more about functional languages that are statically (and strongly) typed.
What benefits do they really provide in practice and what are the downsides ?
My background is a from quite a few years with Java, and the last 3-4 years I&amp;#8217;ve been working
 mostly with Groovy, JavaScript and Clojure/ClojureScript.
I&amp;#8217;ve dabbled a little with Elm recently (&lt;a href=&quot;http://rundis.github.io/blog/2015/elm_sweeper.html&quot;&gt;minesweeper in Elm&lt;/a&gt;)
, and I&amp;#8217;ve tried to take on Haskell a couple of times (without much success I might add).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I mostly do web apps at work, so I figured I need to try and make something at least remotely
similar to what I do in real life.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_let_s_get_started&quot;&gt;Let&amp;#8217;s get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the point where I&amp;#8217;ve run into analysis paralysis so many a time before.
So I set out to create a crud app, but what shall I build. After some deliberation
I settled on making something related to Music. You know Albums, Artists, Tracks and such.
I have no idea what the end result will be, but to start off I&amp;#8217;ll make a simple spike.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2015/artists.png&quot; alt=&quot;artists&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The spike should&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;establish a base architecture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implement a simple feature: &lt;strong&gt;List artists&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will find the sample application code on &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;github&lt;/a&gt;.
There will be a tag for each blog post in the series&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_backend&quot;&gt;Backend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wanted to implement server component that would provide REST-services. There are quite
a few options available for Haskell that can help with that. After some research and trials
I ended up using &lt;a href=&quot;https://haskell-servant.github.io/&quot;&gt;Servant&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Some of the other options I looked at includes:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.spock.li/&quot;&gt;Spock&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/scotty-web/scotty&quot;&gt;Scotty&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://snapframework.com/&quot;&gt;Snap&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.yesodweb.com/&quot;&gt;Yesod&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I just had to choose one, and Servant seemed like a nice fit for REST stuff and I managed to get it
working without to much hazzle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_project_set_up&quot;&gt;Project set up&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m using &lt;a href=&quot;https://www.haskell.org/cabal/&quot;&gt;cabal&lt;/a&gt;, but you might also want to consider looking
at &lt;a href=&quot;http://docs.haskellstack.org/en/stable/index.html&quot;&gt;stack&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;name:                albums
version:             0.1.0.0
synopsis:            Albums rest backend
license:             MIT
license-file:        LICENSE
author:              rundis
maintainer:          mrundberget@hotmail.com
category:            Web
build-type:          Simple
cabal-version:       &amp;gt;=1.10

executable albums
  main-is:             Main.hs              &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  build-depends:
      base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
    , either
    , aeson &amp;gt;= 0.8                          &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    , servant                               &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    , servant-server
    , wai
    , warp
  hs-source-dirs:      src                  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  default-language:    Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The entry point for the application&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Provides JSON support&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The servant library that helps us create type safe rest services&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The directory(ies) where the source code for our app resides&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purposes of this spike all haskell code will reside in &lt;code&gt;Main.hs&lt;/code&gt;. This will
surely not be the case as the app progresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you wan&amp;#8217;t to try out automatic reloading support, you may want to check out &lt;a href=&quot;https://github.com/lukexi/halive&quot;&gt;halive&lt;/a&gt;.
Unfortunately I couldn&amp;#8217;t get it to work on my machine (OS/X Maverick), but it might work our for you though :-)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_main_hs&quot;&gt;Main.hs&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;data Artist = Artist
  { artistId :: Int
  , name :: String
  } deriving (Eq, Show, Generic)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple type describing the shape of an Artist in our app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;instance ToJSON Artist                                       &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

type ArtistAPI =                                             &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
       Get &apos;[JSON] [Artist]                                  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  :&amp;lt;|&amp;gt; Capture &quot;artistId&quot; Int :&amp;gt; Get &apos;[JSON] Artist          &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;


artistsServer :: Server ArtistAPI
artistsServer = getArtists :&amp;lt;|&amp;gt; artistOperations             &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

  where getArtists :: EitherT ServantErr IO [Artist]
        getArtists = return artists                          &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;

        artistOperations artistId =
          viewArtist

          where viewArtist :: EitherT ServantErr IO Artist
                viewArtist = artistById artistId             &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ToJSON&lt;/code&gt; is a &lt;a href=&quot;https://www.haskell.org/tutorial/classes.html&quot;&gt;type class&lt;/a&gt;. This line
basically is all we need to set up for json encoding an instance of our Artist type.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We describe our REST api using a type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Get on this api returns a list of Artists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Definition of how to get a single Artist by it&amp;#8217;s id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;server&lt;/code&gt; type is the part where we descibe how we actually serve the api&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The handler for listing artists. Currently it just returns a static list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The handler for retrieving a given artist by its id&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;:&amp;lt;&amp;gt;&lt;/code&gt; is a &lt;a href=&quot;https://wiki.haskell.org/Combinator&quot;&gt;combinator&lt;/a&gt; that ships with Servant. It allows us to combine the various parts
of our API into a single type.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;artistById :: Int -&amp;gt; EitherT ServantErr IO Artist
artistById idParam =
  case a of
    Nothing -&amp;gt; left (err404 {errBody = &quot;No artist with given id exists&quot;})  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    Just b -&amp;gt; return b                                                     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  where
    a = find ((== idParam) . artistId) artists                             &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the find (by id) in &lt;strong&gt;3&lt;/strong&gt; returns Nothing (see &lt;a href=&quot;https://hackage.haskell.org/package/base-4.8.1.0/docs/Data-Maybe.html&quot;&gt;Maybe monad&lt;/a&gt;).
We return a 404 error with a custom body&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Upon success return the given artist instance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Find a given artist by id from our List of artists&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;EitherT&lt;/code&gt; - An either monad. Check out the description from the servant tutorial on &lt;a href=&quot;https://haskell-servant.github.io/tutorial/server.html#the-eithert-servanterr-io-monad&quot;&gt;EitherT&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Wrapping it all up&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;type API = &quot;artists&quot; :&amp;gt; ArtistAPI    &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;


api :: Proxy API
api = Proxy                          &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;


app :: Application
app = serve api artistsServer        &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;


main :: IO ()
main = run 8081 app                  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A generic type for our api. It let&amp;#8217;s us combine multiple types, but the
main reason it&amp;#8217;s factored out for now is to avoid repetion of the root path for our
api &lt;code&gt;artists&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;TBH I haven&amp;#8217;t grokked why this is needed, but it&amp;#8217;s probably to do with some type magic ?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;An &quot;abstract&quot; web application. serve gives us a &lt;a href=&quot;http://www.stackage.org/package/wai&quot;&gt;WAI&lt;/a&gt; web application.
I guess WAI is like a common API for Haskell Web applicaitons.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The main entry point for our application. It starts our web application on port 8081
(and uses &lt;a href=&quot;http://www.stackage.org/package/warp&quot;&gt;warp&lt;/a&gt; behind the scene to do so.)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get the backend up and running, check out the readme for the &lt;a href=&quot;https://github.com/rundis/albums&quot;&gt;sample application&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_backend_experiences&quot;&gt;Backend experiences&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following the &lt;a href=&quot;https://haskell-servant.github.io/tutorial/server.html&quot;&gt;Servant tutorial&lt;/a&gt; it was quite
easy to get a simple translated example to work. However I did start to struggle once I started
to venture off from the tutorial. Some of it is obviously due to my nearly non-existing haskell knowledge.
But I think what tripped me up most was the EitherT monad. Heck I still don&amp;#8217;t really know what
a monad is. The error messages I got along the way didn&amp;#8217;t help me much, but I guess gradually
they&amp;#8217;ll make more and more sense, once my haskell foo improves.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_frontend&quot;&gt;Frontend&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So Elm is pretty cool. The syntax isn&amp;#8217;t too far off from Haskell. I&amp;#8217;ve already started
looking at Elm so it makes sense continuing with Elm to hopefully gain deeper knowledge of its
strenghts and weaknesses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For a really pleasurable experience when developing elm I would suggest choosing an
editor with linting support. As a shameless plug, one suggestion would be to use &lt;a href=&quot;http://lighttable.com/&quot;&gt;Light Table&lt;/a&gt;
with my &lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;elm-light&lt;/a&gt; plugin. (Emacs, Vim, Sublime, Visual Code are other good options)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_project_setup&quot;&gt;Project setup&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;{
    &quot;version&quot;: &quot;1.0.0&quot;,
    &quot;summary&quot;: &quot;The frontend for the Albums CRUD sample app&quot;,
    &quot;repository&quot;: &quot;https://github.com/rundis/albums.git&quot;,
    &quot;license&quot;: &quot;MIT&quot;,
    &quot;source-directories&quot;: [
        &quot;.&quot;                                                      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    ],
    &quot;exposed-modules&quot;: [],
    &quot;dependencies&quot;: {                                            &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        &quot;elm-lang/core&quot;: &quot;3.0.0 &amp;lt;= v &amp;lt; 4.0.0&quot;,
        &quot;evancz/elm-effects&quot;: &quot;2.0.1 &amp;lt;= v &amp;lt; 3.0.0&quot;,
        &quot;evancz/elm-html&quot;: &quot;4.0.2 &amp;lt;= v &amp;lt; 5.0.0&quot;,
        &quot;evancz/elm-http&quot;: &quot;3.0.0 &amp;lt;= v &amp;lt; 4.0.0&quot;,
        &quot;evancz/start-app&quot;: &quot;2.0.2 &amp;lt;= v &amp;lt; 3.0.0&quot;
    },
    &quot;elm-version&quot;: &quot;0.16.0 &amp;lt;= v &amp;lt; 0.17.0&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;For simplicity source files currently resides in the root folder of the project.
This will change once the application grows&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Initial set of dependencies used&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_album_elm&quot;&gt;Album.elm&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before you start you may want to check out &lt;a href=&quot;https://github.com/evancz/start-app&quot;&gt;start-app&lt;/a&gt;.
The frontend code is based on this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Artist =                                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { id : Int
  , name : String
  }

type alias Model =                                      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  { artists : List Artist}


type Action = ArtistRetrieved (Maybe (List Artist))     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Front end representation of Artist. You&amp;#8217;ll notice it&amp;#8217;s strikingly similar
to it&amp;#8217;s Haskell counterpart on the server side&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Type for keeping track of our model. Currently it will only contain
a list of artists, but there is more to come later&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&quot;Tagged type&quot; that describes the actions supported in the frontend app.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;init : (Model, Effects Action)
init =                                                  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  ( Model []
    , getArtists
  )


update : Action -&amp;gt; Model -&amp;gt; (Model, Effects Action)
update action model =                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  case action of
    ArtistRetrieved xs -&amp;gt;
      ( {model | artists = (Maybe.withDefault [] xs) }
      , Effects.none
      )


getArtists : Effects.Effects Action
getArtists =                                           &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  Http.get artists &quot;http://localhost:8081/artists&quot;
    |&amp;gt; Task.toMaybe
    |&amp;gt; Task.map ArtistRetrieved
    |&amp;gt; Effects.task


artist : Json.Decoder Artist
artist =                                               &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  Json.object2 Artist
    (&quot;artistId&quot; := Json.int)
    (&quot;name&quot; := Json.string)


artists : Json.Decoder (List Artist)
artists =                                              &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  Json.list artist&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Initializer function called by start-app when staring the application
it returns an empty model and an effect &lt;code&gt;getArtists&lt;/code&gt;. Meaning getArtists will be
invoked once the page is loaded&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The update function handles actions in our app. Currently it only supports
one action, and that is the a callback once getArtists have returned. It updates
the model with the retrieved artists and returns the updated model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our ajax call ! We invoke the our rest endpoint using the elm http library. The first
argument to Http.get, &lt;code&gt;artists&lt;/code&gt;, tells elm how to decode the result.
A lot is going on here, but the end result is that it does an xhr request decodes the result (if success)
using the given decoder and eventually invoke the update function with our list of artists (wrapped in a Maybe).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A decoder for decoding the json representation of an artist from the server to and &lt;code&gt;Artist&lt;/code&gt; type instance&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The response from our rest endpoint is a list of artists, so we use the JSON.list function
telling it to use our artist decoder for each item in the list&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;artistRow : Artist -&amp;gt; Html
artistRow artist =                                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  tr [] [
     td [] [text (toString artist.id)]
    ,td [] [text artist.name]
  ]

view : Signal.Address Action -&amp;gt; Model -&amp;gt; Html
view address model =                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  div [class &quot;container-fluid&quot;] [
        h1 [] [text &quot;Artists&quot; ]
      , table [class &quot;table table-striped&quot;] [
          thead [] [
            tr [] [
               th [] [text &quot;Id&quot;]
              ,th [] [text &quot;Name&quot;]
          ]
        ]
      , tbody [] (List.map artistRow model.artists)
    ]
  ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Function to generate the view for a single artist row&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our main view function for presenting a list of artists&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
We are not rendering dom nodes here, it&amp;#8217;s just a representation of what we want
to render. The actual rendering uses Virual DOM.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Wrapping up the frontend&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;app : StartApp.App Model
app =                                          &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  StartApp.start
    { init = init
    , update = update
    , view = view
    , inputs = []
    }



main : Signal Html
main =                                         &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  app.html



port tasks : Signal (Task.Task Never ())
port tasks =                                   &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  app.tasks&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Using startapp to wire up our core functions (init, update and view)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The entry point function for our frontend app&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When communicating with the outside world elm uses &lt;a href=&quot;http://elm-lang.org/guide/interop#ports&quot;&gt;ports&lt;/a&gt;.
This is used for by our rest invocation. It does so using &lt;a href=&quot;http://elm-lang.org/guide/reactivity#tasks&quot;&gt;tasks&lt;/a&gt; which
is the elm way to describe asynchronous operations.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_frontend_experiences&quot;&gt;Frontend experiences&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Elm ports, tasks and effects are concepts that are yet to dawn completely on me. I protect my brain
temporarily by giving them overy simplistic explanations.
I wasn&amp;#8217;t sure how to do the JSON decoding stuff, but fired up an elm-repl in Light Table and just experiemented a little until
I had something workable.
I used the linter feature of my Light Table plugin quite heavily, and the error messages from elm proved yet again
to be very helpful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion_and_next_steps&quot;&gt;Conclusion and next steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I pretty sure I could have knocked this up with Clojure/ClojureScript, groovy/grails or plan old JavaScript
in a fraction of the time I&amp;#8217;ve used. But that&amp;#8217;s not really a fair or relevant comparison.
Learning completely new languages and new libraries takes time.
I think I&amp;#8217;ve learned quite a bit already and I&amp;#8217;m very pleased to have made it this far !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Elm was easier to get into than Haskell and the Elm compiler felt a lot more helpful to me than
ghc (haskell compiler). I had a head start on Elm, but I do remember getting started with Elm felt
a lot smoother than jumping into Haskell. I&amp;#8217;m still very much looking forward to improving my haskell skills
and I&amp;#8217;m sure that will proove very valuable eventually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what&amp;#8217;s up next? Not sure, but i think adding persistence and the facility to add/update
artists might be next up. I will keep you posted !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Minesweeper - a brief journey from JavaScript/React to Elm</title>
        <link>http://rundis.github.io/blog/2015/elm_sweeper.html</link>
        <pubDate>Tue, 10 Nov 2015 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2015/elm_sweeper.html</guid>
          <description>
  	       &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After taking a keen interest to Elm lately I figured I needed to solve a real problem. Something a bit fun and achievable in a couple of evenings/nights.
Not being awfully creative, piggiebacking on other peoples&apos; work is sometimes a good option.
In this post I&amp;#8217;ll take you through some of my steps in porting/re-implementing &lt;a href=&quot;https://github.com/cjohansen/react-sweeper&quot; class=&quot;bare&quot;&gt;https://github.com/cjohansen/react-sweeper&lt;/a&gt; (JavaScript and React) to an Elm implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2015/elm_sweeper.png&quot; alt=&quot;elm sweeper&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you&amp;#8217;d like to have a look at the complete implementation of the game, check out &lt;a href=&quot;https://github.com/rundis/elm-sweeper&quot; class=&quot;bare&quot;&gt;https://github.com/rundis/elm-sweeper&lt;/a&gt;.
There you&amp;#8217;ll find instructions on how to get it running too.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_little_background&quot;&gt;A little background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Right! So I&amp;#8217;ve taken an interest in &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; lately.  If you&amp;#8217;ve read any of my previous posts you might have
noticed that I&amp;#8217;m quite fond of Clojure and ClojureScript. I still very much am and I have tons to learn there still. But I wanted  to dip my toes
into a statically typed functional language. Elm seems quite approachable and I guess probably the talk &lt;a href=&quot;https://www.youtube.com/watch?v=oYk8CKH7OhE&quot;&gt;&quot;Let&amp;#8217;s be mainstream&quot;&lt;/a&gt;
made my mind up to give it a go. After creating a language plugin for Light Table: &lt;a href=&quot;http://rundis.github.io/blog/2015/elm_light.html&quot;&gt;elm-light&lt;/a&gt;
 and attending an Elm workshop at CodeMesh, I needed something concrete to try it out on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I remembered that a colleague of mine  &lt;a href=&quot;http://www.kodemaker.no&quot;&gt;at Kodemaker&lt;/a&gt;, Christian Johansen,  made a minesweeper implementation using JavaScript and React.
That seemed like a sufficiently interesting problem and I could shamelessly steal most of the game logic :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_first_steps_the_game_logic&quot;&gt;First steps - The Game Logic&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the obvious place to start was the game logic. I had the option of trying to set up &lt;a href=&quot;https://github.com/deadfoxygrandpa/Elm-Test&quot;&gt;Elm-Test&lt;/a&gt;
to use a test-driven inspired approach. But heck I figured I had to try to put those types to the test, so I went for
an all out repl driven approach. That gave me a chance to experience the good and bad with the &lt;a href=&quot;https://github.com/rundis/elm-light#56-editor-repl&quot;&gt;repl integration&lt;/a&gt; of my own Light Table Elm plugin too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2015/elm_repl.png&quot; alt=&quot;elm repl&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_starting_with_records_and_type_aliases&quot;&gt;Starting with records and type aliases&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reading the &lt;a href=&quot;https://github.com/cjohansen/react-sweeper/blob/master/immutable-es6/src/game.js&quot;&gt;game logic&lt;/a&gt; in react-sweeper I decided to
define a couple of types&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type alias Tile               &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  { id: Int
  , threatCount: Maybe Int    &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  , isRevealed: Bool
  , isMine: Bool}

type GameStatus = IN_PROGRESS | SAFE | DEAD

type alias Game =             &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  { status: GameStatus        &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  , rows: Int
  , cols: Int
  , tiles: List Tile}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Type alias for records representing a tile in the game.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Threat count is a property on a tile that is not set until the game logic allows it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Type alias for a record representing a game&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Status of the game, the possible states are defined by GameStatus. SAFE means you&amp;#8217;ve won, DEAD&amp;#8230;&amp;#8203; well&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Describing these types proved to be valuable documentation as well as being very helpful when implementing
the game logic later on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
What&amp;#8217;s that &lt;code&gt;Maybe&lt;/code&gt; thing ? If someone told me it&amp;#8217;s a &lt;a href=&quot;https://en.wikipedia.org/wiki/Monad_(functional_programming)&quot;&gt;Monad&lt;/a&gt; I wouldn&amp;#8217;t be any wiser. I think of it
as a handy way of describing that something may have a value. A nifty way to eliminate the use of null basically.
It also forces you to be explicit about handling the fact that it may not have a value.
You won&amp;#8217;t get null pointer errors in an Elm program! (nor &lt;code&gt;Undefined is not a function&lt;/code&gt;).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_finding_neighbours_of_a_tile&quot;&gt;Finding neighbours of a tile&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When revealing tiles in minesweeper you also reveal any adjacent tiles that aren&amp;#8217;t next to a mine.
In addition you display the threat count (how many mines are adjacent to a tile) for tiles next to those
you just revealed. So we need a way to find the neighbouring tiles of a given tile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_javascript_implementation&quot;&gt;JavaScript implementation&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;function onWEdge(game, tile) {                                                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  return tile % game.get(&apos;cols&apos;) === 0;
}

function onEEdge(game, tile) {                                                 &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  return tile % game.get(&apos;cols&apos;) === game.get(&apos;cols&apos;) - 1;
}


function nw(game, tile) {                                                      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  return onWEdge(game, tile) ? null : idx(game, tile - game.get(&apos;cols&apos;) - 1);
}

function n(game, tile) {
  return idx(game, tile - game.get(&apos;cols&apos;));
}

// etc , ommitted other directions for brevity


const directions = [nw, n, ne, e, se, s, sw, w];

function neighbours(game, tile) {
  return keep(directions, function (dir) {                                     &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    return game.getIn([&apos;tiles&apos;, dir(game, tile)]);
  });
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Helper function to determine if a given tile is on the west edge of the board&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Helper function to determine if a given tile is on the east edge of the board&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Returns the the tile north-west of a given tile. Null if none exists to the north-west&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Keep is a helper function that maps over the collection and filters out any resulting `null`s. So the function
iterates all directions (invoking their respective function) and returns all possible tiles
neighbouring the given tile.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_elm_implementation&quot;&gt;Elm implementation&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Direction = W | NW | N | NE | E | SE | S | SW                                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

onWEdge : Game -&amp;gt; Tile -&amp;gt; Bool                                                     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
onWEdge game tile =
  (tile.id % game.cols) == 0


onEEdge : Game -&amp;gt; Tile -&amp;gt; Bool
onEEdge game tile =
  (tile.id % game.cols) == game.cols - 1


neighbourByDir : Game -&amp;gt; Maybe Tile -&amp;gt; Direction -&amp;gt; Maybe Tile                     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
neighbourByDir game tile dir =
  let
    tIdx = tileByIdx game                                                          &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    isWOk t = not &amp;lt;| onWEdge game t                                                &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    isEOk t = not &amp;lt;| onEEdge game t
  in
    case (tile, dir) of                                                            &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
      (Nothing, _) -&amp;gt; Nothing                                                      &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
      (Just t, N)  -&amp;gt; tIdx &amp;lt;| t.id - game.cols
      (Just t, S)  -&amp;gt; tIdx &amp;lt;| t.id + game.cols
      (Just t, W)  -&amp;gt; if isWOk t then tIdx &amp;lt;| t.id - 1             else Nothing
      (Just t, NW) -&amp;gt; if isWOk t then tIdx &amp;lt;| t.id - game.cols - 1 else Nothing    &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
      (Just t, SW) -&amp;gt; if isWOk t then tIdx &amp;lt;| t.id + game.cols - 1 else Nothing
      (Just t, E)  -&amp;gt; if isEOk t then tIdx &amp;lt;| t.id + 1             else Nothing
      (Just t, NE) -&amp;gt; if isEOk t then tIdx &amp;lt;| t.id - game.cols + 1 else Nothing
      (Just t, SE) -&amp;gt; if isEOk t then tIdx &amp;lt;| t.id + game.cols + 1 else Nothing


neighbours : Game -&amp;gt; Maybe Tile -&amp;gt; List Tile
neighbours game tile =
  let
    n = neighbourByDir game tile                                                   &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
  in
    List.filterMap identity &amp;lt;| List.map n [W, NW, N, NE, E, SE, S, SW]             &lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A type (actually a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tagged_union&quot;&gt;tagged union&lt;/a&gt;) describing/enumerating the possible directions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Pretty much the same as it&amp;#8217;s JavaScript counterpart. I&amp;#8217;ve been lazy and assumed the id of a tile
is also the index in the tiles list of our game.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Find a neighbour by a given direction. The function takes 3 arguments; a game record, a tile (that may or may not have a value) and a direction. It returns a tile (that may or may not have a value)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;tileByIdx is a functions that finds a tile by its index. (it returns a tile, &amp;#8230;&amp;#8203; maybe). tIdx is a local function that just curries(/binds/partially applies) the first parameter - game&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A local function that checks if it&amp;#8217;s okay to retrieve a westward tile for a given tile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Pattern match on tile and direction. You might consider it a switch statement on steroids.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the tile doesn&amp;#8217;t have a value (then we don&amp;#8217;t care about the direction hence _) we return Nothing (Maybe.Nothing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Just t, NW matches on a tile that has value (assigned t) and a given direction of NW. The logic is for this case the same as for it&amp;#8217;s JavaScript counterpart. Well except it returns Nothing if NW isn&amp;#8217;t possible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A partially applied version of neightBourByDir to make the mapping function in 10. a bit less verbose&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We map over all directions finding their neighbours, then &lt;code&gt;List.filterMap identity&lt;/code&gt; filters out all List entries with Nothing.
Leaving us with a list of valid neighbours for the given tile.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We covered quite a bit of ground here. I could have implemented all the direction functions as in the JavaScript implementation,
but opted for a more generic function using pattern matching. It&amp;#8217;s not that I dislike short functions, quite the contrary but
in this case it felt like a good match (no pun intended). Once you get used to the syntax it gives a
really nice overview as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Think of &amp;lt;| as one way to avoid parenthesis. It&amp;#8217;s actually a backwards function application
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When testing this function I got my first runtime error in Elm complaining that my case wasn&amp;#8217;t
exhaustive. Rumors has it that the next version of elm might handle this at compile time as well :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://rundis.github.io/blog/2015/elm_case_error.png&quot; alt=&quot;elm case error&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_threat_count&quot;&gt;Threat count&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_javascript&quot;&gt;JavaScript&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;function getMineCount(game, tile) {                                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  var nbs = neighbours(game, tile);
  return nbs.filter(prop(&apos;isMine&apos;)).length;
}

function addThreatCount(game, tile) {                                           &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  return game.setIn([&apos;tiles&apos;, tile, &apos;threatCount&apos;], getMineCount(game, tile));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Gets the number of neighbouring tiles that are mines for a given tile. (prop is a helper function for retrieving a named property on a js object)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Set the threatCount property on a given tile in the game&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_elm&quot;&gt;Elm&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;mineCount : Game -&amp;gt; Maybe Tile -&amp;gt; Int                                           &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
mineCount game tile =
  List.length &amp;lt;| List.filter .isMine &amp;lt;| neighbours game tile

revealThreatCount : Game -&amp;gt; Tile -&amp;gt; Tile                                        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
revealThreatCount game tile =
  {tile | threatCount &amp;lt;- Just (mineCount game &amp;lt;| Just tile)
        , isRevealed  &amp;lt;- True}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Same as for it&amp;#8217;s JavaScript counterpart, but using a . syntax for dynamic property access&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Almoust the same as addThreatCount, but since once we add it the tile would also always be revealed
I opted for a two in one function.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;For mine count, both implementations are potentially flawed.&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For JavaScript you might get 0 for a non-existent tile, which isn&amp;#8217;t too bad. But maybe you&amp;#8217;ll get
a null pointer somewhere deeper down the call stack. To be sure you have to crawl through all function calls this function makes and
apply your JavaScript foo to know things like null &amp;lt; 1 is obviously true, but null &amp;lt; 0 is false. &amp;#8230;&amp;#8203; and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The elm implementation won&amp;#8217;t have any null pointer exceptions, but really it should return Maybe Int to guard
against giving 0 back for a Nothing tile !&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_revealing_safe_adjacent_tiles&quot;&gt;Revealing safe adjacent tiles&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_javascript_2&quot;&gt;JavaScript&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;function revealAdjacentSafeTiles(game, tile) {
  if (isMine(game, tile)) {
    return game;
  }
  game = addThreatCount(game, tile).setIn([&apos;tiles&apos;, tile, &apos;isRevealed&apos;], true);
  if (game.getIn([&apos;tiles&apos;, tile, &apos;threatCount&apos;]) === 0) {
    return keep(directions, function (dir) {
      return dir(game, tile);
    }).reduce(function (game, pos) {
      return !game.getIn([&apos;tiles&apos;, pos, &apos;isRevealed&apos;]) ?
        revealAdjacentSafeTiles(game, pos) : game;
    }, game);
  }
  return game;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_elm_2&quot;&gt;Elm&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;revealAdjacentSafeTiles :  Game -&amp;gt; Int -&amp;gt; Game
revealAdjacentSafeTiles game tileId =
  case tileByIdx game tileId of
    Nothing -&amp;gt; game
    Just t -&amp;gt;
      if t.isMine then game else
        let
          updT   = revealThreatCount game t
          updG   = {game | tiles &amp;lt;- updateIn tileId (\_ -&amp;gt; updT) game.tiles}
          fn t g = if not t.isRevealed then revealAdjacentSafeTiles g t.id else g
        in
          if not (updT.threatCount == Just 0) then
            updG
          else
            List.foldl fn updG &amp;lt;| neighbours updG &amp;lt;| Just updT&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_a_brief_comparison&quot;&gt;A brief comparison&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most noteworthy difference is really the explicit handling of an illegal tile index in the Elm implementation.
If I didn&amp;#8217;t have the JavaScript code to look at, I&amp;#8217;m guessing the difference would have been more noticable. Not necessarily for the better.
We&amp;#8217;ll never know.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyways, enough about the game logic. Let&amp;#8217;s move on to the view part.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_comparing_the_view_rendering&quot;&gt;Comparing the view rendering&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_javascript_3&quot;&gt;JavaScript&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The React part for rendering the UI is found in &lt;a href=&quot;https://github.com/cjohansen/react-sweeper/blob/master/immutable-es6/src/ui.js&quot;&gt;ui.js&lt;/a&gt;
Below I&amp;#8217;ve picked out the most interesting parts&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;export function createUI(channel) {                                            &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  const Tile = createComponent((tile) =&amp;gt; {                                     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    if (tile.get(&apos;isRevealed&apos;)) {
      return div({className: &apos;tile&apos; + (tile.get(&apos;isMine&apos;) ? &apos; mine&apos; : &apos;&apos;)},
                 tile.get(&apos;threatCount&apos;) &amp;gt; 0 ? tile.get(&apos;threatCount&apos;) : &apos;&apos;);
    }
    return div({
      className: &apos;tile&apos;,
      onClick: function () {
        channel.emit(&apos;reveal&apos;, tile.get(&apos;id&apos;));                                &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      }
    }, div({className: &apos;lid&apos;}, &apos;&apos;));
  });

  const Row = createComponent((tiles) =&amp;gt; {
    return div({className: &apos;row&apos;}, tiles.map(Tile).toJS());
  });

  const Board = createComponent((game) =&amp;gt; {
    return div({
      className: &apos;board&apos;
    }, partition(game.get(&apos;cols&apos;), game.get(&apos;tiles&apos;)).map(Row).toJS());
  });

  const UndoButton = createComponent(() =&amp;gt; {                                  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    return button({
      onClick: channel.emit.bind(channel, &apos;undo&apos;)
    }, &apos;Undo&apos;);
  });

  const Game = createComponent((game) =&amp;gt; {
    return div({}, [Board(game), UndoButton()]);
  });

  return (data, container) =&amp;gt; {                                               &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    render(Game(data), container);
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This function returns a function for creating the react component tree for the game. It takes a channel
param, which is an event emitter. So when components need to notify the &quot;controller&quot; about user actions they can just emit messages to this channel
A neat way to avoid using callbacks!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;createComponent is a handy helper function that avoids some react boiler plate and provides an optimized shouldComponentUpdate function for each react component used.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When a user clicks on a tile a reveal message with the tile id is emitted&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The game also supports undo previous move :)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Returns a function that when called starts the react rendering of the game in the given container element&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_elm_3&quot;&gt;Elm&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;threatCount : Maybe Int -&amp;gt; List Html
threatCount count =
  case count of
    Nothing -&amp;gt; []
    Just t  -&amp;gt; [text (if t &amp;gt; 0 then toString t else &quot;&quot;)]


tileView : Signal.Address Action -&amp;gt; Game.Tile -&amp;gt; Html                               &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
tileView address tile =
  if tile.isRevealed then
    div [class (&quot;tile&quot; ++ (if tile.isMine then &quot; mine&quot; else &quot;&quot;))]
        &amp;lt;| threatCount tile.threatCount

  else
    div [class &quot;tile&quot;, onClick address (RevealTile tile.id)]                        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        [div [class &quot;lid&quot;] []]                                                      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;


rowView : Signal.Address Action -&amp;gt; List Game.Tile -&amp;gt; Html
rowView address tiles =
  div [class &quot;row&quot;] (List.map (tileView address) tiles)


statusView: Game -&amp;gt; Html
statusView game =
  let
    (status, c) = case game.status of
                    SAFE          -&amp;gt; (&quot; -  You won&quot;, &quot;status-won&quot;)
                    DEAD          -&amp;gt; (&quot; - You lost&quot;, &quot;status-lost&quot;)
                    IN_PROGRESS   -&amp;gt; (&quot;&quot;, &quot;&quot;)
  in
    span [class c] [text status]


view : Signal.Address Action -&amp;gt; Game -&amp;gt; Html                                       &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
view address game =
  let
    rows = Utils.partitionByN game.cols game.tiles
  in
    div [id &quot;main&quot;] [
      h1 [] [text &quot;Minesweeper&quot;, statusView game],
      div [class &quot;board&quot;] (List.map (rowView address) rows),
      div [] [button [class &quot;button&quot;, onClick address NewGame] [text &quot;New game&quot;]]
    ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The function responsible for rendering a single tile. Very much comparable to the React tile component
in the JavaScript implementation. Similar to  React, we aren&amp;#8217;t returning actual dom elments, Elm also has
a virtual dom implementation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When a tile is clicked a message is sent to a given address (we&amp;#8217;ll get back to that a little bit later).
Well actually it doesn&amp;#8217;t happen right away, rather think of it as creating an envelope with content and a known address. The Elm runtime receives a signal back
that will take care of sending the message to it&amp;#8217;s rendering function when appropriate.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;div here is actually a function from the HTML module in Elm. It takes two lists as arguments, the first
is a list of attributes and the second is a list of child elements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our main entry function for creating our view. It takes an address and game as parameter and returns a virtual dom node (Html)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;Signal.Address Action&lt;/code&gt; : Address points to a particular type of Signal, in our case the Signal is an &lt;code&gt;Action&lt;/code&gt;
we&amp;#8217;ll come back to that shortly. But the short story is that this is what enables us to talk back to the main application.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wiring_it_all_together&quot;&gt;Wiring it all together&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_javascript_4&quot;&gt;JavaScript&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;const channel = new EventEmitter();
const renderMinesweeper = createUI(channel);
let game = createGame({cols: 16, rows: 16, mines: 48});
let history = List([game]);

function render() {                                                         &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  renderMinesweeper(game, document.getElementById(&apos;board&apos;));
}

channel.on(&apos;undo&apos;, () =&amp;gt; {                                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  if (history.size &amp;gt; 1) {
    history = history.pop();
    game = history.last();
    render();
  }
});

channel.on(&apos;reveal&apos;, (tile) =&amp;gt; {                                            &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  if (isGameOver(game)) { return; }

  const newGame = revealTile(game, tile);

  if (newGame !== game) {
    history = history.push(newGame);
    game = newGame;
  }

  render();

  if (isGameOver(game)) {
    // Wait for the final render to complete before alerting the user
    setTimeout(() =&amp;gt; { alert(&apos;GAME OVER!&apos;); }, 50);
  }
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The react render entry point for the game. Called whenever the game state is changed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The JavaScript implementation keeps a history of all game states. I forgot to mention that &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;immutable-js&lt;/a&gt; is for collections.
Undo just gets the previous game state and rerenders. Nice and simple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Event listener for reveal messages. It invokes reveal tile, adds to history (and potentially ends the game).&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is all very neat and tidy and works so great because the game state is managed in one place and is passed through
 the ui component tree as an immutable value. The fact that the state is immutable also makes the undo implementation a breeze.
 I really like this approach !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_elm_4&quot;&gt;Elm&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you don&amp;#8217;t know Elm at all, this part might be the most tricky to grasp. To simplify things I&amp;#8217;ll split it into
two parts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_start_app_approach&quot;&gt;Start-app approach&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/evancz/start-app&quot;&gt;Start-app&lt;/a&gt; is a small elm package that makes it easy to get started
with an elm Model-View-Update structure. This is a great place to start for your first elm app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Action = RevealTile Int                                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;


init : Game                                                              &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
init =
  Game.createGame 15 15 5787345


update : Action -&amp;gt; Game -&amp;gt; Game                                          &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
update Action game =
  case action of
    RevealTile id -&amp;gt; if not (game.status == IN_PROGRESS) then game else  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                      Game.revealTile game id

main =                                                                   &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  StartApp.Simple.start                                                  &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
    { model = init
    , update = update
    , view = view
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Type describing the actions the game supports. Currently just revealing tiles, and you can see that
we also specify that the RevealTile action expects an Int paramater. That would be the tile id.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The init function provides the initial state for our application. &lt;code&gt;createGame&lt;/code&gt; is a helper function for creating
a game with x cols and y rows. The 3.rd param is a seed for randomizing tiles. We&amp;#8217;ll return to that seed thing in the next chapter!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Update is the function that handles the actual update of state, or rather the transformation to the next state
based on some action. It&amp;#8217;s quite simple in this case, just reveal a given tile and return the updated game&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;No point in revealing more tiles when the game is already over :)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;main&lt;/code&gt; is the entry point into our application. If you use elm-reactor this will be automatically invoked for you, which is handy for getting started quickly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;StartApp.Simple.start&lt;/code&gt; takes care of wiring things up and start your application&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_trouble_in_paradise_we_get_the_same_board_every_time&quot;&gt;Trouble in paradise, we get the same board every time&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do you remember the 3rd param to createGame in the previous chapter? That is the initial seed to a random generator (&lt;a href=&quot;http://package.elm-lang.org/packages/elm-lang/core/2.1.0/Random&quot;&gt;Random&lt;/a&gt;) to randomize the
occurence of mines. The problem is that using the same seed produces the same result. Calling an elm random
generator will return a new seed, so of course I could/should have stored that and used that for the next game.
But I still need an initial seed that&amp;#8217;s different every time I start the app. Current time would be a good candidate
for an initial seed. But there is no getCurrentTime function in Elm. Why ? It&amp;#8217;s impure, and Elm doesn&amp;#8217;t like impure functions.
By &quot;pure&quot;, we mean that if you call a function with the same arguments, you get the same result.
There are several reasons why pure functions is a great thing (testing is one), but I won&amp;#8217;t go into that, let&amp;#8217;s just accept the fact
that this is the case, so how can we deal with it ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well the elm-core package has a &lt;a href=&quot;http://package.elm-lang.org/packages/elm-lang/core/2.1.0/Time&quot;&gt;Time module&lt;/a&gt; with a timestamp function that looks useful.
To use that we have to change a few things though, most notably we can&amp;#8217;t use the simple start app approach any more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-elm&quot; data-lang=&quot;elm&quot;&gt;type Action =
  NewGame                                                                 &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  | RevealTile Int



update : (Float, Action) -&amp;gt; Game -&amp;gt; Game                                  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
update (time, action) game =
  case action of
    NewGame -&amp;gt; Game.createGame 15 15  (truncate time)                     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    RevealTile id -&amp;gt; if not (game.status == IN_PROGRESS) then game else
                       Game.revealTile game id


actions: Signal.Mailbox Action                                            &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
actions =
  Signal.mailbox NewGame

model: Signal Game                                                        &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
model =
  Signal.foldp update init (Time.timestamp actions.signal)

main : Signal Html                                                        &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
main =
  Signal.map (view actions.address) model

port initGame : Task.Task x ()                                            &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
port initGame =
  Signal.send actions.address NewGame&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We introduce a new action &lt;code&gt;NewGame&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our update function now takes a tuple of time and action + game as input parameters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We use the elm core function &lt;code&gt;truncate&lt;/code&gt; to convert the time(stamp) float into an integer and use that as our seed to &lt;code&gt;createGame&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We construct a mailbox for our Action messages manually, with an initial value of NewGame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Our model is a fold (reduce) of all state changes sent to our mailbox (from the app started to the current moment of time).
This is where we introduce the Time.timestamp function, which wraps our action signal and produces a tuple of (timestamp, action)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;main is just a map over our view function with our current model. Since view also expects an (mailbox) address we curry/partially apply that to our view function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Unfortunately I couldn&amp;#8217;t figure out how to get the timestamp passed to the init function. The creation
step (4) of the mailbox doesn&amp;#8217;t actually cause the NewGame action to be executed either. So this is a little hack
that fires off a task to execute the NewGame action. This is run after initialization so when you load the game you&amp;#8217;ll not see state 0 for the game, but actually state 1.
If any elm-ers out there reads this, feel free to comment on how this could be done in a more idiomatic fashion!&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I found &lt;a href=&quot;https://yobriefca.se/blog/2015/08/02/deconstructing-your-first-elm-app/&quot;&gt;this&lt;/a&gt; blogpost
very illuminating for deconstructing start-app.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_but_what_about_undo&quot;&gt;But what about undo ?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is an elm-package I think would help us do that quite simply;
&lt;a href=&quot;https://github.com/TheSeamau5/elm-undo-redo&quot;&gt;elm-undo-redo&lt;/a&gt;. However if you are using &lt;a href=&quot;https://github.com/elm-lang/elm-reactor&quot;&gt;elm-reactor&lt;/a&gt;
you pretty much get undo-redo and more out of the box. Great for development, but maybe not so much for production!&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/P3B4ldi1cmc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Getting into Elm has been a really pleasurable experience so far. It&amp;#8217;s quite easy to get up and running without
knowing all that much about the language. I&amp;#8217;ve found the elm compiler to be a really nice and friendly companion.
The error messages I get are really impressive and I can truly say I&amp;#8217;ve never experienced anything quite like it.
Working with types (at least for this simple application) hasn&amp;#8217;t felt like a burden at all. I still feel I should have
had some tests, but I think I would feel more comfortable refactoring this app with a lot less tests than I would in say JavaScript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If my intention for this post had been to bash JavaScript I chose a poor example to compare with. But then again
that was never my intention. I wanted to show how a well written JavaScript app might compare to an Elm implementation
written by an Elm noob. Hopefully I&amp;#8217;ve also managed to demonstrate that it&amp;#8217;s not all that difficult getting started with Elm and perhaps
peeked your interest enough to give it a try !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_resources&quot;&gt;Resources&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are some of the resources that have helped me getting up to speed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pragmaticstudio.com/elm&quot;&gt;Elm: Building Reactive Web Apps&lt;/a&gt; - A really nice step-by-step tutorial with videos and examples to get you up to speed. You get great value for $29 I think.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pragmaticstudio.com/elm-signals&quot;&gt;Elm: Signals, Mailboxes &amp;amp; Ports&lt;/a&gt; - Elm signals in depth. Really useful for getting into more detail on what Signals are, how they work and how to use them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial/&quot;&gt;Elm Architecture Tutorial&lt;/a&gt; - Tutorial outlining &quot;the Elm Architecture&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://elm-lang.org/&quot;&gt;elm-lang.org&lt;/a&gt; - The official site for the elm language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rundis/elm-light&quot;&gt;elm-light&lt;/a&gt; - My elm plugin for Light Table, or if you use another editor it might be listed &lt;a href=&quot;http://elm-lang.org/get-started#configure-your-editor&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_addendum_potential_improvements&quot;&gt;Addendum - Potential improvements&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Initialize game with seed without adding an extra state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perhaps I should/could have used &lt;a href=&quot;http://elm-lang.org/docs/records#record-types&quot;&gt;extensible records&lt;/a&gt; to model the game&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maybe Array would be a better choice than List for holding tiles ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>
      <item>
        <title>Elm plugin for Light Table</title>
        <link>http://rundis.github.io/blog/2015/elm_light.html</link>
        <pubDate>Fri, 30 Oct 2015 00:00:00 +0100</pubDate>
        <guid isPermaLink="false">2015/elm_light.html</guid>
          <description>
  	       &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_background&quot;&gt;Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve just started playing around a little bit with &lt;a href=&quot;http://elm-lang.org/&quot;&gt;elm&lt;/a&gt;.
This weekend I&amp;#8217;m going to &lt;a href=&quot;http://www.codemesh.io/&quot;&gt;codemesh&lt;/a&gt; where I&amp;#8217;ll be attending an Elm workshop
with the author of Elm, Evan Czaplicki.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To ensure I have an editor I&amp;#8217;m familiar with and to get me started a little, I figured I&amp;#8217;d create an Elm language plugin
for Light Table. However lately I&amp;#8217;ve been a little busy helping out  getting &lt;a href=&quot;https://github.com/LightTable/LightTable&quot; class=&quot;bare&quot;&gt;https://github.com/LightTable/LightTable&lt;/a&gt; version 0.8
released. Last weekend we got an 0.8 alpha out. I needed some of the features from Electron. So now with Light Table using
Electron under the hoods I could finally complete an intial plugin release. It&amp;#8217;s rough, but it&amp;#8217;s an ok start I suppose !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_demo&quot;&gt;Demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/B_eZw_GcM-4&quot;&gt;ScreenCast demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/B_eZw_GcM-4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_plugin&quot;&gt;The plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can find the plugin repo on github &lt;a href=&quot;https://github.com/rundis/elm-light&quot; class=&quot;bare&quot;&gt;https://github.com/rundis/elm-light&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  	       </description>
      </item>

  </channel>
</rss>
